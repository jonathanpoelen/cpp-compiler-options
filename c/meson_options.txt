option('jln_analyzer', type : 'combo', choices : ['default', 'off', 'on', 'taint'], value : 'default', description : 'Enables an static analysis of program flow which looks for “interesting” interprocedural paths through the code, and issues warnings for problems found on them (much more expensive than other GCC warnings)')
option('jln_analyzer_too_complex_warning', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : 'By default, the analysis silently stops if the code is too complicated for the analyzer to fully explore and it reaches an internal limit. This option warns if this occurs.')
option('jln_analyzer_verbosity', type : 'combo', choices : ['default', '0', '1', '2', '3'], value : 'default', description : 'Controls the complexity of the control flow paths that are emitted for analyzer diagnostics\\n - 0: At this level, interprocedural call and return events are displayed, along with the most pertinent state-change events relating to a diagnostic. For example, for a double-free diagnostic, both calls to free will be shown.\\n - 1: As per the previous level, but also show events for the entry to each function.\\n - 2: As per the previous level, but also show events relating to control flow that are significant to triggering the issue (e.g. “true path taken” at a conditional). This level is the default.\\n - 3: As per the previous level, but show all control flow events, not just significant ones.')
option('jln_color', type : 'combo', choices : ['default', 'auto', 'never', 'always'], value : 'default', description : '')
option('jln_control_flow', type : 'combo', choices : ['default', 'off', 'on', 'branch', 'return', 'allow_bugs'], value : 'default', description : 'Insert extra runtime security checks to detect attempts to compromise your code')
option('jln_conversion_warnings', type : 'combo', choices : ['default', 'off', 'on', 'sign', 'conversion'], value : 'on', description : 'Warn for implicit conversions that may alter a value')
option('jln_coverage', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : '')
option('jln_covered_switch_default_warnings', type : 'combo', choices : ['default', 'on', 'off'], value : 'on', description : 'Warning for default label in switch which covers all enumeration values')
option('jln_cpu', type : 'combo', choices : ['default', 'generic', 'native'], value : 'default', description : '')
option('jln_debug', type : 'combo', choices : ['default', 'off', 'on', 'gdb', 'lldb', 'vms', 'codeview', 'dbx', 'sce'], value : 'default', description : 'Produce debugging information in the operating system\'s')
option('jln_debug_level', type : 'combo', choices : ['default', '0', '1', '2', '3', 'line_tables_only', 'line_directives_only'], value : 'default', description : 'Specify debugging level')
option('jln_diagnostics_format', type : 'combo', choices : ['default', 'fixits', 'patch', 'print_source_range_info'], value : 'default', description : 'Emit fix-it hints in a machine-parseable format')
option('jln_exceptions', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : 'Enable C++ exception')
option('jln_fix_compiler_error', type : 'combo', choices : ['default', 'off', 'on'], value : 'on', description : 'Transforms some warnings into errors to comply with the standard')
option('jln_float_sanitizers', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : '')
option('jln_integer_sanitizers', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : '')
option('jln_linker', type : 'combo', choices : ['default', 'bfd', 'gold', 'lld', 'mold', 'native'], value : 'default', description : 'Configure linker')
option('jln_lto', type : 'combo', choices : ['default', 'off', 'on', 'normal', 'fat', 'thin'], value : 'default', description : 'Enable Link Time Optimization')
option('jln_msvc_conformance', type : 'combo', choices : ['default', 'all', 'all_without_throwing_new'], value : 'all', description : 'Standard conformance options')
option('jln_msvc_crt_secure_no_warnings', type : 'combo', choices : ['default', 'off', 'on'], value : 'on', description : 'Disable CRT warnings')
option('jln_msvc_diagnostics_format', type : 'combo', choices : ['default', 'classic', 'column', 'caret'], value : 'caret', description : 'Controls the display of error and warning information (https://learn.microsoft.com/en-us/cpp/build/reference/diagnostics-compiler-diagnostic-options?view=msvc-170)\\n - classic: Which reports only the line number where the issue was found.\\n - column: Includes the column where the issue was found. This can help you identify the specific language construct or character that is causing the issue\\n - caret: Includes the column where the issue was found and places a caret (^) under the location in the line of code where the issue was detected')
option('jln_msvc_isystem', type : 'combo', choices : ['default', 'anglebrackets', 'include_and_caexcludepath'], value : 'default', description : 'Warnings concerning external header (https://devblogs.microsoft.com/cppblog/broken-warnings-theory)')
option('jln_ndebug', type : 'combo', choices : ['default', 'off', 'on', 'with_optimization_1_or_above'], value : 'with_optimization_1_or_above', description : 'Enable NDEBUG macro (disable assert macro)')
option('jln_optimization', type : 'combo', choices : ['default', '0', 'g', '1', '2', '3', 'fast', 'size', 'z'], value : 'default', description : 'Optimization level\\n - 0: Not optimize\\n - g: Enable debugging experience\\n - 1: Optimize\\n - 2: Optimize even more\\n - 3: Optimize yet more\\n - fast: Enables all optimization=3 and disregard strict standards compliance\\n - size: Optimize for size\\n - z: Optimize for size aggressively (/!\\ possible slow compilation with emcc)')
option('jln_other_sanitizers', type : 'combo', choices : ['default', 'off', 'thread', 'pointer', 'memory'], value : 'default', description : 'Enable other sanitizers')
option('jln_pedantic', type : 'combo', choices : ['default', 'off', 'on', 'as_error'], value : 'on', description : 'Issue all the warnings demanded by strict ISO C and ISO C++')
option('jln_pie', type : 'combo', choices : ['default', 'off', 'on', 'static', 'fpic', 'fPIC', 'fpie', 'fPIE'], value : 'default', description : 'Controls position-independent code generation')
option('jln_relro', type : 'combo', choices : ['default', 'off', 'on', 'full'], value : 'default', description : 'Specifies a memory segment that should be made read-only after relocation, if supported.')
option('jln_reproducible_build_warnings', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : 'Warn when macros \"__TIME__\", \"__DATE__\" or \"__TIMESTAMP__\" are encountered as they might prevent bit-wise-identical reproducible compilations')
option('jln_sanitizers', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : 'Enable sanitizers (asan, ubsan, etc)')
option('jln_shadow_warnings', type : 'combo', choices : ['default', 'off', 'on', 'local', 'compatible_local', 'all'], value : 'off', description : '')
option('jln_stack_protector', type : 'combo', choices : ['default', 'off', 'on', 'strong', 'all'], value : 'default', description : 'Emit extra code to check for buffer overflows, such as stack smashing attacks')
option('jln_stl_fix', type : 'combo', choices : ['default', 'off', 'on'], value : 'on', description : 'Enable /DNOMINMAX with msvc')
option('jln_suggestions', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : 'Warn for cases where adding an attribute may be beneficial')
option('jln_switch_warnings', type : 'combo', choices : ['default', 'on', 'off', 'exhaustive_enum', 'mandatory_default', 'exhaustive_enum_and_mandatory_default'], value : 'on', description : 'Warnings concerning the switch keyword')
option('jln_unsafe_buffer_usage_warnings', type : 'combo', choices : ['default', 'on', 'off'], value : 'default', description : 'Enable -Wunsafe-buffer-usage with clang')
option('jln_var_init', type : 'combo', choices : ['default', 'uninitialized', 'pattern', 'zero'], value : 'default', description : 'Initialize all stack variables implicitly, including padding\\n - uninitialized: Doesn\'t initialize any automatic variables (default behavior of Gcc and Clang)\\n - pattern: Initialize automatic variables with byte-repeatable pattern (0xFE for Gcc, 0xAA for Clang)\\n - zero: zero Initialize automatic variables with zeroes')
option('jln_warnings', type : 'combo', choices : ['default', 'off', 'on', 'strict', 'very_strict'], value : 'on', description : 'Warning level')
option('jln_warnings_as_error', type : 'combo', choices : ['default', 'off', 'on', 'basic'], value : 'default', description : 'Make all or some warnings into errors')
option('jln_whole_program', type : 'combo', choices : ['default', 'off', 'on', 'strip_all'], value : 'default', description : 'Assume that the current compilation unit represents the whole program being compiled. This option should not be used in combination with lto.')
option('jln_windows_bigobj', type : 'combo', choices : ['default', 'on'], value : 'on', description : 'Increases that addressable sections capacity')
