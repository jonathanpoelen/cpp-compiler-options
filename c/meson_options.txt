option('jln_analyzer', type : 'combo', choices : ['default', 'off', 'on', 'with_external_headers'], value : 'default', description : 'Enables an static analysis. It can have false positives and false negatives. It is a bug-finding tool, rather than a tool for proving program correctness. Available only with GCC and MSVC.')
option('jln_analyzer_too_complex_warning', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : 'By default, the analysis silently stops if the code is too complicated for the analyzer to fully explore and it reaches an internal limit. This option warns if this occurs. Available only with GCC.')
option('jln_analyzer_verbosity', type : 'combo', choices : ['default', '0', '1', '2', '3'], value : 'default', description : 'Controls the complexity of the control flow paths that are emitted for analyzer diagnostics. Available only with GCC.\\n - 0: At this level, interprocedural call and return events are displayed, along with the most pertinent state-change events relating to a diagnostic. For example, for a double-free diagnostic, both calls to free will be shown.\\n - 1: As per the previous level, but also show events for the entry to each function.\\n - 2: As per the previous level, but also show events relating to control flow that are significant to triggering the issue (e.g. \"true path taken\" at a conditional). This level is the default.\\n - 3: As per the previous level, but show all control flow events, not just significant ones.')
option('jln_color', type : 'combo', choices : ['default', 'auto', 'never', 'always'], value : 'default', description : '')
option('jln_conversion_warnings', type : 'combo', choices : ['default', 'off', 'on', 'sign', 'float', 'conversion', 'all'], value : 'on', description : 'Warn for implicit conversions that may alter a value.\\n - on: Combine conversion and sign value\\n - sign: Warn for implicit conversions that may change the sign (the `unsigned_integer = signed_integer`) or a comparison between signed and unsigned values could produce an incorrect result when the signed value is converted to unsigned.\\n - float: Warn for implicit conversions that reduce the precision of a real value.\\n - conversion: Warn for implicit conversions that may alter a value.\\n - all: Like conversion and also warn about implicit conversions from arithmetic operations even when conversion of the operands to the same type cannot change their values.')
option('jln_coverage', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : '')
option('jln_covered_switch_default_warnings', type : 'combo', choices : ['default', 'on', 'off'], value : 'on', description : 'Warning for default label in switch which covers all enumeration values.')
option('jln_cpu', type : 'combo', choices : ['default', 'generic', 'native'], value : 'default', description : '')
option('jln_diagnostics_format', type : 'combo', choices : ['default', 'fixits', 'patch', 'print_source_range_info'], value : 'default', description : 'Emit fix-it hints in a machine-parseable format.')
option('jln_emcc_debug', type : 'combo', choices : ['default', 'off', 'on', 'slow'], value : 'default', description : 'Add checks with Emscripten compiler.\\n - off: Disable checks used with default `-O0` optimization.\\n - on: Activate some checks in addition to those used with default `-O0` optimization.\\n - slow: Activate checks that can greatly slow down the program.')
option('jln_exceptions', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : 'Enable C++ exceptions.')
option('jln_hardened', type : 'combo', choices : ['default', 'off', 'on', 'all'], value : 'default', description : 'Enable a set of flags for C and C++ that improve the security of the generated code without affecting its ABI. Can impact performance.\\n - off: Use `/GS-` with MSVC-like compiler. Does nothing with other compilers.\\n - all: Use -fstack-protector-all instead of -fstack-protector-strong')
option('jln_linker', type : 'combo', choices : ['default', 'bfd', 'gold', 'lld', 'mold', 'native'], value : 'default', description : 'Configure linker.')
option('jln_lto', type : 'combo', choices : ['default', 'off', 'on', 'full', 'thin_or_nothing', 'whole_program', 'whole_program_and_full_lto'], value : 'default', description : 'Enable Link Time Optimization. Also known as interprocedural optimization (IPO).\\n - on: Activates ThinLTO when available (Clang), otherwise FullLTO.\\n - full: Activates FullLTO.\\n - thin_or_nothing: Activates ThinLTO. Disable lto when not supported.\\n - whole_program: Assume that the current compilation unit represents the whole program being compiled. This option should not be used to compile a library. When not supported by the compiler, ThinLTO or FullLTO are used.\\n - whole_program_and_full_lto: Same as `whole_program`, but use FullLTO when not supported.')
option('jln_msvc_crt_secure_no_warnings', type : 'combo', choices : ['default', 'off', 'on'], value : 'on', description : 'Disable CRT warnings with MSVC.')
option('jln_msvc_diagnostics_format', type : 'combo', choices : ['default', 'classic', 'column', 'caret'], value : 'caret', description : 'Controls the display of error and warning information (https://learn.microsoft.com/en-us/cpp/build/reference/diagnostics-compiler-diagnostic-options).\\n - classic: Which reports only the line number where the issue was found.\\n - column: Includes the column where the issue was found. This can help you identify the specific language construct or character that is causing the issue.\\n - caret: Includes the column where the issue was found and places a caret (^) under the location in the line of code where the issue was detected.')
option('jln_msvc_isystem', type : 'combo', choices : ['default', 'anglebrackets', 'include_and_caexcludepath', 'assumed'], value : 'default', description : 'Warnings concerning external header (https://devblogs.microsoft.com/cppblog/broken-warnings-theory).')
option('jln_ndebug', type : 'combo', choices : ['default', 'off', 'on', 'with_optimization_1_or_above'], value : 'with_optimization_1_or_above', description : 'Enable `NDEBUG` macro (disable assert macro).')
option('jln_optimization', type : 'combo', choices : ['default', '0', 'g', '1', '2', '3', 'fast', 'size', 'z'], value : 'default', description : 'Optimization level.\\n - 0: Not optimize.\\n - g: Enable debugging experience.\\n - 1: Optimize.\\n - 2: Optimize even more.\\n - 3: Optimize yet more.\\n - fast: Enables all `optimization=3` and disregard strict standards compliance.\\n - size: Optimize for size.\\n - z: Optimize for size aggressively (/!\\ possible slow compilation with emcc).')
option('jln_pedantic', type : 'combo', choices : ['default', 'off', 'on', 'as_error'], value : 'on', description : 'Issue all the warnings demanded by strict ISO C and ISO C++.')
option('jln_reproducible_build_warnings', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : 'Warn when macros \"__TIME__\", \"__DATE__\" or \"__TIMESTAMP__\" are encountered as they might prevent bit-wise-identical reproducible compilations.')
option('jln_sanitizers', type : 'combo', choices : ['default', 'off', 'on', 'with_minimal_code_size', 'extra', 'extra_with_minimal_code_size', 'address', 'address_with_minimal_code_size', 'thread', 'undefined', 'undefined_minimal_runtime', 'scudo_hardened_allocator'], value : 'default', description : 'Enable sanitizers (asan, ubsan, etc) when available.\\n - on: Enable address sanitizer and other compatible sanitizers\\n - with_minimal_code_size: Enable address sanitizer and other compatible sanitizers, but reduces code size by removing the possibility of deleting checks via an environment variable when possible (use `-fsanitize-address-use-after-return=runtime` with Clang family).\\n - extra: Enable address sanitizer and other compatible sanitizers, even those who require a config via environment variable.\\n - extra_with_minimal_code_size: Combines `extra` and `with_minimal_code_size` values.\\n - address: Enable address sanitizer only.\\n - address_with_minimal_code_size: Enable address sanitizer only, but reduces code size by removing the possibility of deleting checks via an environment variable when possible (use `-fsanitize-address-use-after-return=runtime` with Clang family).\\n - thread: Enable thread sanitizer.\\n - undefined: Enable undefined sanitizer.\\n - undefined_minimal_runtime: Enable undefined sanitizer with minimal UBSan runtime when available (Clang>=6).\\n - scudo_hardened_allocator: Enable Scudo Hardened Allocator with Clang. See https://llvm.org/docs/ScudoHardenedAllocator.html.')
option('jln_shadow_warnings', type : 'combo', choices : ['default', 'off', 'on', 'local', 'compatible_local', 'all'], value : 'off', description : '')
option('jln_stl_fix', type : 'combo', choices : ['default', 'off', 'on'], value : 'on', description : 'Enable `/DNOMINMAX` with MSVC.')
option('jln_suggest_attributes', type : 'combo', choices : ['default', 'off', 'on', 'common', 'analysis', 'unity', 'all'], value : 'on', description : 'Warn for cases where adding an attribute may be beneficial. With GCC, this  analysis requires option `-fipa-pure-const`, which is enabled by default at `-O1` and higher.\\n - on: Suggests noreturn attribute with Clang and GCC.\\n - common: Suggests noreturn and format attributes with GCC ; noreturn with Clang.\\n - analysis: Suggests noreturn, format attributes, malloc and returns_nonnull attributes with GCC ; noreturn with Clang.\\n - unity: Suggests noreturn, format attributes and final on types and methods ; noreturn with Clang.\\n - all: Active all suggestions for attributes.')
option('jln_switch_warnings', type : 'combo', choices : ['default', 'on', 'off', 'exhaustive_enum', 'mandatory_default', 'exhaustive_enum_and_mandatory_default'], value : 'on', description : 'Warnings concerning the switch keyword.')
option('jln_symbols', type : 'combo', choices : ['default', 'hidden', 'strip_all', 'gc_sections', 'nodebug', 'debug', 'minimal_debug', 'full_debug', 'btf', 'codeview', 'ctf', 'ctf1', 'ctf2', 'vms', 'vms1', 'vms2', 'vms3', 'dbx', 'lldb', 'sce', 'dwarf'], value : 'default', description : 'Produce debugging information in the operating system\'s.\\n - hidden: Use `-fvisibility=hidden` with Clang, GCC and other compilers that support this flag.\\n - strip_all: Strip all symbols.\\n - gc_sections: Enable garbage collection of unused sections.\\n - nodebug: Request no debugging information.\\n - debug: Request debugging information. How much information can be controlled with options `minimal_debug` and `full_debug`.\\n - minimal_debug: If possible, produces information for tracebacks only. This includes descriptions of functions and external variables, and line number tables, but no information about local variables. If the level is not supported by a compiler, this is equivalent to the `debug` option.\\n - full_debug: If possible, includes extra information, such as all the macro definitions present in the program.\\n - btf: GCC only. Request BTF debug information. BTF is the default debugging format for the eBPF  target.\\n - codeview: GCC only. Code View debug format (used by Microsoft Visual C++ on Windows).\\n - ctf: GCC only. Produce a CTF debug information. The default level is 2.\\n - ctf1: Level 1 produces CTF information for tracebacks only. This includes callsite information, but does not include type information.\\n - ctf2: Level 2 produces type information for entities (functions, data objects etc.)  at file-scope or global-scope only.\\n - vms: GCC only. Alpha/VMS debug format (used by DEBUG on Alpha/VMS systems).The default level is 2.\\n - vms1: Same as `minimal_debug`, but for Alpha/VMS.\\n - vms2: Same as `debug`, but for Alpha/VMS.\\n - vms3: Same as `full_debug`, but for Alpha/VMS.\\n - dbx: Clang only.\\n - lldb: Clang only.\\n - sce: Clang only.\\n - dwarf: Clang-cl only')
option('jln_unsafe_buffer_usage_warnings', type : 'combo', choices : ['default', 'on', 'off'], value : 'default', description : 'Enable `-Wunsafe-buffer-usage` with Clang (https://clang.llvm.org/docs/SafeBuffers.html).')
option('jln_var_init', type : 'combo', choices : ['default', 'uninitialized', 'pattern', 'zero'], value : 'default', description : 'Initialize all stack variables implicitly, including padding.\\n - uninitialized: Doesn\'t initialize any automatic variables (default behavior of Clang and GCC).\\n - pattern: Initialize automatic variables with byte-repeatable pattern (0xFE for GCC, 0xAA for Clang).\\n - zero: zero Initialize automatic variables with zeroes.')
option('jln_warnings', type : 'combo', choices : ['default', 'off', 'on', 'essential', 'extensive'], value : 'on', description : 'Warning level.\\n - on: Activates essential warnings and extras.\\n - essential: Activates essential warnings, typically `-Wall -Wextra` or `/W4`).\\n - extensive: Activates essential warnings, extras and some that may raise false positives')
option('jln_warnings_as_error', type : 'combo', choices : ['default', 'off', 'on', 'basic'], value : 'default', description : 'Make all or some warnings into errors.')
option('jln_windows_bigobj', type : 'combo', choices : ['default', 'on'], value : 'on', description : 'Increases that addressable sections capacity.')
