# File generated with https://github.com/jonathanpoelen/cpp-compiler-options

set(_JLN_ANALYZER_VALUES default off on with_external_headers)
set(_JLN_ANALYZER_TOO_COMPLEX_WARNING_VALUES default off on)
set(_JLN_ANALYZER_VERBOSITY_VALUES default 0 1 2 3)
set(_JLN_COLOR_VALUES default auto never always)
set(_JLN_CONVERSION_WARNINGS_VALUES default off on sign float conversion all)
set(_JLN_COVERAGE_VALUES default off on)
set(_JLN_COVERED_SWITCH_DEFAULT_WARNINGS_VALUES default on off)
set(_JLN_CPU_VALUES default generic native)
set(_JLN_DIAGNOSTICS_FORMAT_VALUES default fixits patch print_source_range_info)
set(_JLN_EMCC_DEBUG_VALUES default off on slow)
set(_JLN_EXCEPTIONS_VALUES default off on)
set(_JLN_HARDENED_VALUES default off on all)
set(_JLN_LINKER_VALUES default bfd gold lld mold native)
set(_JLN_LTO_VALUES default off on full thin_or_nothing whole_program whole_program_and_full_lto)
set(_JLN_MSVC_CRT_SECURE_NO_WARNINGS_VALUES default off on)
set(_JLN_MSVC_DIAGNOSTICS_FORMAT_VALUES default classic column caret)
set(_JLN_MSVC_ISYSTEM_VALUES default anglebrackets include_and_caexcludepath external_as_include_system_flag assumed)
set(_JLN_NDEBUG_VALUES default off on with_optimization_1_or_above)
set(_JLN_OPTIMIZATION_VALUES default 0 g 1 2 3 fast size z)
set(_JLN_PEDANTIC_VALUES default off on as_error)
set(_JLN_REPRODUCIBLE_BUILD_WARNINGS_VALUES default off on)
set(_JLN_SANITIZERS_VALUES default off on with_minimal_code_size extra extra_with_minimal_code_size address address_with_minimal_code_size thread undefined undefined_minimal_runtime scudo_hardened_allocator)
set(_JLN_SHADOW_WARNINGS_VALUES default off on local compatible_local all)
set(_JLN_STL_FIX_VALUES default off on)
set(_JLN_SUGGEST_ATTRIBUTES_VALUES default off on common analysis unity all)
set(_JLN_SWITCH_WARNINGS_VALUES default on off exhaustive_enum mandatory_default exhaustive_enum_and_mandatory_default)
set(_JLN_SYMBOLS_VALUES default hidden strip_all gc_sections nodebug debug minimal_debug full_debug btf codeview ctf ctf1 ctf2 vms vms1 vms2 vms3 dbx lldb sce dwarf)
set(_JLN_UNSAFE_BUFFER_USAGE_WARNINGS_VALUES default on off)
set(_JLN_VAR_INIT_VALUES default uninitialized pattern zero)
set(_JLN_WARNINGS_VALUES default off on essential extensive)
set(_JLN_WARNINGS_AS_ERROR_VALUES default off on basic)
set(_JLN_WINDOWS_BIGOBJ_VALUES default on)
set(_JLN_VERBOSE_VALUES on off)
set(_JLN_AUTO_PROFILE_VALUES on off)
set(_JLN_DISABLE_OTHERS_VALUES on off)


set(JLN_ANALYZER "${JLN_ANALYZER}" CACHE STRING "Enables an static analysis. It can have false positives and false negatives. It is a bug-finding tool, rather than a tool for proving program correctness. Available only with GCC and MSVC.")
set_property(CACHE JLN_ANALYZER PROPERTY STRINGS "default" "off" "on" "with_external_headers")
if(NOT("${JLN_ANALYZER}" STREQUAL ""))
  string(TOLOWER "${JLN_ANALYZER}" JLN_ANALYZER)
  if(NOT(("default" STREQUAL JLN_ANALYZER) OR ("off" STREQUAL JLN_ANALYZER) OR ("on" STREQUAL JLN_ANALYZER) OR ("with_external_headers" STREQUAL JLN_ANALYZER)))
    message(FATAL_ERROR "Unknow value \"${JLN_ANALYZER}\" for JLN_ANALYZER, expected: default, off, on, with_external_headers")
  endif()
endif()
set(JLN_ANALYZER_TOO_COMPLEX_WARNING "${JLN_ANALYZER_TOO_COMPLEX_WARNING}" CACHE STRING "By default, the analysis silently stops if the code is too complicated for the analyzer to fully explore and it reaches an internal limit. This option warns if this occurs. Available only with GCC.")
set_property(CACHE JLN_ANALYZER_TOO_COMPLEX_WARNING PROPERTY STRINGS "default" "off" "on")
if(NOT("${JLN_ANALYZER_TOO_COMPLEX_WARNING}" STREQUAL ""))
  string(TOLOWER "${JLN_ANALYZER_TOO_COMPLEX_WARNING}" JLN_ANALYZER_TOO_COMPLEX_WARNING)
  if(NOT(("default" STREQUAL JLN_ANALYZER_TOO_COMPLEX_WARNING) OR ("off" STREQUAL JLN_ANALYZER_TOO_COMPLEX_WARNING) OR ("on" STREQUAL JLN_ANALYZER_TOO_COMPLEX_WARNING)))
    message(FATAL_ERROR "Unknow value \"${JLN_ANALYZER_TOO_COMPLEX_WARNING}\" for JLN_ANALYZER_TOO_COMPLEX_WARNING, expected: default, off, on")
  endif()
endif()
set(JLN_ANALYZER_VERBOSITY "${JLN_ANALYZER_VERBOSITY}" CACHE STRING "Controls the complexity of the control flow paths that are emitted for analyzer diagnostics. Available only with GCC.\n - 0: At this level, interprocedural call and return events are displayed, along with the most pertinent state-change events relating to a diagnostic. For example, for a double-free diagnostic, both calls to free will be shown.\n - 1: As per the previous level, but also show events for the entry to each function.\n - 2: As per the previous level, but also show events relating to control flow that are significant to triggering the issue (e.g. \"true path taken\" at a conditional). This level is the default.\n - 3: As per the previous level, but show all control flow events, not just significant ones.")
set_property(CACHE JLN_ANALYZER_VERBOSITY PROPERTY STRINGS "default" "0" "1" "2" "3")
if(NOT("${JLN_ANALYZER_VERBOSITY}" STREQUAL ""))
  string(TOLOWER "${JLN_ANALYZER_VERBOSITY}" JLN_ANALYZER_VERBOSITY)
  if(NOT(("default" STREQUAL JLN_ANALYZER_VERBOSITY) OR ("0" STREQUAL JLN_ANALYZER_VERBOSITY) OR ("1" STREQUAL JLN_ANALYZER_VERBOSITY) OR ("2" STREQUAL JLN_ANALYZER_VERBOSITY) OR ("3" STREQUAL JLN_ANALYZER_VERBOSITY)))
    message(FATAL_ERROR "Unknow value \"${JLN_ANALYZER_VERBOSITY}\" for JLN_ANALYZER_VERBOSITY, expected: default, 0, 1, 2, 3")
  endif()
endif()
set(JLN_COLOR "${JLN_COLOR}" CACHE STRING "")
set_property(CACHE JLN_COLOR PROPERTY STRINGS "default" "auto" "never" "always")
if(NOT("${JLN_COLOR}" STREQUAL ""))
  string(TOLOWER "${JLN_COLOR}" JLN_COLOR)
  if(NOT(("default" STREQUAL JLN_COLOR) OR ("auto" STREQUAL JLN_COLOR) OR ("never" STREQUAL JLN_COLOR) OR ("always" STREQUAL JLN_COLOR)))
    message(FATAL_ERROR "Unknow value \"${JLN_COLOR}\" for JLN_COLOR, expected: default, auto, never, always")
  endif()
endif()
set(JLN_CONVERSION_WARNINGS "${JLN_CONVERSION_WARNINGS}" CACHE STRING "Warn for implicit conversions that may alter a value.\n - on: Combine conversion and sign value\n - sign: Warn for implicit conversions that may change the sign (the `unsigned_integer = signed_integer`) or a comparison between signed and unsigned values could produce an incorrect result when the signed value is converted to unsigned.\n - float: Warn for implicit conversions that reduce the precision of a real value.\n - conversion: Warn for implicit conversions that may alter a value.\n - all: Like conversion and also warn about implicit conversions from arithmetic operations even when conversion of the operands to the same type cannot change their values.")
set_property(CACHE JLN_CONVERSION_WARNINGS PROPERTY STRINGS "default" "off" "on" "sign" "float" "conversion" "all")
if(NOT("${JLN_CONVERSION_WARNINGS}" STREQUAL ""))
  string(TOLOWER "${JLN_CONVERSION_WARNINGS}" JLN_CONVERSION_WARNINGS)
  if(NOT(("default" STREQUAL JLN_CONVERSION_WARNINGS) OR ("off" STREQUAL JLN_CONVERSION_WARNINGS) OR ("on" STREQUAL JLN_CONVERSION_WARNINGS) OR ("sign" STREQUAL JLN_CONVERSION_WARNINGS) OR ("float" STREQUAL JLN_CONVERSION_WARNINGS) OR ("conversion" STREQUAL JLN_CONVERSION_WARNINGS) OR ("all" STREQUAL JLN_CONVERSION_WARNINGS)))
    message(FATAL_ERROR "Unknow value \"${JLN_CONVERSION_WARNINGS}\" for JLN_CONVERSION_WARNINGS, expected: default, off, on, sign, float, conversion, all")
  endif()
endif()
set(JLN_COVERAGE "${JLN_COVERAGE}" CACHE STRING "")
set_property(CACHE JLN_COVERAGE PROPERTY STRINGS "default" "off" "on")
if(NOT("${JLN_COVERAGE}" STREQUAL ""))
  string(TOLOWER "${JLN_COVERAGE}" JLN_COVERAGE)
  if(NOT(("default" STREQUAL JLN_COVERAGE) OR ("off" STREQUAL JLN_COVERAGE) OR ("on" STREQUAL JLN_COVERAGE)))
    message(FATAL_ERROR "Unknow value \"${JLN_COVERAGE}\" for JLN_COVERAGE, expected: default, off, on")
  endif()
endif()
set(JLN_COVERED_SWITCH_DEFAULT_WARNINGS "${JLN_COVERED_SWITCH_DEFAULT_WARNINGS}" CACHE STRING "Warning for default label in switch which covers all enumeration values.")
set_property(CACHE JLN_COVERED_SWITCH_DEFAULT_WARNINGS PROPERTY STRINGS "default" "on" "off")
if(NOT("${JLN_COVERED_SWITCH_DEFAULT_WARNINGS}" STREQUAL ""))
  string(TOLOWER "${JLN_COVERED_SWITCH_DEFAULT_WARNINGS}" JLN_COVERED_SWITCH_DEFAULT_WARNINGS)
  if(NOT(("default" STREQUAL JLN_COVERED_SWITCH_DEFAULT_WARNINGS) OR ("on" STREQUAL JLN_COVERED_SWITCH_DEFAULT_WARNINGS) OR ("off" STREQUAL JLN_COVERED_SWITCH_DEFAULT_WARNINGS)))
    message(FATAL_ERROR "Unknow value \"${JLN_COVERED_SWITCH_DEFAULT_WARNINGS}\" for JLN_COVERED_SWITCH_DEFAULT_WARNINGS, expected: default, on, off")
  endif()
endif()
set(JLN_CPU "${JLN_CPU}" CACHE STRING "")
set_property(CACHE JLN_CPU PROPERTY STRINGS "default" "generic" "native")
if(NOT("${JLN_CPU}" STREQUAL ""))
  string(TOLOWER "${JLN_CPU}" JLN_CPU)
  if(NOT(("default" STREQUAL JLN_CPU) OR ("generic" STREQUAL JLN_CPU) OR ("native" STREQUAL JLN_CPU)))
    message(FATAL_ERROR "Unknow value \"${JLN_CPU}\" for JLN_CPU, expected: default, generic, native")
  endif()
endif()
set(JLN_DIAGNOSTICS_FORMAT "${JLN_DIAGNOSTICS_FORMAT}" CACHE STRING "Emit fix-it hints in a machine-parseable format.")
set_property(CACHE JLN_DIAGNOSTICS_FORMAT PROPERTY STRINGS "default" "fixits" "patch" "print_source_range_info")
if(NOT("${JLN_DIAGNOSTICS_FORMAT}" STREQUAL ""))
  string(TOLOWER "${JLN_DIAGNOSTICS_FORMAT}" JLN_DIAGNOSTICS_FORMAT)
  if(NOT(("default" STREQUAL JLN_DIAGNOSTICS_FORMAT) OR ("fixits" STREQUAL JLN_DIAGNOSTICS_FORMAT) OR ("patch" STREQUAL JLN_DIAGNOSTICS_FORMAT) OR ("print_source_range_info" STREQUAL JLN_DIAGNOSTICS_FORMAT)))
    message(FATAL_ERROR "Unknow value \"${JLN_DIAGNOSTICS_FORMAT}\" for JLN_DIAGNOSTICS_FORMAT, expected: default, fixits, patch, print_source_range_info")
  endif()
endif()
set(JLN_EMCC_DEBUG "${JLN_EMCC_DEBUG}" CACHE STRING "Add checks with Emscripten compiler.\n - off: Disable checks used with default `-O0` optimization.\n - on: Activate some checks in addition to those used with default `-O0` optimization.\n - slow: Activate checks that can greatly slow down the program.")
set_property(CACHE JLN_EMCC_DEBUG PROPERTY STRINGS "default" "off" "on" "slow")
if(NOT("${JLN_EMCC_DEBUG}" STREQUAL ""))
  string(TOLOWER "${JLN_EMCC_DEBUG}" JLN_EMCC_DEBUG)
  if(NOT(("default" STREQUAL JLN_EMCC_DEBUG) OR ("off" STREQUAL JLN_EMCC_DEBUG) OR ("on" STREQUAL JLN_EMCC_DEBUG) OR ("slow" STREQUAL JLN_EMCC_DEBUG)))
    message(FATAL_ERROR "Unknow value \"${JLN_EMCC_DEBUG}\" for JLN_EMCC_DEBUG, expected: default, off, on, slow")
  endif()
endif()
set(JLN_EXCEPTIONS "${JLN_EXCEPTIONS}" CACHE STRING "Enable C++ exceptions.")
set_property(CACHE JLN_EXCEPTIONS PROPERTY STRINGS "default" "off" "on")
if(NOT("${JLN_EXCEPTIONS}" STREQUAL ""))
  string(TOLOWER "${JLN_EXCEPTIONS}" JLN_EXCEPTIONS)
  if(NOT(("default" STREQUAL JLN_EXCEPTIONS) OR ("off" STREQUAL JLN_EXCEPTIONS) OR ("on" STREQUAL JLN_EXCEPTIONS)))
    message(FATAL_ERROR "Unknow value \"${JLN_EXCEPTIONS}\" for JLN_EXCEPTIONS, expected: default, off, on")
  endif()
endif()
set(JLN_HARDENED "${JLN_HARDENED}" CACHE STRING "Enable a set of flags for C and C++ that improve the security of the generated code without affecting its ABI. Can impact performance.\n - off: Use `/GS-` with MSVC-like compiler. Does nothing with other compilers.\n - all: Use -fstack-protector-all instead of -fstack-protector-strong")
set_property(CACHE JLN_HARDENED PROPERTY STRINGS "default" "off" "on" "all")
if(NOT("${JLN_HARDENED}" STREQUAL ""))
  string(TOLOWER "${JLN_HARDENED}" JLN_HARDENED)
  if(NOT(("default" STREQUAL JLN_HARDENED) OR ("off" STREQUAL JLN_HARDENED) OR ("on" STREQUAL JLN_HARDENED) OR ("all" STREQUAL JLN_HARDENED)))
    message(FATAL_ERROR "Unknow value \"${JLN_HARDENED}\" for JLN_HARDENED, expected: default, off, on, all")
  endif()
endif()
set(JLN_LINKER "${JLN_LINKER}" CACHE STRING "Configure linker.")
set_property(CACHE JLN_LINKER PROPERTY STRINGS "default" "bfd" "gold" "lld" "mold" "native")
if(NOT("${JLN_LINKER}" STREQUAL ""))
  string(TOLOWER "${JLN_LINKER}" JLN_LINKER)
  if(NOT(("default" STREQUAL JLN_LINKER) OR ("bfd" STREQUAL JLN_LINKER) OR ("gold" STREQUAL JLN_LINKER) OR ("lld" STREQUAL JLN_LINKER) OR ("mold" STREQUAL JLN_LINKER) OR ("native" STREQUAL JLN_LINKER)))
    message(FATAL_ERROR "Unknow value \"${JLN_LINKER}\" for JLN_LINKER, expected: default, bfd, gold, lld, mold, native")
  endif()
endif()
set(JLN_LTO "${JLN_LTO}" CACHE STRING "Enable Link Time Optimization. Also known as interprocedural optimization (IPO).\n - on: Activates ThinLTO when available (Clang), otherwise FullLTO.\n - full: Activates FullLTO.\n - thin_or_nothing: Activates ThinLTO. Disable lto when not supported.\n - whole_program: Assume that the current compilation unit represents the whole program being compiled. This option should not be used to compile a library. When not supported by the compiler, ThinLTO or FullLTO are used.\n - whole_program_and_full_lto: Same as `whole_program`, but use FullLTO when not supported.")
set_property(CACHE JLN_LTO PROPERTY STRINGS "default" "off" "on" "full" "thin_or_nothing" "whole_program" "whole_program_and_full_lto")
if(NOT("${JLN_LTO}" STREQUAL ""))
  string(TOLOWER "${JLN_LTO}" JLN_LTO)
  if(NOT(("default" STREQUAL JLN_LTO) OR ("off" STREQUAL JLN_LTO) OR ("on" STREQUAL JLN_LTO) OR ("full" STREQUAL JLN_LTO) OR ("thin_or_nothing" STREQUAL JLN_LTO) OR ("whole_program" STREQUAL JLN_LTO) OR ("whole_program_and_full_lto" STREQUAL JLN_LTO)))
    message(FATAL_ERROR "Unknow value \"${JLN_LTO}\" for JLN_LTO, expected: default, off, on, full, thin_or_nothing, whole_program, whole_program_and_full_lto")
  endif()
endif()
set(JLN_MSVC_CRT_SECURE_NO_WARNINGS "${JLN_MSVC_CRT_SECURE_NO_WARNINGS}" CACHE STRING "Disable CRT warnings with MSVC.")
set_property(CACHE JLN_MSVC_CRT_SECURE_NO_WARNINGS PROPERTY STRINGS "default" "off" "on")
if(NOT("${JLN_MSVC_CRT_SECURE_NO_WARNINGS}" STREQUAL ""))
  string(TOLOWER "${JLN_MSVC_CRT_SECURE_NO_WARNINGS}" JLN_MSVC_CRT_SECURE_NO_WARNINGS)
  if(NOT(("default" STREQUAL JLN_MSVC_CRT_SECURE_NO_WARNINGS) OR ("off" STREQUAL JLN_MSVC_CRT_SECURE_NO_WARNINGS) OR ("on" STREQUAL JLN_MSVC_CRT_SECURE_NO_WARNINGS)))
    message(FATAL_ERROR "Unknow value \"${JLN_MSVC_CRT_SECURE_NO_WARNINGS}\" for JLN_MSVC_CRT_SECURE_NO_WARNINGS, expected: default, off, on")
  endif()
endif()
set(JLN_MSVC_DIAGNOSTICS_FORMAT "${JLN_MSVC_DIAGNOSTICS_FORMAT}" CACHE STRING "Controls the display of error and warning information (https://learn.microsoft.com/en-us/cpp/build/reference/diagnostics-compiler-diagnostic-options).\n - classic: Which reports only the line number where the issue was found.\n - column: Includes the column where the issue was found. This can help you identify the specific language construct or character that is causing the issue.\n - caret: Includes the column where the issue was found and places a caret (^) under the location in the line of code where the issue was detected.")
set_property(CACHE JLN_MSVC_DIAGNOSTICS_FORMAT PROPERTY STRINGS "default" "classic" "column" "caret")
if(NOT("${JLN_MSVC_DIAGNOSTICS_FORMAT}" STREQUAL ""))
  string(TOLOWER "${JLN_MSVC_DIAGNOSTICS_FORMAT}" JLN_MSVC_DIAGNOSTICS_FORMAT)
  if(NOT(("default" STREQUAL JLN_MSVC_DIAGNOSTICS_FORMAT) OR ("classic" STREQUAL JLN_MSVC_DIAGNOSTICS_FORMAT) OR ("column" STREQUAL JLN_MSVC_DIAGNOSTICS_FORMAT) OR ("caret" STREQUAL JLN_MSVC_DIAGNOSTICS_FORMAT)))
    message(FATAL_ERROR "Unknow value \"${JLN_MSVC_DIAGNOSTICS_FORMAT}\" for JLN_MSVC_DIAGNOSTICS_FORMAT, expected: default, classic, column, caret")
  endif()
endif()
set(JLN_MSVC_ISYSTEM "${JLN_MSVC_ISYSTEM}" CACHE STRING "Warnings concerning external header (https://devblogs.microsoft.com/cppblog/broken-warnings-theory).")
set_property(CACHE JLN_MSVC_ISYSTEM PROPERTY STRINGS "default" "anglebrackets" "include_and_caexcludepath" "external_as_include_system_flag" "assumed")
if(NOT("${JLN_MSVC_ISYSTEM}" STREQUAL ""))
  string(TOLOWER "${JLN_MSVC_ISYSTEM}" JLN_MSVC_ISYSTEM)
  if(NOT(("default" STREQUAL JLN_MSVC_ISYSTEM) OR ("anglebrackets" STREQUAL JLN_MSVC_ISYSTEM) OR ("include_and_caexcludepath" STREQUAL JLN_MSVC_ISYSTEM) OR ("external_as_include_system_flag" STREQUAL JLN_MSVC_ISYSTEM) OR ("assumed" STREQUAL JLN_MSVC_ISYSTEM)))
    message(FATAL_ERROR "Unknow value \"${JLN_MSVC_ISYSTEM}\" for JLN_MSVC_ISYSTEM, expected: default, anglebrackets, include_and_caexcludepath, external_as_include_system_flag, assumed")
  endif()
endif()
set(JLN_NDEBUG "${JLN_NDEBUG}" CACHE STRING "Enable `NDEBUG` macro (disable assert macro).")
set_property(CACHE JLN_NDEBUG PROPERTY STRINGS "default" "off" "on" "with_optimization_1_or_above")
if(NOT("${JLN_NDEBUG}" STREQUAL ""))
  string(TOLOWER "${JLN_NDEBUG}" JLN_NDEBUG)
  if(NOT(("default" STREQUAL JLN_NDEBUG) OR ("off" STREQUAL JLN_NDEBUG) OR ("on" STREQUAL JLN_NDEBUG) OR ("with_optimization_1_or_above" STREQUAL JLN_NDEBUG)))
    message(FATAL_ERROR "Unknow value \"${JLN_NDEBUG}\" for JLN_NDEBUG, expected: default, off, on, with_optimization_1_or_above")
  endif()
endif()
set(JLN_OPTIMIZATION "${JLN_OPTIMIZATION}" CACHE STRING "Optimization level.\n - 0: Not optimize.\n - g: Enable debugging experience.\n - 1: Optimize.\n - 2: Optimize even more.\n - 3: Optimize yet more.\n - fast: Enables all `optimization=3` and disregard strict standards compliance.\n - size: Optimize for size.\n - z: Optimize for size aggressively (/!\ possible slow compilation with emcc).")
set_property(CACHE JLN_OPTIMIZATION PROPERTY STRINGS "default" "0" "g" "1" "2" "3" "fast" "size" "z")
if(NOT("${JLN_OPTIMIZATION}" STREQUAL ""))
  string(TOLOWER "${JLN_OPTIMIZATION}" JLN_OPTIMIZATION)
  if(NOT(("default" STREQUAL JLN_OPTIMIZATION) OR ("0" STREQUAL JLN_OPTIMIZATION) OR ("g" STREQUAL JLN_OPTIMIZATION) OR ("1" STREQUAL JLN_OPTIMIZATION) OR ("2" STREQUAL JLN_OPTIMIZATION) OR ("3" STREQUAL JLN_OPTIMIZATION) OR ("fast" STREQUAL JLN_OPTIMIZATION) OR ("size" STREQUAL JLN_OPTIMIZATION) OR ("z" STREQUAL JLN_OPTIMIZATION)))
    message(FATAL_ERROR "Unknow value \"${JLN_OPTIMIZATION}\" for JLN_OPTIMIZATION, expected: default, 0, g, 1, 2, 3, fast, size, z")
  endif()
endif()
set(JLN_PEDANTIC "${JLN_PEDANTIC}" CACHE STRING "Issue all the warnings demanded by strict ISO C and ISO C++.")
set_property(CACHE JLN_PEDANTIC PROPERTY STRINGS "default" "off" "on" "as_error")
if(NOT("${JLN_PEDANTIC}" STREQUAL ""))
  string(TOLOWER "${JLN_PEDANTIC}" JLN_PEDANTIC)
  if(NOT(("default" STREQUAL JLN_PEDANTIC) OR ("off" STREQUAL JLN_PEDANTIC) OR ("on" STREQUAL JLN_PEDANTIC) OR ("as_error" STREQUAL JLN_PEDANTIC)))
    message(FATAL_ERROR "Unknow value \"${JLN_PEDANTIC}\" for JLN_PEDANTIC, expected: default, off, on, as_error")
  endif()
endif()
set(JLN_REPRODUCIBLE_BUILD_WARNINGS "${JLN_REPRODUCIBLE_BUILD_WARNINGS}" CACHE STRING "Warn when macros \"__TIME__\", \"__DATE__\" or \"__TIMESTAMP__\" are encountered as they might prevent bit-wise-identical reproducible compilations.")
set_property(CACHE JLN_REPRODUCIBLE_BUILD_WARNINGS PROPERTY STRINGS "default" "off" "on")
if(NOT("${JLN_REPRODUCIBLE_BUILD_WARNINGS}" STREQUAL ""))
  string(TOLOWER "${JLN_REPRODUCIBLE_BUILD_WARNINGS}" JLN_REPRODUCIBLE_BUILD_WARNINGS)
  if(NOT(("default" STREQUAL JLN_REPRODUCIBLE_BUILD_WARNINGS) OR ("off" STREQUAL JLN_REPRODUCIBLE_BUILD_WARNINGS) OR ("on" STREQUAL JLN_REPRODUCIBLE_BUILD_WARNINGS)))
    message(FATAL_ERROR "Unknow value \"${JLN_REPRODUCIBLE_BUILD_WARNINGS}\" for JLN_REPRODUCIBLE_BUILD_WARNINGS, expected: default, off, on")
  endif()
endif()
set(JLN_SANITIZERS "${JLN_SANITIZERS}" CACHE STRING "Enable sanitizers (asan, ubsan, etc) when available.\n - on: Enable address sanitizer and other compatible sanitizers\n - with_minimal_code_size: Enable address sanitizer and other compatible sanitizers, but reduces code size by removing the possibility of deleting checks via an environment variable when possible (use `-fsanitize-address-use-after-return=runtime` with Clang family).\n - extra: Enable address sanitizer and other compatible sanitizers, even those who require a config via environment variable.\n - extra_with_minimal_code_size: Combines `extra` and `with_minimal_code_size` values.\n - address: Enable address sanitizer only.\n - address_with_minimal_code_size: Enable address sanitizer only, but reduces code size by removing the possibility of deleting checks via an environment variable when possible (use `-fsanitize-address-use-after-return=runtime` with Clang family).\n - thread: Enable thread sanitizer.\n - undefined: Enable undefined sanitizer.\n - undefined_minimal_runtime: Enable undefined sanitizer with minimal UBSan runtime when available (Clang>=6).\n - scudo_hardened_allocator: Enable Scudo Hardened Allocator with Clang. See https://llvm.org/docs/ScudoHardenedAllocator.html.")
set_property(CACHE JLN_SANITIZERS PROPERTY STRINGS "default" "off" "on" "with_minimal_code_size" "extra" "extra_with_minimal_code_size" "address" "address_with_minimal_code_size" "thread" "undefined" "undefined_minimal_runtime" "scudo_hardened_allocator")
if(NOT("${JLN_SANITIZERS}" STREQUAL ""))
  string(TOLOWER "${JLN_SANITIZERS}" JLN_SANITIZERS)
  if(NOT(("default" STREQUAL JLN_SANITIZERS) OR ("off" STREQUAL JLN_SANITIZERS) OR ("on" STREQUAL JLN_SANITIZERS) OR ("with_minimal_code_size" STREQUAL JLN_SANITIZERS) OR ("extra" STREQUAL JLN_SANITIZERS) OR ("extra_with_minimal_code_size" STREQUAL JLN_SANITIZERS) OR ("address" STREQUAL JLN_SANITIZERS) OR ("address_with_minimal_code_size" STREQUAL JLN_SANITIZERS) OR ("thread" STREQUAL JLN_SANITIZERS) OR ("undefined" STREQUAL JLN_SANITIZERS) OR ("undefined_minimal_runtime" STREQUAL JLN_SANITIZERS) OR ("scudo_hardened_allocator" STREQUAL JLN_SANITIZERS)))
    message(FATAL_ERROR "Unknow value \"${JLN_SANITIZERS}\" for JLN_SANITIZERS, expected: default, off, on, with_minimal_code_size, extra, extra_with_minimal_code_size, address, address_with_minimal_code_size, thread, undefined, undefined_minimal_runtime, scudo_hardened_allocator")
  endif()
endif()
set(JLN_SHADOW_WARNINGS "${JLN_SHADOW_WARNINGS}" CACHE STRING "")
set_property(CACHE JLN_SHADOW_WARNINGS PROPERTY STRINGS "default" "off" "on" "local" "compatible_local" "all")
if(NOT("${JLN_SHADOW_WARNINGS}" STREQUAL ""))
  string(TOLOWER "${JLN_SHADOW_WARNINGS}" JLN_SHADOW_WARNINGS)
  if(NOT(("default" STREQUAL JLN_SHADOW_WARNINGS) OR ("off" STREQUAL JLN_SHADOW_WARNINGS) OR ("on" STREQUAL JLN_SHADOW_WARNINGS) OR ("local" STREQUAL JLN_SHADOW_WARNINGS) OR ("compatible_local" STREQUAL JLN_SHADOW_WARNINGS) OR ("all" STREQUAL JLN_SHADOW_WARNINGS)))
    message(FATAL_ERROR "Unknow value \"${JLN_SHADOW_WARNINGS}\" for JLN_SHADOW_WARNINGS, expected: default, off, on, local, compatible_local, all")
  endif()
endif()
set(JLN_STL_FIX "${JLN_STL_FIX}" CACHE STRING "Enable `/DNOMINMAX` with MSVC.")
set_property(CACHE JLN_STL_FIX PROPERTY STRINGS "default" "off" "on")
if(NOT("${JLN_STL_FIX}" STREQUAL ""))
  string(TOLOWER "${JLN_STL_FIX}" JLN_STL_FIX)
  if(NOT(("default" STREQUAL JLN_STL_FIX) OR ("off" STREQUAL JLN_STL_FIX) OR ("on" STREQUAL JLN_STL_FIX)))
    message(FATAL_ERROR "Unknow value \"${JLN_STL_FIX}\" for JLN_STL_FIX, expected: default, off, on")
  endif()
endif()
set(JLN_SUGGEST_ATTRIBUTES "${JLN_SUGGEST_ATTRIBUTES}" CACHE STRING "Warn for cases where adding an attribute may be beneficial. With GCC, this  analysis requires option `-fipa-pure-const`, which is enabled by default at `-O1` and higher.\n - on: Suggests noreturn attribute with Clang and GCC.\n - common: Suggests noreturn and format attributes with GCC ; noreturn with Clang.\n - analysis: Suggests noreturn, format attributes, malloc and returns_nonnull attributes with GCC ; noreturn with Clang.\n - unity: Suggests noreturn, format attributes and final on types and methods ; noreturn with Clang.\n - all: Active all suggestions for attributes.")
set_property(CACHE JLN_SUGGEST_ATTRIBUTES PROPERTY STRINGS "default" "off" "on" "common" "analysis" "unity" "all")
if(NOT("${JLN_SUGGEST_ATTRIBUTES}" STREQUAL ""))
  string(TOLOWER "${JLN_SUGGEST_ATTRIBUTES}" JLN_SUGGEST_ATTRIBUTES)
  if(NOT(("default" STREQUAL JLN_SUGGEST_ATTRIBUTES) OR ("off" STREQUAL JLN_SUGGEST_ATTRIBUTES) OR ("on" STREQUAL JLN_SUGGEST_ATTRIBUTES) OR ("common" STREQUAL JLN_SUGGEST_ATTRIBUTES) OR ("analysis" STREQUAL JLN_SUGGEST_ATTRIBUTES) OR ("unity" STREQUAL JLN_SUGGEST_ATTRIBUTES) OR ("all" STREQUAL JLN_SUGGEST_ATTRIBUTES)))
    message(FATAL_ERROR "Unknow value \"${JLN_SUGGEST_ATTRIBUTES}\" for JLN_SUGGEST_ATTRIBUTES, expected: default, off, on, common, analysis, unity, all")
  endif()
endif()
set(JLN_SWITCH_WARNINGS "${JLN_SWITCH_WARNINGS}" CACHE STRING "Warnings concerning the switch keyword.")
set_property(CACHE JLN_SWITCH_WARNINGS PROPERTY STRINGS "default" "on" "off" "exhaustive_enum" "mandatory_default" "exhaustive_enum_and_mandatory_default")
if(NOT("${JLN_SWITCH_WARNINGS}" STREQUAL ""))
  string(TOLOWER "${JLN_SWITCH_WARNINGS}" JLN_SWITCH_WARNINGS)
  if(NOT(("default" STREQUAL JLN_SWITCH_WARNINGS) OR ("on" STREQUAL JLN_SWITCH_WARNINGS) OR ("off" STREQUAL JLN_SWITCH_WARNINGS) OR ("exhaustive_enum" STREQUAL JLN_SWITCH_WARNINGS) OR ("mandatory_default" STREQUAL JLN_SWITCH_WARNINGS) OR ("exhaustive_enum_and_mandatory_default" STREQUAL JLN_SWITCH_WARNINGS)))
    message(FATAL_ERROR "Unknow value \"${JLN_SWITCH_WARNINGS}\" for JLN_SWITCH_WARNINGS, expected: default, on, off, exhaustive_enum, mandatory_default, exhaustive_enum_and_mandatory_default")
  endif()
endif()
set(JLN_SYMBOLS "${JLN_SYMBOLS}" CACHE STRING "Produce debugging information in the operating system's.\n - hidden: Use `-fvisibility=hidden` with Clang, GCC and other compilers that support this flag.\n - strip_all: Strip all symbols.\n - gc_sections: Enable garbage collection of unused sections.\n - nodebug: Request no debugging information.\n - debug: Request debugging information. How much information can be controlled with options `minimal_debug` and `full_debug`.\n - minimal_debug: If possible, produces information for tracebacks only. This includes descriptions of functions and external variables, and line number tables, but no information about local variables. If the level is not supported by a compiler, this is equivalent to the `debug` option.\n - full_debug: If possible, includes extra information, such as all the macro definitions present in the program.\n - btf: GCC only. Request BTF debug information. BTF is the default debugging format for the eBPF  target.\n - codeview: GCC only. Code View debug format (used by Microsoft Visual C++ on Windows).\n - ctf: GCC only. Produce a CTF debug information. The default level is 2.\n - ctf1: Level 1 produces CTF information for tracebacks only. This includes callsite information, but does not include type information.\n - ctf2: Level 2 produces type information for entities (functions, data objects etc.)  at file-scope or global-scope only.\n - vms: GCC only. Alpha/VMS debug format (used by DEBUG on Alpha/VMS systems).The default level is 2.\n - vms1: Same as `minimal_debug`, but for Alpha/VMS.\n - vms2: Same as `debug`, but for Alpha/VMS.\n - vms3: Same as `full_debug`, but for Alpha/VMS.\n - dbx: Clang only.\n - lldb: Clang only.\n - sce: Clang only.\n - dwarf: Clang-cl only")
set_property(CACHE JLN_SYMBOLS PROPERTY STRINGS "default" "hidden" "strip_all" "gc_sections" "nodebug" "debug" "minimal_debug" "full_debug" "btf" "codeview" "ctf" "ctf1" "ctf2" "vms" "vms1" "vms2" "vms3" "dbx" "lldb" "sce" "dwarf")
if(NOT("${JLN_SYMBOLS}" STREQUAL ""))
  string(TOLOWER "${JLN_SYMBOLS}" JLN_SYMBOLS)
  if(NOT(("default" STREQUAL JLN_SYMBOLS) OR ("hidden" STREQUAL JLN_SYMBOLS) OR ("strip_all" STREQUAL JLN_SYMBOLS) OR ("gc_sections" STREQUAL JLN_SYMBOLS) OR ("nodebug" STREQUAL JLN_SYMBOLS) OR ("debug" STREQUAL JLN_SYMBOLS) OR ("minimal_debug" STREQUAL JLN_SYMBOLS) OR ("full_debug" STREQUAL JLN_SYMBOLS) OR ("btf" STREQUAL JLN_SYMBOLS) OR ("codeview" STREQUAL JLN_SYMBOLS) OR ("ctf" STREQUAL JLN_SYMBOLS) OR ("ctf1" STREQUAL JLN_SYMBOLS) OR ("ctf2" STREQUAL JLN_SYMBOLS) OR ("vms" STREQUAL JLN_SYMBOLS) OR ("vms1" STREQUAL JLN_SYMBOLS) OR ("vms2" STREQUAL JLN_SYMBOLS) OR ("vms3" STREQUAL JLN_SYMBOLS) OR ("dbx" STREQUAL JLN_SYMBOLS) OR ("lldb" STREQUAL JLN_SYMBOLS) OR ("sce" STREQUAL JLN_SYMBOLS) OR ("dwarf" STREQUAL JLN_SYMBOLS)))
    message(FATAL_ERROR "Unknow value \"${JLN_SYMBOLS}\" for JLN_SYMBOLS, expected: default, hidden, strip_all, gc_sections, nodebug, debug, minimal_debug, full_debug, btf, codeview, ctf, ctf1, ctf2, vms, vms1, vms2, vms3, dbx, lldb, sce, dwarf")
  endif()
endif()
set(JLN_UNSAFE_BUFFER_USAGE_WARNINGS "${JLN_UNSAFE_BUFFER_USAGE_WARNINGS}" CACHE STRING "Enable `-Wunsafe-buffer-usage` with Clang (https://clang.llvm.org/docs/SafeBuffers.html).")
set_property(CACHE JLN_UNSAFE_BUFFER_USAGE_WARNINGS PROPERTY STRINGS "default" "on" "off")
if(NOT("${JLN_UNSAFE_BUFFER_USAGE_WARNINGS}" STREQUAL ""))
  string(TOLOWER "${JLN_UNSAFE_BUFFER_USAGE_WARNINGS}" JLN_UNSAFE_BUFFER_USAGE_WARNINGS)
  if(NOT(("default" STREQUAL JLN_UNSAFE_BUFFER_USAGE_WARNINGS) OR ("on" STREQUAL JLN_UNSAFE_BUFFER_USAGE_WARNINGS) OR ("off" STREQUAL JLN_UNSAFE_BUFFER_USAGE_WARNINGS)))
    message(FATAL_ERROR "Unknow value \"${JLN_UNSAFE_BUFFER_USAGE_WARNINGS}\" for JLN_UNSAFE_BUFFER_USAGE_WARNINGS, expected: default, on, off")
  endif()
endif()
set(JLN_VAR_INIT "${JLN_VAR_INIT}" CACHE STRING "Initialize all stack variables implicitly, including padding.\n - uninitialized: Doesn't initialize any automatic variables (default behavior of Clang and GCC).\n - pattern: Initialize automatic variables with byte-repeatable pattern (0xFE for GCC, 0xAA for Clang).\n - zero: zero Initialize automatic variables with zeroes.")
set_property(CACHE JLN_VAR_INIT PROPERTY STRINGS "default" "uninitialized" "pattern" "zero")
if(NOT("${JLN_VAR_INIT}" STREQUAL ""))
  string(TOLOWER "${JLN_VAR_INIT}" JLN_VAR_INIT)
  if(NOT(("default" STREQUAL JLN_VAR_INIT) OR ("uninitialized" STREQUAL JLN_VAR_INIT) OR ("pattern" STREQUAL JLN_VAR_INIT) OR ("zero" STREQUAL JLN_VAR_INIT)))
    message(FATAL_ERROR "Unknow value \"${JLN_VAR_INIT}\" for JLN_VAR_INIT, expected: default, uninitialized, pattern, zero")
  endif()
endif()
set(JLN_WARNINGS "${JLN_WARNINGS}" CACHE STRING "Warning level.\n - on: Activates essential warnings and extras.\n - essential: Activates essential warnings, typically `-Wall -Wextra` or `/W4`).\n - extensive: Activates essential warnings, extras and some that may raise false positives")
set_property(CACHE JLN_WARNINGS PROPERTY STRINGS "default" "off" "on" "essential" "extensive")
if(NOT("${JLN_WARNINGS}" STREQUAL ""))
  string(TOLOWER "${JLN_WARNINGS}" JLN_WARNINGS)
  if(NOT(("default" STREQUAL JLN_WARNINGS) OR ("off" STREQUAL JLN_WARNINGS) OR ("on" STREQUAL JLN_WARNINGS) OR ("essential" STREQUAL JLN_WARNINGS) OR ("extensive" STREQUAL JLN_WARNINGS)))
    message(FATAL_ERROR "Unknow value \"${JLN_WARNINGS}\" for JLN_WARNINGS, expected: default, off, on, essential, extensive")
  endif()
endif()
set(JLN_WARNINGS_AS_ERROR "${JLN_WARNINGS_AS_ERROR}" CACHE STRING "Make all or some warnings into errors.")
set_property(CACHE JLN_WARNINGS_AS_ERROR PROPERTY STRINGS "default" "off" "on" "basic")
if(NOT("${JLN_WARNINGS_AS_ERROR}" STREQUAL ""))
  string(TOLOWER "${JLN_WARNINGS_AS_ERROR}" JLN_WARNINGS_AS_ERROR)
  if(NOT(("default" STREQUAL JLN_WARNINGS_AS_ERROR) OR ("off" STREQUAL JLN_WARNINGS_AS_ERROR) OR ("on" STREQUAL JLN_WARNINGS_AS_ERROR) OR ("basic" STREQUAL JLN_WARNINGS_AS_ERROR)))
    message(FATAL_ERROR "Unknow value \"${JLN_WARNINGS_AS_ERROR}\" for JLN_WARNINGS_AS_ERROR, expected: default, off, on, basic")
  endif()
endif()
set(JLN_WINDOWS_BIGOBJ "${JLN_WINDOWS_BIGOBJ}" CACHE STRING "Increases that addressable sections capacity.")
set_property(CACHE JLN_WINDOWS_BIGOBJ PROPERTY STRINGS "default" "on")
if(NOT("${JLN_WINDOWS_BIGOBJ}" STREQUAL ""))
  string(TOLOWER "${JLN_WINDOWS_BIGOBJ}" JLN_WINDOWS_BIGOBJ)
  if(NOT(("default" STREQUAL JLN_WINDOWS_BIGOBJ) OR ("on" STREQUAL JLN_WINDOWS_BIGOBJ)))
    message(FATAL_ERROR "Unknow value \"${JLN_WINDOWS_BIGOBJ}\" for JLN_WINDOWS_BIGOBJ, expected: default, on")
  endif()
endif()
set(JLN_VERBOSE ${JLN_VERBOSE} CACHE STRING "")
set(JLN_AUTO_PROFILE ${JLN_AUTO_PROFILE} CACHE STRING "")
if("${CMAKE_BUILD_TYPE}" STREQUAL "")
  set(_JLN_BUILD_TYPE "Debug")
  set(_JLN_BUILD_TYPE_PARSER "Debug")
else()
  set(_JLN_BUILD_TYPE ${CMAKE_BUILD_TYPE})
  string(TOLOWER ${CMAKE_BUILD_TYPE} _JLN_BUILD_TYPE_PARSER)
endif()

function(jln_c_parse_arguments prefix one_value_keywords)
  if(${ARGC} LESS 3)
    return()
  endif()

  set(SAME_BUILD_TYPE 1)
  foreach(ival RANGE 3 ${ARGC} 2)
    math(EXPR i ${ival}-1)
    set(name ${ARGV${i}})
    if(${name} STREQUAL "BUILD_TYPE")
      string(TOLOWER "${ARGV${ival}}" type)
      if(${_JLN_BUILD_TYPE_PARSER} STREQUAL "${type}")
        set(SAME_BUILD_TYPE 1)
      else()
        set(SAME_BUILD_TYPE 0)
      endif()
    else()
      list(FIND one_value_keywords "${name}" INDEX)
      if(${INDEX} EQUAL -1)
        message(FATAL_ERROR "Unknown '${name}' parameter")
      endif()

      set(value "${ARGV${ival}}")
      string(TOLOWER "${value}" lowercase_value)
      list(FIND _JLN_${name}_VALUES "${lowercase_value}" INDEX)
      if(${INDEX} EQUAL -1)
        if(${name} STREQUAL "C_VAR" OR ${name} STREQUAL "LINK_VAR")
          if(SAME_BUILD_TYPE)
            set("${prefix}_${name}" ${value} PARENT_SCOPE)
          endif()
        else()
          list(JOIN _JLN_${name}_VALUES ", " values)
          message(FATAL_ERROR "Parameter '${name}': Unknown '${value}', expected: ${values}")
        endif()
      elseif(SAME_BUILD_TYPE)
        set("${prefix}_${name}" ${lowercase_value} PARENT_SCOPE)
      endif()
    endif()
  endforeach()
endfunction()

set(JLN_C_IS_INITIALIZED 0 CACHE BOOL "private" FORCE)


# init default values
# jln_c_init_flags(
#     [jln_c-option> <default_value>]...
#     [AUTO_PROFILE on]
#     [VERBOSE on]
#     [BUILD_TYPE type [jln_c-option> <default_value>]...]...
# )
# AUTO_PROFILE: enables options based on CMAKE_BUILD_TYPE (assumes "Debug" if CMAKE_BUILD_TYPE is empty)
# BUILD_TYPE: enables following options only if ${CMAKE_BUILD_TYPE} has the same value (CMAKE_BUILD_TYPE assumed to Debug if empty)
# Example:
#   jln_c_init_flags(
#       SUGGESTIONS on
#
#       BUILD_TYPE debug SANITIZERS on
#       BUILD_TYPE release LTO on
#   )
function(jln_c_init_flags)
  jln_c_parse_arguments(JLN_DEFAULT_FLAG "VERBOSE;ANALYZER;ANALYZER_TOO_COMPLEX_WARNING;ANALYZER_VERBOSITY;COLOR;CONVERSION_WARNINGS;COVERAGE;COVERED_SWITCH_DEFAULT_WARNINGS;CPU;DIAGNOSTICS_FORMAT;EMCC_DEBUG;EXCEPTIONS;HARDENED;LINKER;LTO;MSVC_CRT_SECURE_NO_WARNINGS;MSVC_DIAGNOSTICS_FORMAT;MSVC_ISYSTEM;NDEBUG;OPTIMIZATION;PEDANTIC;REPRODUCIBLE_BUILD_WARNINGS;SANITIZERS;SHADOW_WARNINGS;STL_FIX;SUGGEST_ATTRIBUTES;SWITCH_WARNINGS;SYMBOLS;UNSAFE_BUFFER_USAGE_WARNINGS;VAR_INIT;WARNINGS;WARNINGS_AS_ERROR;WINDOWS_BIGOBJ;AUTO_PROFILE" ${ARGN})

  if(DEFINED JLN_DEFAULT_FLAG_VERBOSE)
    set(JLN_VERBOSE_D ${JLN_DEFAULT_FLAG_VERBOSE})
  elseif("${JLN_VERBOSE}" STREQUAL "")
    set(JLN_VERBOSE_D "")
  else()
    string(TOLOWER "${JLN_VERBOSE}" JLN_VERBOSE_D)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_AUTO_PROFILE)
    set(JLN_AUTO_PROFILE_D ${JLN_DEFAULT_FLAG_AUTO_PROFILE})
  elseif("${JLN_AUTO_PROFILE}" STREQUAL "")
    set(JLN_AUTO_PROFILE_D "")
  else()
    string(TOLOWER "${JLN_AUTO_PROFILE}" JLN_AUTO_PROFILE_D)
  endif()

  if("${JLN_AUTO_PROFILE_D}" STREQUAL "on")

    if("Debug" STREQUAL "${_JLN_BUILD_TYPE}")
      if(NOT DEFINED JLN_DEFAULT_FLAG_EMCC_DEBUG)
        set(JLN_DEFAULT_FLAG_EMCC_DEBUG "on")
      endif()
      if(NOT DEFINED JLN_DEFAULT_FLAG_SANITIZERS)
        set(JLN_DEFAULT_FLAG_SANITIZERS "on")
      endif()
      if(NOT DEFINED JLN_DEFAULT_FLAG_STL_HARDENING)
        set(JLN_DEFAULT_FLAG_STL_HARDENING "debug")
      endif()
      if(NOT DEFINED JLN_DEFAULT_FLAG_SYMBOLS)
        set(JLN_DEFAULT_FLAG_SYMBOLS "debug")
      endif()
    endif()

    if("RelWithDebInfo" STREQUAL "${_JLN_BUILD_TYPE}")
      if(NOT DEFINED JLN_DEFAULT_FLAG_OPTIMIZATION)
        set(JLN_DEFAULT_FLAG_OPTIMIZATION "g")
      endif()
      if(NOT DEFINED JLN_DEFAULT_FLAG_SYMBOLS)
        set(JLN_DEFAULT_FLAG_SYMBOLS "debug")
      endif()
    endif()

    if("MinSizeRel" STREQUAL "${_JLN_BUILD_TYPE}")
      if(NOT DEFINED JLN_DEFAULT_FLAG_LTO)
        set(JLN_DEFAULT_FLAG_LTO "on")
      endif()
      if(NOT DEFINED JLN_DEFAULT_FLAG_OPTIMIZATION)
        set(JLN_DEFAULT_FLAG_OPTIMIZATION "size")
      endif()
    endif()

    if("Release" STREQUAL "${_JLN_BUILD_TYPE}")
      if(NOT DEFINED JLN_DEFAULT_FLAG_LTO)
        set(JLN_DEFAULT_FLAG_LTO "on")
      endif()
      if(NOT DEFINED JLN_DEFAULT_FLAG_OPTIMIZATION)
        set(JLN_DEFAULT_FLAG_OPTIMIZATION "3")
      endif()
    endif()
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_ANALYZER)
    set(JLN_ANALYZER_D ${JLN_DEFAULT_FLAG_ANALYZER} CACHE STRING "private" FORCE)
  elseif("${JLN_ANALYZER}" STREQUAL "")
    set(JLN_ANALYZER_D "default" CACHE STRING "private" FORCE)
  else()
    set(JLN_ANALYZER_D "${JLN_ANALYZER}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_ANALYZER_TOO_COMPLEX_WARNING)
    set(JLN_ANALYZER_TOO_COMPLEX_WARNING_D ${JLN_DEFAULT_FLAG_ANALYZER_TOO_COMPLEX_WARNING} CACHE STRING "private" FORCE)
  elseif("${JLN_ANALYZER_TOO_COMPLEX_WARNING}" STREQUAL "")
    set(JLN_ANALYZER_TOO_COMPLEX_WARNING_D "default" CACHE STRING "private" FORCE)
  else()
    set(JLN_ANALYZER_TOO_COMPLEX_WARNING_D "${JLN_ANALYZER_TOO_COMPLEX_WARNING}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_ANALYZER_VERBOSITY)
    set(JLN_ANALYZER_VERBOSITY_D ${JLN_DEFAULT_FLAG_ANALYZER_VERBOSITY} CACHE STRING "private" FORCE)
  elseif("${JLN_ANALYZER_VERBOSITY}" STREQUAL "")
    set(JLN_ANALYZER_VERBOSITY_D "default" CACHE STRING "private" FORCE)
  else()
    set(JLN_ANALYZER_VERBOSITY_D "${JLN_ANALYZER_VERBOSITY}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_COLOR)
    set(JLN_COLOR_D ${JLN_DEFAULT_FLAG_COLOR} CACHE STRING "private" FORCE)
  elseif("${JLN_COLOR}" STREQUAL "")
    set(JLN_COLOR_D "default" CACHE STRING "private" FORCE)
  else()
    set(JLN_COLOR_D "${JLN_COLOR}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_CONVERSION_WARNINGS)
    set(JLN_CONVERSION_WARNINGS_D ${JLN_DEFAULT_FLAG_CONVERSION_WARNINGS} CACHE STRING "private" FORCE)
  elseif("${JLN_CONVERSION_WARNINGS}" STREQUAL "")
    set(JLN_CONVERSION_WARNINGS_D "on" CACHE STRING "private" FORCE)
  else()
    set(JLN_CONVERSION_WARNINGS_D "${JLN_CONVERSION_WARNINGS}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_COVERAGE)
    set(JLN_COVERAGE_D ${JLN_DEFAULT_FLAG_COVERAGE} CACHE STRING "private" FORCE)
  elseif("${JLN_COVERAGE}" STREQUAL "")
    set(JLN_COVERAGE_D "default" CACHE STRING "private" FORCE)
  else()
    set(JLN_COVERAGE_D "${JLN_COVERAGE}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_COVERED_SWITCH_DEFAULT_WARNINGS)
    set(JLN_COVERED_SWITCH_DEFAULT_WARNINGS_D ${JLN_DEFAULT_FLAG_COVERED_SWITCH_DEFAULT_WARNINGS} CACHE STRING "private" FORCE)
  elseif("${JLN_COVERED_SWITCH_DEFAULT_WARNINGS}" STREQUAL "")
    set(JLN_COVERED_SWITCH_DEFAULT_WARNINGS_D "on" CACHE STRING "private" FORCE)
  else()
    set(JLN_COVERED_SWITCH_DEFAULT_WARNINGS_D "${JLN_COVERED_SWITCH_DEFAULT_WARNINGS}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_CPU)
    set(JLN_CPU_D ${JLN_DEFAULT_FLAG_CPU} CACHE STRING "private" FORCE)
  elseif("${JLN_CPU}" STREQUAL "")
    set(JLN_CPU_D "default" CACHE STRING "private" FORCE)
  else()
    set(JLN_CPU_D "${JLN_CPU}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_DIAGNOSTICS_FORMAT)
    set(JLN_DIAGNOSTICS_FORMAT_D ${JLN_DEFAULT_FLAG_DIAGNOSTICS_FORMAT} CACHE STRING "private" FORCE)
  elseif("${JLN_DIAGNOSTICS_FORMAT}" STREQUAL "")
    set(JLN_DIAGNOSTICS_FORMAT_D "default" CACHE STRING "private" FORCE)
  else()
    set(JLN_DIAGNOSTICS_FORMAT_D "${JLN_DIAGNOSTICS_FORMAT}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_EMCC_DEBUG)
    set(JLN_EMCC_DEBUG_D ${JLN_DEFAULT_FLAG_EMCC_DEBUG} CACHE STRING "private" FORCE)
  elseif("${JLN_EMCC_DEBUG}" STREQUAL "")
    set(JLN_EMCC_DEBUG_D "default" CACHE STRING "private" FORCE)
  else()
    set(JLN_EMCC_DEBUG_D "${JLN_EMCC_DEBUG}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_EXCEPTIONS)
    set(JLN_EXCEPTIONS_D ${JLN_DEFAULT_FLAG_EXCEPTIONS} CACHE STRING "private" FORCE)
  elseif("${JLN_EXCEPTIONS}" STREQUAL "")
    set(JLN_EXCEPTIONS_D "default" CACHE STRING "private" FORCE)
  else()
    set(JLN_EXCEPTIONS_D "${JLN_EXCEPTIONS}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_HARDENED)
    set(JLN_HARDENED_D ${JLN_DEFAULT_FLAG_HARDENED} CACHE STRING "private" FORCE)
  elseif("${JLN_HARDENED}" STREQUAL "")
    set(JLN_HARDENED_D "default" CACHE STRING "private" FORCE)
  else()
    set(JLN_HARDENED_D "${JLN_HARDENED}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_LINKER)
    set(JLN_LINKER_D ${JLN_DEFAULT_FLAG_LINKER} CACHE STRING "private" FORCE)
  elseif("${JLN_LINKER}" STREQUAL "")
    set(JLN_LINKER_D "default" CACHE STRING "private" FORCE)
  else()
    set(JLN_LINKER_D "${JLN_LINKER}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_LTO)
    set(JLN_LTO_D ${JLN_DEFAULT_FLAG_LTO} CACHE STRING "private" FORCE)
  elseif("${JLN_LTO}" STREQUAL "")
    set(JLN_LTO_D "default" CACHE STRING "private" FORCE)
  else()
    set(JLN_LTO_D "${JLN_LTO}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_MSVC_CRT_SECURE_NO_WARNINGS)
    set(JLN_MSVC_CRT_SECURE_NO_WARNINGS_D ${JLN_DEFAULT_FLAG_MSVC_CRT_SECURE_NO_WARNINGS} CACHE STRING "private" FORCE)
  elseif("${JLN_MSVC_CRT_SECURE_NO_WARNINGS}" STREQUAL "")
    set(JLN_MSVC_CRT_SECURE_NO_WARNINGS_D "on" CACHE STRING "private" FORCE)
  else()
    set(JLN_MSVC_CRT_SECURE_NO_WARNINGS_D "${JLN_MSVC_CRT_SECURE_NO_WARNINGS}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_MSVC_DIAGNOSTICS_FORMAT)
    set(JLN_MSVC_DIAGNOSTICS_FORMAT_D ${JLN_DEFAULT_FLAG_MSVC_DIAGNOSTICS_FORMAT} CACHE STRING "private" FORCE)
  elseif("${JLN_MSVC_DIAGNOSTICS_FORMAT}" STREQUAL "")
    set(JLN_MSVC_DIAGNOSTICS_FORMAT_D "caret" CACHE STRING "private" FORCE)
  else()
    set(JLN_MSVC_DIAGNOSTICS_FORMAT_D "${JLN_MSVC_DIAGNOSTICS_FORMAT}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_MSVC_ISYSTEM)
    set(JLN_MSVC_ISYSTEM_D ${JLN_DEFAULT_FLAG_MSVC_ISYSTEM} CACHE STRING "private" FORCE)
  elseif("${JLN_MSVC_ISYSTEM}" STREQUAL "")
    set(JLN_MSVC_ISYSTEM_D "default" CACHE STRING "private" FORCE)
  else()
    set(JLN_MSVC_ISYSTEM_D "${JLN_MSVC_ISYSTEM}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_NDEBUG)
    set(JLN_NDEBUG_D ${JLN_DEFAULT_FLAG_NDEBUG} CACHE STRING "private" FORCE)
  elseif("${JLN_NDEBUG}" STREQUAL "")
    set(JLN_NDEBUG_D "with_optimization_1_or_above" CACHE STRING "private" FORCE)
  else()
    set(JLN_NDEBUG_D "${JLN_NDEBUG}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_OPTIMIZATION)
    set(JLN_OPTIMIZATION_D ${JLN_DEFAULT_FLAG_OPTIMIZATION} CACHE STRING "private" FORCE)
  elseif("${JLN_OPTIMIZATION}" STREQUAL "")
    set(JLN_OPTIMIZATION_D "default" CACHE STRING "private" FORCE)
  else()
    set(JLN_OPTIMIZATION_D "${JLN_OPTIMIZATION}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_PEDANTIC)
    set(JLN_PEDANTIC_D ${JLN_DEFAULT_FLAG_PEDANTIC} CACHE STRING "private" FORCE)
  elseif("${JLN_PEDANTIC}" STREQUAL "")
    set(JLN_PEDANTIC_D "on" CACHE STRING "private" FORCE)
  else()
    set(JLN_PEDANTIC_D "${JLN_PEDANTIC}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_REPRODUCIBLE_BUILD_WARNINGS)
    set(JLN_REPRODUCIBLE_BUILD_WARNINGS_D ${JLN_DEFAULT_FLAG_REPRODUCIBLE_BUILD_WARNINGS} CACHE STRING "private" FORCE)
  elseif("${JLN_REPRODUCIBLE_BUILD_WARNINGS}" STREQUAL "")
    set(JLN_REPRODUCIBLE_BUILD_WARNINGS_D "default" CACHE STRING "private" FORCE)
  else()
    set(JLN_REPRODUCIBLE_BUILD_WARNINGS_D "${JLN_REPRODUCIBLE_BUILD_WARNINGS}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_SANITIZERS)
    set(JLN_SANITIZERS_D ${JLN_DEFAULT_FLAG_SANITIZERS} CACHE STRING "private" FORCE)
  elseif("${JLN_SANITIZERS}" STREQUAL "")
    set(JLN_SANITIZERS_D "default" CACHE STRING "private" FORCE)
  else()
    set(JLN_SANITIZERS_D "${JLN_SANITIZERS}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_SHADOW_WARNINGS)
    set(JLN_SHADOW_WARNINGS_D ${JLN_DEFAULT_FLAG_SHADOW_WARNINGS} CACHE STRING "private" FORCE)
  elseif("${JLN_SHADOW_WARNINGS}" STREQUAL "")
    set(JLN_SHADOW_WARNINGS_D "off" CACHE STRING "private" FORCE)
  else()
    set(JLN_SHADOW_WARNINGS_D "${JLN_SHADOW_WARNINGS}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_STL_FIX)
    set(JLN_STL_FIX_D ${JLN_DEFAULT_FLAG_STL_FIX} CACHE STRING "private" FORCE)
  elseif("${JLN_STL_FIX}" STREQUAL "")
    set(JLN_STL_FIX_D "on" CACHE STRING "private" FORCE)
  else()
    set(JLN_STL_FIX_D "${JLN_STL_FIX}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_SUGGEST_ATTRIBUTES)
    set(JLN_SUGGEST_ATTRIBUTES_D ${JLN_DEFAULT_FLAG_SUGGEST_ATTRIBUTES} CACHE STRING "private" FORCE)
  elseif("${JLN_SUGGEST_ATTRIBUTES}" STREQUAL "")
    set(JLN_SUGGEST_ATTRIBUTES_D "on" CACHE STRING "private" FORCE)
  else()
    set(JLN_SUGGEST_ATTRIBUTES_D "${JLN_SUGGEST_ATTRIBUTES}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_SWITCH_WARNINGS)
    set(JLN_SWITCH_WARNINGS_D ${JLN_DEFAULT_FLAG_SWITCH_WARNINGS} CACHE STRING "private" FORCE)
  elseif("${JLN_SWITCH_WARNINGS}" STREQUAL "")
    set(JLN_SWITCH_WARNINGS_D "on" CACHE STRING "private" FORCE)
  else()
    set(JLN_SWITCH_WARNINGS_D "${JLN_SWITCH_WARNINGS}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_SYMBOLS)
    set(JLN_SYMBOLS_D ${JLN_DEFAULT_FLAG_SYMBOLS} CACHE STRING "private" FORCE)
  elseif("${JLN_SYMBOLS}" STREQUAL "")
    set(JLN_SYMBOLS_D "default" CACHE STRING "private" FORCE)
  else()
    set(JLN_SYMBOLS_D "${JLN_SYMBOLS}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_UNSAFE_BUFFER_USAGE_WARNINGS)
    set(JLN_UNSAFE_BUFFER_USAGE_WARNINGS_D ${JLN_DEFAULT_FLAG_UNSAFE_BUFFER_USAGE_WARNINGS} CACHE STRING "private" FORCE)
  elseif("${JLN_UNSAFE_BUFFER_USAGE_WARNINGS}" STREQUAL "")
    set(JLN_UNSAFE_BUFFER_USAGE_WARNINGS_D "default" CACHE STRING "private" FORCE)
  else()
    set(JLN_UNSAFE_BUFFER_USAGE_WARNINGS_D "${JLN_UNSAFE_BUFFER_USAGE_WARNINGS}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_VAR_INIT)
    set(JLN_VAR_INIT_D ${JLN_DEFAULT_FLAG_VAR_INIT} CACHE STRING "private" FORCE)
  elseif("${JLN_VAR_INIT}" STREQUAL "")
    set(JLN_VAR_INIT_D "default" CACHE STRING "private" FORCE)
  else()
    set(JLN_VAR_INIT_D "${JLN_VAR_INIT}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_WARNINGS)
    set(JLN_WARNINGS_D ${JLN_DEFAULT_FLAG_WARNINGS} CACHE STRING "private" FORCE)
  elseif("${JLN_WARNINGS}" STREQUAL "")
    set(JLN_WARNINGS_D "on" CACHE STRING "private" FORCE)
  else()
    set(JLN_WARNINGS_D "${JLN_WARNINGS}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_WARNINGS_AS_ERROR)
    set(JLN_WARNINGS_AS_ERROR_D ${JLN_DEFAULT_FLAG_WARNINGS_AS_ERROR} CACHE STRING "private" FORCE)
  elseif("${JLN_WARNINGS_AS_ERROR}" STREQUAL "")
    set(JLN_WARNINGS_AS_ERROR_D "default" CACHE STRING "private" FORCE)
  else()
    set(JLN_WARNINGS_AS_ERROR_D "${JLN_WARNINGS_AS_ERROR}" CACHE STRING "private" FORCE)
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_WINDOWS_BIGOBJ)
    set(JLN_WINDOWS_BIGOBJ_D ${JLN_DEFAULT_FLAG_WINDOWS_BIGOBJ} CACHE STRING "private" FORCE)
  elseif("${JLN_WINDOWS_BIGOBJ}" STREQUAL "")
    set(JLN_WINDOWS_BIGOBJ_D "on" CACHE STRING "private" FORCE)
  else()
    set(JLN_WINDOWS_BIGOBJ_D "${JLN_WINDOWS_BIGOBJ}" CACHE STRING "private" FORCE)
  endif()

  if("${JLN_VERBOSE_D}" STREQUAL "on" OR "${JLN_VERBOSE_D}" STREQUAL "1")
    message(STATUS "JLN_AUTO_PROFILE = ${JLN_AUTO_PROFILE_D}	[off, on]")
    message(STATUS "JLN_ANALYZER = ${JLN_ANALYZER_D}	[default, off, on, with_external_headers]")
    message(STATUS "JLN_ANALYZER_TOO_COMPLEX_WARNING = ${JLN_ANALYZER_TOO_COMPLEX_WARNING_D}	[default, off, on]")
    message(STATUS "JLN_ANALYZER_VERBOSITY = ${JLN_ANALYZER_VERBOSITY_D}	[default, 0, 1, 2, 3]")
    message(STATUS "JLN_COLOR = ${JLN_COLOR_D}	[default, auto, never, always]")
    message(STATUS "JLN_CONVERSION_WARNINGS = ${JLN_CONVERSION_WARNINGS_D}	[default, off, on, sign, float, conversion, all]")
    message(STATUS "JLN_COVERAGE = ${JLN_COVERAGE_D}	[default, off, on]")
    message(STATUS "JLN_COVERED_SWITCH_DEFAULT_WARNINGS = ${JLN_COVERED_SWITCH_DEFAULT_WARNINGS_D}	[default, on, off]")
    message(STATUS "JLN_CPU = ${JLN_CPU_D}	[default, generic, native]")
    message(STATUS "JLN_DIAGNOSTICS_FORMAT = ${JLN_DIAGNOSTICS_FORMAT_D}	[default, fixits, patch, print_source_range_info]")
    message(STATUS "JLN_EMCC_DEBUG = ${JLN_EMCC_DEBUG_D}	[default, off, on, slow]")
    message(STATUS "JLN_EXCEPTIONS = ${JLN_EXCEPTIONS_D}	[default, off, on]")
    message(STATUS "JLN_HARDENED = ${JLN_HARDENED_D}	[default, off, on, all]")
    message(STATUS "JLN_LINKER = ${JLN_LINKER_D}	[default, bfd, gold, lld, mold, native]")
    message(STATUS "JLN_LTO = ${JLN_LTO_D}	[default, off, on, full, thin_or_nothing, whole_program, whole_program_and_full_lto]")
    message(STATUS "JLN_MSVC_CRT_SECURE_NO_WARNINGS = ${JLN_MSVC_CRT_SECURE_NO_WARNINGS_D}	[default, off, on]")
    message(STATUS "JLN_MSVC_DIAGNOSTICS_FORMAT = ${JLN_MSVC_DIAGNOSTICS_FORMAT_D}	[default, classic, column, caret]")
    message(STATUS "JLN_MSVC_ISYSTEM = ${JLN_MSVC_ISYSTEM_D}	[default, anglebrackets, include_and_caexcludepath, external_as_include_system_flag, assumed]")
    message(STATUS "JLN_NDEBUG = ${JLN_NDEBUG_D}	[default, off, on, with_optimization_1_or_above]")
    message(STATUS "JLN_OPTIMIZATION = ${JLN_OPTIMIZATION_D}	[default, 0, g, 1, 2, 3, fast, size, z]")
    message(STATUS "JLN_PEDANTIC = ${JLN_PEDANTIC_D}	[default, off, on, as_error]")
    message(STATUS "JLN_REPRODUCIBLE_BUILD_WARNINGS = ${JLN_REPRODUCIBLE_BUILD_WARNINGS_D}	[default, off, on]")
    message(STATUS "JLN_SANITIZERS = ${JLN_SANITIZERS_D}	[default, off, on, with_minimal_code_size, extra, extra_with_minimal_code_size, address, address_with_minimal_code_size, thread, undefined, undefined_minimal_runtime, scudo_hardened_allocator]")
    message(STATUS "JLN_SHADOW_WARNINGS = ${JLN_SHADOW_WARNINGS_D}	[default, off, on, local, compatible_local, all]")
    message(STATUS "JLN_STL_FIX = ${JLN_STL_FIX_D}	[default, off, on]")
    message(STATUS "JLN_SUGGEST_ATTRIBUTES = ${JLN_SUGGEST_ATTRIBUTES_D}	[default, off, on, common, analysis, unity, all]")
    message(STATUS "JLN_SWITCH_WARNINGS = ${JLN_SWITCH_WARNINGS_D}	[default, on, off, exhaustive_enum, mandatory_default, exhaustive_enum_and_mandatory_default]")
    message(STATUS "JLN_SYMBOLS = ${JLN_SYMBOLS_D}	[default, hidden, strip_all, gc_sections, nodebug, debug, minimal_debug, full_debug, btf, codeview, ctf, ctf1, ctf2, vms, vms1, vms2, vms3, dbx, lldb, sce, dwarf]")
    message(STATUS "JLN_UNSAFE_BUFFER_USAGE_WARNINGS = ${JLN_UNSAFE_BUFFER_USAGE_WARNINGS_D}	[default, on, off]")
    message(STATUS "JLN_VAR_INIT = ${JLN_VAR_INIT_D}	[default, uninitialized, pattern, zero]")
    message(STATUS "JLN_WARNINGS = ${JLN_WARNINGS_D}	[default, off, on, essential, extensive]")
    message(STATUS "JLN_WARNINGS_AS_ERROR = ${JLN_WARNINGS_AS_ERROR_D}	[default, off, on, basic]")
    message(STATUS "JLN_WINDOWS_BIGOBJ = ${JLN_WINDOWS_BIGOBJ_D}	[default, on]")
  endif()

  set(JLN_C_IS_INITIALIZED 1 CACHE BOOL "private" FORCE)

endfunction()

set(JLN_C_COMPILER_VERSION ${CMAKE_C_COMPILER_VERSION})

if(CMAKE_C_COMPILER_ID MATCHES "GNU")
  set(JLN_GCC_C_COMPILER 1)
elseif(CMAKE_C_COMPILER_ID MATCHES "Clang")
  if (CMAKE_SYSTEM_NAME MATCHES Emscripten)
    set(JLN_CLANG_LIKE_COMPILER 1)
    set(JLN_CLANG_EMCC_C_COMPILER 1)
  elseif(CMAKE_C_COMPILER_FRONTEND_VARIANT MATCHES "MSVC")
    set(JLN_CLANG_LIKE_COMPILER 0)
    set(JLN_CLANG_CL_C_COMPILER 1)
  else()
    set(JLN_CLANG_LIKE_COMPILER 1)
    set(JLN_CLANG_C_COMPILER 1)
  endif()
# icx / icpx, dpcpp
elseif(CMAKE_C_COMPILER_ID MATCHES "IntelLLVM")
  set(JLN_CLANG_LIKE_COMPILER 1)
  set(JLN_ICX_C_COMPILER 1)
  set(JLN_CLANG_C_COMPILER 1)
  # extract clang version (dpcpp requires a valid c++ file)
  file(WRITE "${CMAKE_BINARY_DIR}/jln_null.cpp"
             "int vers = __clang_major__ - __clang_minor__;")
  execute_process(
    COMMAND ${CMAKE_C_COMPILER} "${CMAKE_BINARY_DIR}/jln_null.cpp" -E
    OUTPUT_VARIABLE JLN_ICX_MACROS_OUTPUT
  )
  file(REMOVE "${CMAKE_BINARY_DIR}/jln_null.cpp")
  string(REGEX MATCH "\nint vers = ([0-9]+) - ([0-9]+)"
         JLN_ICX_MACROS_OUTPUT "${JLN_ICX_MACROS_OUTPUT}")
  set(JLN_C_COMPILER_VERSION "${CMAKE_MATCH_1}.${CMAKE_MATCH_2}.${CMAKE_MATCH_3}")
# icc / icl
elseif(CMAKE_C_COMPILER_ID MATCHES "Intel")
  if (CMAKE_HOST_WIN32)
    set(JLN_ICL_C_COMPILER 1)
  else()
    set(JLN_ICC_C_COMPILER 1)
  endif()
endif()

if(CMAKE_HOST_APPLE)
  set(JLN_LD64_C_LINKER 1)
endif()
    
# jln_c_target_interface(
#     <libname> {INTERFACE|PUBLIC|PRIVATE}
#     [<jln_c-option> <value>]...
#     [DISABLE_OTHERS {on|off}]
#     [BUILD_TYPE type [jln_c-option> <value>]...]...
# )
# BUILD_TYPE: enables following options only if ${CMAKE_BUILD_TYPE} has the same value (CMAKE_BUILD_TYPE assumed to Debug if empty)
function(jln_c_target_interface name type)
  jln_c_flags(C_VAR cxx LINK_VAR link ${ARGN})
  add_library(${name} ${type})
  target_link_options(${name} ${type} ${link})
  target_compile_options(${name} ${type} ${cxx})
endfunction()

# jln_c_flags(
#     C_VAR <out-variable>
#     LINK_VAR <out-variable>
#     [<jln_c-option> <value>]...
#     [DISABLE_OTHERS {on|off}]
#     [BUILD_TYPE type [jln_c-option> <value>]...]...
# )
# BUILD_TYPE: enables following options only if ${CMAKE_BUILD_TYPE} has the same value (CMAKE_BUILD_TYPE assumed to Debug if empty)
function(jln_c_flags)
  if(NOT JLN_C_IS_INITIALIZED)
    jln_c_init_flags()
  endif()
  set(CXX_FLAGS "")
  set(LINK_LINK "")
  jln_c_parse_arguments(JLN_FLAGS "DISABLE_OTHERS;C_VAR;LINK_VAR;ANALYZER;ANALYZER_TOO_COMPLEX_WARNING;ANALYZER_VERBOSITY;COLOR;CONVERSION_WARNINGS;COVERAGE;COVERED_SWITCH_DEFAULT_WARNINGS;CPU;DIAGNOSTICS_FORMAT;EMCC_DEBUG;EXCEPTIONS;HARDENED;LINKER;LTO;MSVC_CRT_SECURE_NO_WARNINGS;MSVC_DIAGNOSTICS_FORMAT;MSVC_ISYSTEM;NDEBUG;OPTIMIZATION;PEDANTIC;REPRODUCIBLE_BUILD_WARNINGS;SANITIZERS;SHADOW_WARNINGS;STL_FIX;SUGGEST_ATTRIBUTES;SWITCH_WARNINGS;SYMBOLS;UNSAFE_BUFFER_USAGE_WARNINGS;VAR_INIT;WARNINGS;WARNINGS_AS_ERROR;WINDOWS_BIGOBJ" ${ARGN})

  if(NOT DEFINED JLN_FLAGS_ANALYZER)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_ANALYZER "default")
    else()
      set(JLN_FLAGS_ANALYZER "${JLN_ANALYZER_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_ANALYZER_TOO_COMPLEX_WARNING)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_ANALYZER_TOO_COMPLEX_WARNING "default")
    else()
      set(JLN_FLAGS_ANALYZER_TOO_COMPLEX_WARNING "${JLN_ANALYZER_TOO_COMPLEX_WARNING_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_ANALYZER_VERBOSITY)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_ANALYZER_VERBOSITY "default")
    else()
      set(JLN_FLAGS_ANALYZER_VERBOSITY "${JLN_ANALYZER_VERBOSITY_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_COLOR)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_COLOR "default")
    else()
      set(JLN_FLAGS_COLOR "${JLN_COLOR_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_CONVERSION_WARNINGS)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_CONVERSION_WARNINGS "on")
    else()
      set(JLN_FLAGS_CONVERSION_WARNINGS "${JLN_CONVERSION_WARNINGS_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_COVERAGE)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_COVERAGE "default")
    else()
      set(JLN_FLAGS_COVERAGE "${JLN_COVERAGE_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_COVERED_SWITCH_DEFAULT_WARNINGS)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_COVERED_SWITCH_DEFAULT_WARNINGS "on")
    else()
      set(JLN_FLAGS_COVERED_SWITCH_DEFAULT_WARNINGS "${JLN_COVERED_SWITCH_DEFAULT_WARNINGS_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_CPU)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_CPU "default")
    else()
      set(JLN_FLAGS_CPU "${JLN_CPU_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_DIAGNOSTICS_FORMAT)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_DIAGNOSTICS_FORMAT "default")
    else()
      set(JLN_FLAGS_DIAGNOSTICS_FORMAT "${JLN_DIAGNOSTICS_FORMAT_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_EMCC_DEBUG)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_EMCC_DEBUG "default")
    else()
      set(JLN_FLAGS_EMCC_DEBUG "${JLN_EMCC_DEBUG_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_EXCEPTIONS)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_EXCEPTIONS "default")
    else()
      set(JLN_FLAGS_EXCEPTIONS "${JLN_EXCEPTIONS_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_HARDENED)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_HARDENED "default")
    else()
      set(JLN_FLAGS_HARDENED "${JLN_HARDENED_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_LINKER)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_LINKER "default")
    else()
      set(JLN_FLAGS_LINKER "${JLN_LINKER_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_LTO)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_LTO "default")
    else()
      set(JLN_FLAGS_LTO "${JLN_LTO_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_MSVC_CRT_SECURE_NO_WARNINGS)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_MSVC_CRT_SECURE_NO_WARNINGS "on")
    else()
      set(JLN_FLAGS_MSVC_CRT_SECURE_NO_WARNINGS "${JLN_MSVC_CRT_SECURE_NO_WARNINGS_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_MSVC_DIAGNOSTICS_FORMAT)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_MSVC_DIAGNOSTICS_FORMAT "caret")
    else()
      set(JLN_FLAGS_MSVC_DIAGNOSTICS_FORMAT "${JLN_MSVC_DIAGNOSTICS_FORMAT_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_MSVC_ISYSTEM)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_MSVC_ISYSTEM "default")
    else()
      set(JLN_FLAGS_MSVC_ISYSTEM "${JLN_MSVC_ISYSTEM_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_NDEBUG)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_NDEBUG "with_optimization_1_or_above")
    else()
      set(JLN_FLAGS_NDEBUG "${JLN_NDEBUG_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_OPTIMIZATION)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_OPTIMIZATION "default")
    else()
      set(JLN_FLAGS_OPTIMIZATION "${JLN_OPTIMIZATION_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_PEDANTIC)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_PEDANTIC "on")
    else()
      set(JLN_FLAGS_PEDANTIC "${JLN_PEDANTIC_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_REPRODUCIBLE_BUILD_WARNINGS)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_REPRODUCIBLE_BUILD_WARNINGS "default")
    else()
      set(JLN_FLAGS_REPRODUCIBLE_BUILD_WARNINGS "${JLN_REPRODUCIBLE_BUILD_WARNINGS_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_SANITIZERS)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_SANITIZERS "default")
    else()
      set(JLN_FLAGS_SANITIZERS "${JLN_SANITIZERS_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_SHADOW_WARNINGS)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_SHADOW_WARNINGS "off")
    else()
      set(JLN_FLAGS_SHADOW_WARNINGS "${JLN_SHADOW_WARNINGS_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_STL_FIX)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_STL_FIX "on")
    else()
      set(JLN_FLAGS_STL_FIX "${JLN_STL_FIX_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_SUGGEST_ATTRIBUTES)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_SUGGEST_ATTRIBUTES "on")
    else()
      set(JLN_FLAGS_SUGGEST_ATTRIBUTES "${JLN_SUGGEST_ATTRIBUTES_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_SWITCH_WARNINGS)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_SWITCH_WARNINGS "on")
    else()
      set(JLN_FLAGS_SWITCH_WARNINGS "${JLN_SWITCH_WARNINGS_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_SYMBOLS)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_SYMBOLS "default")
    else()
      set(JLN_FLAGS_SYMBOLS "${JLN_SYMBOLS_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_UNSAFE_BUFFER_USAGE_WARNINGS)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_UNSAFE_BUFFER_USAGE_WARNINGS "default")
    else()
      set(JLN_FLAGS_UNSAFE_BUFFER_USAGE_WARNINGS "${JLN_UNSAFE_BUFFER_USAGE_WARNINGS_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_VAR_INIT)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_VAR_INIT "default")
    else()
      set(JLN_FLAGS_VAR_INIT "${JLN_VAR_INIT_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_WARNINGS)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_WARNINGS "on")
    else()
      set(JLN_FLAGS_WARNINGS "${JLN_WARNINGS_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_WARNINGS_AS_ERROR)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_WARNINGS_AS_ERROR "default")
    else()
      set(JLN_FLAGS_WARNINGS_AS_ERROR "${JLN_WARNINGS_AS_ERROR_D}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_WINDOWS_BIGOBJ)
    if(JLN_FLAGS_DISABLE_OTHERS)
      set(JLN_FLAGS_WINDOWS_BIGOBJ "on")
    else()
      set(JLN_FLAGS_WINDOWS_BIGOBJ "${JLN_WINDOWS_BIGOBJ_D}")
    endif()
  endif()

  if (   NOT ( JLN_FLAGS_NDEBUG STREQUAL "default" ) )
    if (  ( JLN_MSVC_C_COMPILER OR JLN_ICL_C_COMPILER ) )
      if (  JLN_FLAGS_NDEBUG STREQUAL "off" )
        list(APPEND CXX_FLAGS  "/UNDEBUG")
      else()
        if (  JLN_FLAGS_NDEBUG STREQUAL "on" )
          list(APPEND CXX_FLAGS  "/DNDEBUG")
        else()
          if (   NOT ( JLN_FLAGS_OPTIMIZATION STREQUAL "default" ) AND NOT ( JLN_FLAGS_OPTIMIZATION STREQUAL "0" OR JLN_FLAGS_OPTIMIZATION STREQUAL "g" ) )
            list(APPEND CXX_FLAGS  "/DNDEBUG")
          endif()
        endif()
      endif()
    else()
      if (  JLN_FLAGS_NDEBUG STREQUAL "off" )
        list(APPEND CXX_FLAGS  "-UNDEBUG")
      else()
        if (  JLN_FLAGS_NDEBUG STREQUAL "on" )
          list(APPEND CXX_FLAGS  "-DNDEBUG")
        else()
          if (   NOT ( JLN_FLAGS_OPTIMIZATION STREQUAL "default" ) AND NOT ( JLN_FLAGS_OPTIMIZATION STREQUAL "0" OR JLN_FLAGS_OPTIMIZATION STREQUAL "g" ) )
            list(APPEND CXX_FLAGS  "-DNDEBUG")
          endif()
        endif()
      endif()
    endif()
  endif()
  if (  ( JLN_GCC_C_COMPILER OR JLN_CLANG_LIKE_COMPILER OR JLN_CLANG_CL_C_COMPILER ) )
    if (   NOT ( JLN_FLAGS_WARNINGS STREQUAL "default" ) )
      if (  JLN_FLAGS_WARNINGS STREQUAL "off" )
        list(APPEND CXX_FLAGS  "-w")
      else()
        if (  JLN_FLAGS_WARNINGS STREQUAL "essential" )
          list(APPEND CXX_FLAGS  "-Wall" "-Wextra" "-Wwrite-strings")
        else()
          if (  JLN_GCC_C_COMPILER )
            list(APPEND CXX_FLAGS  "-Wall" "-Wextra")
            if (  JLN_C_COMPILER_VERSION VERSION_LESS "8.0" )
              list(APPEND CXX_FLAGS  "-Wcast-align")
            endif()
            list(APPEND CXX_FLAGS  "-Wcast-qual" "-Wdisabled-optimization" "-Wfloat-equal" "-Wformat-security" "-Wformat=2" "-Winvalid-pch" "-Wmissing-declarations" "-Wmissing-include-dirs" "-Wpacked" "-Wredundant-decls" "-Wundef" "-Wunused-macros" "-Wpointer-arith" "-Wbad-function-cast" "-Winit-self" "-Wjump-misses-init" "-Wnested-externs" "-Wold-style-definition" "-Wstrict-prototypes" "-Wwrite-strings")
            if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "4.7" )
              list(APPEND CXX_FLAGS  "-Wsuggest-attribute=noreturn" "-Wlogical-op" "-Wvector-operation-performance" "-Wdouble-promotion" "-Wtrampolines")
              if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "4.8" )
                if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "4.9" )
                  if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "5.1" )
                    list(APPEND CXX_FLAGS  "-Wformat-signedness" "-Warray-bounds=2")
                    if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "6.1" )
                      list(APPEND CXX_FLAGS  "-Wduplicated-cond" "-Wnull-dereference")
                      if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "7.0" )
                        if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "7.1" )
                          list(APPEND CXX_FLAGS  "-Walloc-zero" "-Walloca" "-Wformat-overflow=2" "-Wduplicated-branches")
                          if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "8.0" )
                            list(APPEND CXX_FLAGS  "-Wcast-align=strict" "-Wformat-truncation=2" "-Wshift-overflow=2")
                            if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "14.0" )
                              list(APPEND CXX_FLAGS  "-Walloc-size")
                            endif()
                          endif()
                        endif()
                      endif()
                    endif()
                  endif()
                endif()
              endif()
            endif()
            if (  JLN_FLAGS_WARNINGS STREQUAL "extensive" )
              if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "8.0" )
                list(APPEND CXX_FLAGS  "-Wstringop-overflow=4")
                if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "12.0" )
                  list(APPEND CXX_FLAGS  "-Wuse-after-free=3")
                endif()
              endif()
            endif()
          else()
            list(APPEND CXX_FLAGS  "-Weverything" "-Wno-documentation" "-Wno-documentation-unknown-command" "-Wno-newline-eof" "-Wno-padded" "-Wno-global-constructors")
            if (   NOT ( ( JLN_FLAGS_SWITCH_WARNINGS STREQUAL "off" OR JLN_FLAGS_SWITCH_WARNINGS STREQUAL "exhaustive_enum" OR JLN_FLAGS_SWITCH_WARNINGS STREQUAL "exhaustive_enum_and_mandatory_default" ) ) )
              list(APPEND CXX_FLAGS  "-Wno-switch-enum")
            endif()
            if (  JLN_FLAGS_COVERED_SWITCH_DEFAULT_WARNINGS STREQUAL "default" )
              list(APPEND CXX_FLAGS  "-Wno-covered-switch-default")
            endif()
            if (  JLN_FLAGS_SUGGEST_ATTRIBUTES STREQUAL "default" )
              list(APPEND CXX_FLAGS  "-Wno-missing-noreturn")
            endif()
            if (   NOT ( JLN_FLAGS_CONVERSION_WARNINGS STREQUAL "default" ) )
              if (  JLN_FLAGS_CONVERSION_WARNINGS STREQUAL "conversion" )
                list(APPEND CXX_FLAGS  "-Wno-sign-compare" "-Wno-sign-conversion")
              else()
                if (  ( JLN_FLAGS_CONVERSION_WARNINGS STREQUAL "float" OR JLN_FLAGS_CONVERSION_WARNINGS STREQUAL "sign" ) )
                  list(APPEND CXX_FLAGS  "-Wno-conversion")
                endif()
              endif()
            endif()
            if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "3.9" )
              if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "5.0" )
                if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "9.0" )
                  if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "10.0" )
                    if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "11.0" )
                      if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "16.0" )
                        if (  JLN_FLAGS_UNSAFE_BUFFER_USAGE_WARNINGS STREQUAL "default" )
                          list(APPEND CXX_FLAGS  "-Wno-unsafe-buffer-usage")
                        endif()
                      endif()
                    endif()
                  endif()
                endif()
              endif()
            endif()
          endif()
        endif()
      endif()
    endif()
    if (  JLN_GCC_C_COMPILER )
      if (   NOT ( JLN_FLAGS_SWITCH_WARNINGS STREQUAL "default" ) )
        if (  JLN_FLAGS_SWITCH_WARNINGS STREQUAL "on" )
          list(APPEND CXX_FLAGS  "-Wswitch")
        else()
          if (  JLN_FLAGS_SWITCH_WARNINGS STREQUAL "exhaustive_enum" )
            list(APPEND CXX_FLAGS  "-Wswitch-enum")
          else()
            if (  JLN_FLAGS_SWITCH_WARNINGS STREQUAL "mandatory_default" )
              list(APPEND CXX_FLAGS  "-Wswitch-default")
            else()
              if (  JLN_FLAGS_SWITCH_WARNINGS STREQUAL "exhaustive_enum_and_mandatory_default" )
                list(APPEND CXX_FLAGS  "-Wswitch-default" "-Wswitch-enum")
              else()
                list(APPEND CXX_FLAGS  "-Wno-switch" "-Wno-switch-enum" "-Wno-switch-default")
              endif()
            endif()
          endif()
        endif()
      endif()
    else()
      if (   NOT ( JLN_FLAGS_SWITCH_WARNINGS STREQUAL "default" ) )
        if (  JLN_FLAGS_SWITCH_WARNINGS STREQUAL "on" )
          list(APPEND CXX_FLAGS  "-Wswitch" "-Wno-switch-default")
        else()
          if (  JLN_FLAGS_SWITCH_WARNINGS STREQUAL "mandatory_default" )
            list(APPEND CXX_FLAGS  "-Wswitch" "-Wswitch-default")
          else()
            if (  JLN_FLAGS_SWITCH_WARNINGS STREQUAL "exhaustive_enum" )
              list(APPEND CXX_FLAGS  "-Wswitch" "-Wswitch-enum" "-Wno-switch-default")
            else()
              if (  JLN_FLAGS_SWITCH_WARNINGS STREQUAL "exhaustive_enum_and_mandatory_default" )
                list(APPEND CXX_FLAGS  "-Wswitch" "-Wswitch-enum" "-Wswitch-default")
              else()
                list(APPEND CXX_FLAGS  "-Wno-switch" "-Wno-switch-enum" "-Wno-switch-default")
              endif()
            endif()
          endif()
        endif()
      endif()
      if (   NOT ( JLN_FLAGS_COVERED_SWITCH_DEFAULT_WARNINGS STREQUAL "default" ) )
        if (  JLN_FLAGS_COVERED_SWITCH_DEFAULT_WARNINGS STREQUAL "off" )
          list(APPEND CXX_FLAGS  "-Wno-covered-switch-default")
        else()
          list(APPEND CXX_FLAGS  "-Wcovered-switch-default")
        endif()
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_UNSAFE_BUFFER_USAGE_WARNINGS STREQUAL "default" ) )
      if (  ( ( JLN_CLANG_LIKE_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "16.0" ) OR ( JLN_CLANG_CL_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "16.0" ) ) )
        if (  JLN_FLAGS_UNSAFE_BUFFER_USAGE_WARNINGS STREQUAL "off" )
          list(APPEND CXX_FLAGS  "-Wno-unsafe-buffer-usage")
        endif()
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_SHADOW_WARNINGS STREQUAL "default" ) )
      if (  JLN_FLAGS_SHADOW_WARNINGS STREQUAL "off" )
        list(APPEND CXX_FLAGS  "-Wno-shadow")
        if (  ( ( JLN_CLANG_LIKE_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "8.0" ) OR ( JLN_CLANG_CL_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "8.0" ) ) )
          list(APPEND CXX_FLAGS  "-Wno-shadow-field")
        endif()
      else()
        if (  JLN_FLAGS_SHADOW_WARNINGS STREQUAL "on" )
          list(APPEND CXX_FLAGS  "-Wshadow")
        else()
          if (  JLN_FLAGS_SHADOW_WARNINGS STREQUAL "all" )
            if (  JLN_GCC_C_COMPILER )
              list(APPEND CXX_FLAGS  "-Wshadow")
            else()
              list(APPEND CXX_FLAGS  "-Wshadow-all")
            endif()
          else()
            if (  ( JLN_GCC_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "7.1" ) )
              if (  JLN_FLAGS_SHADOW_WARNINGS STREQUAL "local" )
                list(APPEND CXX_FLAGS  "-Wshadow=local")
              else()
                list(APPEND CXX_FLAGS  "-Wshadow=compatible-local")
              endif()
            endif()
          endif()
        endif()
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_SUGGEST_ATTRIBUTES STREQUAL "default" ) )
      if (  JLN_FLAGS_SUGGEST_ATTRIBUTES STREQUAL "on" )
        list(APPEND CXX_FLAGS  "-Wmissing-noreturn")
      else()
        if (  JLN_FLAGS_SUGGEST_ATTRIBUTES STREQUAL "common" )
          list(APPEND CXX_FLAGS  "-Wmissing-noreturn" "-Wmissing-format-attribute")
        else()
          if (  ( JLN_FLAGS_SUGGEST_ATTRIBUTES STREQUAL "analysis" OR JLN_FLAGS_SUGGEST_ATTRIBUTES STREQUAL "all" ) )
            list(APPEND CXX_FLAGS  "-Wmissing-noreturn" "-Wmissing-format-attribute")
            if (  JLN_GCC_C_COMPILER )
              if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "8.0" )
                list(APPEND CXX_FLAGS  "-Wsuggest-attribute=malloc")
                if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "14.0" )
                  list(APPEND CXX_FLAGS  "-Wsuggest-attribute=returns_nonnull")
                endif()
              endif()
              if (  ( JLN_FLAGS_SUGGEST_ATTRIBUTES STREQUAL "all" OR JLN_FLAGS_SUGGEST_ATTRIBUTES STREQUAL "unity" ) )
                if (  JLN_FLAGS_SUGGEST_ATTRIBUTES STREQUAL "all" )
                  list(APPEND CXX_FLAGS  "-Wsuggest-attribute=pure" "-Wsuggest-attribute=const")
                  if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "5.1" )
                    if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "8.0" )
                      list(APPEND CXX_FLAGS  "-Wsuggest-attribute=cold")
                    endif()
                  endif()
                endif()
              endif()
            endif()
          else()
            list(APPEND CXX_FLAGS  "-Wno-missing-noreturn" "-Wno-missing-format-attribute")
            if (  JLN_GCC_C_COMPILER )
              list(APPEND CXX_FLAGS  "-Wno-suggest-attribute=pure" "-Wno-suggest-attribute=const")
              if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "5.0" )
                if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "5.1" )
                  if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "8.0" )
                    list(APPEND CXX_FLAGS  "-Wno-suggest-attribute=malloc")
                    if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "14.0" )
                      list(APPEND CXX_FLAGS  "-Wno-suggest-attribute=returns_nonnull")
                    endif()
                  endif()
                endif()
              endif()
            endif()
          endif()
        endif()
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_VAR_INIT STREQUAL "default" ) )
      if (  ( ( JLN_GCC_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "12.0" ) OR ( JLN_CLANG_LIKE_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "8.0" ) OR ( JLN_CLANG_CL_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "8.0" ) ) )
        if (  JLN_FLAGS_VAR_INIT STREQUAL "pattern" )
          list(APPEND CXX_FLAGS  "-ftrivial-auto-var-init=pattern")
          if (  JLN_GCC_C_COMPILER )
            list(APPEND CXX_FLAGS  "-Wtrivial-auto-var-init")
          endif()
        else()
          if (  JLN_FLAGS_VAR_INIT STREQUAL "zero" )
            if (  ( ( JLN_CLANG_LIKE_COMPILER AND JLN_C_COMPILER_VERSION VERSION_LESS_EQUAL "15.0" ) OR ( JLN_CLANG_CL_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_LESS_EQUAL "15.0" ) ) )
              if (  JLN_FLAGS_VAR_INIT STREQUAL "zero" )
                list(APPEND CXX_FLAGS  "-enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang")
              endif()
            else()
              list(APPEND CXX_FLAGS  "-ftrivial-auto-var-init=zero")
              if (  JLN_GCC_C_COMPILER )
                list(APPEND CXX_FLAGS  "-Wtrivial-auto-var-init")
              endif()
            endif()
          else()
            list(APPEND CXX_FLAGS  "-ftrivial-auto-var-init=uninitialized")
          endif()
        endif()
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_REPRODUCIBLE_BUILD_WARNINGS STREQUAL "default" ) )
      if (  ( JLN_GCC_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "4.9" ) )
        if (  JLN_FLAGS_REPRODUCIBLE_BUILD_WARNINGS STREQUAL "on" )
          list(APPEND CXX_FLAGS  "-Wdate-time")
        else()
          list(APPEND CXX_FLAGS  "-Wno-date-time")
        endif()
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_WARNINGS_AS_ERROR STREQUAL "default" ) )
      if (  JLN_FLAGS_WARNINGS_AS_ERROR STREQUAL "on" )
        list(APPEND CXX_FLAGS  "-Werror")
      else()
        if (  JLN_FLAGS_WARNINGS_AS_ERROR STREQUAL "basic" )
          list(APPEND CXX_FLAGS  "-Werror=return-type" "-Werror=init-self")
          if (  JLN_GCC_C_COMPILER )
            list(APPEND CXX_FLAGS  "-Werror=div-by-zero")
            if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "5.1" )
              list(APPEND CXX_FLAGS  "-Werror=array-bounds" "-Werror=logical-op" "-Werror=logical-not-parentheses")
            endif()
          else()
            list(APPEND CXX_FLAGS  "-Werror=array-bounds" "-Werror=division-by-zero")
            if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "3.4" )
              list(APPEND CXX_FLAGS  "-Werror=logical-not-parentheses")
            endif()
          endif()
        else()
          list(APPEND CXX_FLAGS  "-Wno-error")
        endif()
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_COLOR STREQUAL "default" ) )
      if (  ( JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "4.9" OR  NOT ( JLN_GCC_C_COMPILER ) ) )
        if (  JLN_FLAGS_COLOR STREQUAL "auto" )
          list(APPEND CXX_FLAGS  "-fdiagnostics-color=auto")
        else()
          if (  JLN_FLAGS_COLOR STREQUAL "never" )
            list(APPEND CXX_FLAGS  "-fdiagnostics-color=never")
          else()
            list(APPEND CXX_FLAGS  "-fdiagnostics-color=always")
          endif()
        endif()
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_LTO STREQUAL "default" ) )
      if (  JLN_FLAGS_LTO STREQUAL "off" )
        list(APPEND CXX_FLAGS  "-fno-lto")
        list(APPEND LINK_FLAGS  "-fno-lto")
        if (  JLN_GCC_C_COMPILER )
          list(APPEND CXX_FLAGS  "-fno-whole-program")
        endif()
      else()
        if (  JLN_GCC_C_COMPILER )
          if (   NOT ( JLN_FLAGS_LTO STREQUAL "thin_or_nothing" ) )
            if (  ( JLN_FLAGS_LTO STREQUAL "whole_program" OR JLN_FLAGS_LTO STREQUAL "whole_program_and_full_lto" ) )
              list(APPEND CXX_FLAGS  "-fwhole-program")
            endif()
            if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "10.0" )
              list(APPEND CXX_FLAGS  "-flto=auto")
              list(APPEND LINK_FLAGS  "-flto=auto")
            else()
              list(APPEND CXX_FLAGS  "-flto")
              list(APPEND LINK_FLAGS  "-flto")
            endif()
          endif()
        else()
          if (  ( ( JLN_FLAGS_LTO STREQUAL "on" OR JLN_FLAGS_LTO STREQUAL "thin_or_nothing" OR JLN_FLAGS_LTO STREQUAL "whole_program" ) AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "4.0" ) )
            list(APPEND CXX_FLAGS  "-flto=thin")
            list(APPEND LINK_FLAGS  "-flto=thin")
          else()
            list(APPEND CXX_FLAGS  "-flto")
            list(APPEND LINK_FLAGS  "-flto")
            if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "10.0" )
              list(APPEND CXX_FLAGS  "-fvirtual-function-elimination")
              list(APPEND LINK_FLAGS  "-fvirtual-function-elimination")
            endif()
          endif()
          if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "3.9" )
            if (  ( JLN_FLAGS_LTO STREQUAL "whole_program" OR JLN_FLAGS_LTO STREQUAL "whole_program_and_full_lto" ) )
              list(APPEND CXX_FLAGS  "-fwhole-program-vtables")
              list(APPEND LINK_FLAGS  "-fwhole-program-vtables")
            endif()
            if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "7.0" )
              list(APPEND CXX_FLAGS  "-fforce-emit-vtables")
              list(APPEND LINK_FLAGS  "-fforce-emit-vtables")
            endif()
          endif()
        endif()
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_SANITIZERS STREQUAL "default" ) )
      if (  ( ( JLN_GCC_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "4.8" ) OR ( JLN_CLANG_LIKE_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "3.2" ) OR ( JLN_CLANG_CL_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "4.0" ) ) )
        if (  JLN_FLAGS_SANITIZERS STREQUAL "off" )
          list(APPEND CXX_FLAGS  "-fno-sanitize=all")
          list(APPEND LINK_FLAGS  "-fno-sanitize=all")
        else()
          if (  JLN_FLAGS_SANITIZERS STREQUAL "thread" )
            list(APPEND CXX_FLAGS  "-fsanitize=thread")
            list(APPEND LINK_FLAGS  "-fsanitize=thread")
          else()
            if (  JLN_FLAGS_SANITIZERS STREQUAL "undefined" )
              list(APPEND CXX_FLAGS  "-fsanitize=undefined")
              list(APPEND LINK_FLAGS  "-fsanitize=undefined")
            else()
              if (  JLN_FLAGS_SANITIZERS STREQUAL "undefined_minimal_runtime" )
                list(APPEND CXX_FLAGS  "-fsanitize=undefined")
                list(APPEND LINK_FLAGS  "-fsanitize=undefined")
                if (  ( ( JLN_CLANG_LIKE_COMPILER OR JLN_CLANG_CL_C_COMPILER ) AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "6.0" ) )
                  list(APPEND CXX_FLAGS  "-fsanitize-minimal-runtime")
                  list(APPEND LINK_FLAGS  "-fsanitize-minimal-runtime")
                endif()
              else()
                if (  JLN_FLAGS_SANITIZERS STREQUAL "scudo_hardened_allocator" )
                  if (  ( JLN_CLANG_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "13.0" ) )
                    list(APPEND CXX_FLAGS  "-fsanitize=scudo")
                    list(APPEND LINK_FLAGS  "-fsanitize=scudo")
                  endif()
                else()
                  list(APPEND CXX_FLAGS  "-fno-omit-frame-pointer" "-fno-optimize-sibling-calls" "-fsanitize=address")
                  list(APPEND LINK_FLAGS  "-fsanitize=address")
                  if (  ( JLN_FLAGS_SANITIZERS STREQUAL "on" OR JLN_FLAGS_SANITIZERS STREQUAL "with_minimal_code_size" OR JLN_FLAGS_SANITIZERS STREQUAL "extra" OR JLN_FLAGS_SANITIZERS STREQUAL "extra_with_minimal_code_size" ) )
                    if (  ( ( JLN_GCC_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "4.9" ) OR JLN_CLANG_LIKE_COMPILER OR JLN_CLANG_CL_C_COMPILER ) )
                      list(APPEND CXX_FLAGS  "-fsanitize=undefined")
                      list(APPEND LINK_FLAGS  "-fsanitize=undefined")
                    endif()
                    if (  ( JLN_FLAGS_SANITIZERS STREQUAL "with_minimal_code_size" OR JLN_FLAGS_SANITIZERS STREQUAL "extra_with_minimal_code_size" ) )
                      if (  ( ( JLN_CLANG_LIKE_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "13.0" ) OR ( JLN_CLANG_CL_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "13.0" ) ) )
                        list(APPEND CXX_FLAGS  "-fsanitize-address-use-after-return=always")
                        list(APPEND LINK_FLAGS  "-fsanitize-address-use-after-return=always")
                      endif()
                    endif()
                    if (  ( JLN_FLAGS_SANITIZERS STREQUAL "extra" OR JLN_FLAGS_SANITIZERS STREQUAL "extra_with_minimal_code_size" ) )
                      if (  ( ( JLN_GCC_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "8.0" ) OR ( JLN_CLANG_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "9.0" ) OR ( JLN_CLANG_CL_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "9.0" ) ) )
                        list(APPEND CXX_FLAGS  "-fsanitize=pointer-compare" "-fsanitize=pointer-subtract")
                      endif()
                    endif()
                  endif()
                endif()
              endif()
            endif()
          endif()
        endif()
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_EMCC_DEBUG STREQUAL "default" ) )
      if (  JLN_CLANG_EMCC_C_COMPILER )
        if (  JLN_FLAGS_EMCC_DEBUG STREQUAL "off" )
          list(APPEND LINK_FLAGS  "-sASSERTIONS=0" "-sSAFE_HEAP=0" "-sSTACK_OVERFLOW_CHECK=0")
        else()
          if (  JLN_FLAGS_EMCC_DEBUG STREQUAL "slow" )
            list(APPEND LINK_FLAGS  "-sASSERTIONS=2")
          else()
            list(APPEND LINK_FLAGS  "-sASSERTIONS=1")
          endif()
          list(APPEND LINK_FLAGS  "-sSTACK_OVERFLOW_CHECK=2")
          if (   NOT ( ( JLN_FLAGS_SANITIZERS STREQUAL "on" OR JLN_FLAGS_SANITIZERS STREQUAL "with_minimal_code_size" OR JLN_FLAGS_SANITIZERS STREQUAL "extra" OR JLN_FLAGS_SANITIZERS STREQUAL "extra_with_minimal_code_size" OR JLN_FLAGS_SANITIZERS STREQUAL "address" OR JLN_FLAGS_SANITIZERS STREQUAL "address_with_minimal_code_size" ) ) )
            list(APPEND LINK_FLAGS  "-sSAFE_HEAP=1")
          endif()
        endif()
      endif()
    endif()
  endif()
  if (   NOT ( JLN_FLAGS_CONVERSION_WARNINGS STREQUAL "default" ) )
    if (  ( JLN_GCC_C_COMPILER OR JLN_CLANG_LIKE_COMPILER OR JLN_CLANG_CL_C_COMPILER OR JLN_ICC_C_COMPILER ) )
      if (  JLN_FLAGS_CONVERSION_WARNINGS STREQUAL "on" )
        list(APPEND CXX_FLAGS  "-Wconversion" "-Wsign-compare" "-Wsign-conversion")
      else()
        if (  JLN_FLAGS_CONVERSION_WARNINGS STREQUAL "conversion" )
          list(APPEND CXX_FLAGS  "-Wconversion")
        else()
          if (  JLN_FLAGS_CONVERSION_WARNINGS STREQUAL "float" )
            if (  JLN_GCC_C_COMPILER )
              if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "4.9" )
                list(APPEND CXX_FLAGS  "-Wfloat-conversion")
              endif()
            else()
              list(APPEND CXX_FLAGS  "-Wfloat-conversion")
            endif()
          else()
            if (  JLN_FLAGS_CONVERSION_WARNINGS STREQUAL "sign" )
              list(APPEND CXX_FLAGS  "-Wsign-compare" "-Wsign-conversion")
            else()
              if (  JLN_FLAGS_CONVERSION_WARNINGS STREQUAL "all" )
                list(APPEND CXX_FLAGS  "-Wconversion")
                if (  JLN_GCC_C_COMPILER )
                  list(APPEND CXX_FLAGS  "-Warith-conversion")
                endif()
              else()
                list(APPEND CXX_FLAGS  "-Wno-conversion" "-Wno-sign-compare" "-Wno-sign-conversion")
              endif()
            endif()
          endif()
        endif()
      endif()
    endif()
  endif()
  if (  ( JLN_GCC_C_COMPILER OR JLN_CLANG_LIKE_COMPILER ) )
    if (   NOT ( JLN_FLAGS_EXCEPTIONS STREQUAL "default" ) )
      if (  JLN_FLAGS_EXCEPTIONS STREQUAL "on" )
        list(APPEND CXX_FLAGS  "-fexceptions")
        if (  JLN_CLANG_EMCC_C_COMPILER )
          list(APPEND CXX_FLAGS  "-sDISABLE_EXCEPTION_CATCHING=0")
        endif()
      else()
        list(APPEND CXX_FLAGS  "-fno-exceptions")
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_HARDENED STREQUAL "default" ) )
      if (  ( JLN_FLAGS_HARDENED STREQUAL "on" OR JLN_FLAGS_HARDENED STREQUAL "all" ) )
        if (  ( JLN_GCC_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "14.0" ) )
          list(APPEND CXX_FLAGS  "-fhardened" "-Whardened")
          if (  JLN_FLAGS_HARDENED STREQUAL "all" )
            list(APPEND CXX_FLAGS  "-fstack-protector-all")
          endif()
          list(APPEND CXX_FLAGS  "-Wtrampolines")
          list(APPEND LINK_FLAGS  "-Wl,-z,noexecstack")
        else()
          if (  JLN_FLAGS_HARDENED STREQUAL "all" )
            list(APPEND CXX_FLAGS  "-fstack-protector-all")
          else()
            list(APPEND CXX_FLAGS  "-fstack-protector-strong")
          endif()
          if (  ( ( JLN_GCC_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "12.0" ) OR ( JLN_CLANG_LIKE_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "14.0" ) ) )
            list(APPEND CXX_FLAGS  "-D_FORTIFY_SOURCE=3")
            if (  ( ( JLN_GCC_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "13.0" ) OR ( JLN_CLANG_LIKE_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "16.0" ) ) )
              list(APPEND CXX_FLAGS  "-fstrict-flex-arrays=3")
            endif()
          else()
            list(APPEND CXX_FLAGS  "-D_FORTIFY_SOURCE=2")
          endif()
          if (  JLN_FLAGS_VAR_INIT STREQUAL "default" )
            if (  ( ( JLN_GCC_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "12.0" ) OR ( JLN_CLANG_LIKE_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "8.0" ) ) )
              if (  ( JLN_CLANG_LIKE_COMPILER AND JLN_C_COMPILER_VERSION VERSION_LESS_EQUAL "15.0" ) )
                list(APPEND CXX_FLAGS  "-enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang")
              else()
                list(APPEND CXX_FLAGS  "-ftrivial-auto-var-init=zero")
                if (  JLN_GCC_C_COMPILER )
                  list(APPEND CXX_FLAGS  "-Wtrivial-auto-var-init")
                endif()
              endif()
            endif()
          endif()
          list(APPEND CXX_FLAGS  "-fPIE")
          list(APPEND LINK_FLAGS  "-fPIE")
          if (   NOT ( JLN_CLANG_EMCC_C_COMPILER ) )
            list(APPEND CXX_FLAGS  "-pie")
            list(APPEND LINK_FLAGS  "-pie" "-Wl,-z,relro,-z,now" "-Wl,-z,noexecstack")
          endif()
          if (  JLN_GCC_C_COMPILER )
            if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "4.6" )
              list(APPEND CXX_FLAGS  "-Wtrampolines")
              if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "8.0" )
                list(APPEND CXX_FLAGS  "-fstack-clash-protection" "-fcf-protection=full")
              endif()
            endif()
          else()
            if (   NOT ( JLN_CLANG_EMCC_C_COMPILER ) )
              if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "7.0" )
                list(APPEND CXX_FLAGS  "-fcf-protection=full")
                if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "11.0" )
                  list(APPEND CXX_FLAGS  "-fstack-clash-protection")
                endif()
              endif()
            endif()
          endif()
        endif()
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_DIAGNOSTICS_FORMAT STREQUAL "default" ) )
      if (  JLN_FLAGS_DIAGNOSTICS_FORMAT STREQUAL "fixits" )
        if (  ( ( JLN_GCC_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "7.0" ) OR (  NOT ( JLN_GCC_C_COMPILER ) AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "5.0" ) ) )
          list(APPEND CXX_FLAGS  "-fdiagnostics-parseable-fixits")
        endif()
      else()
        if (  JLN_FLAGS_DIAGNOSTICS_FORMAT STREQUAL "patch" )
          if (  ( JLN_GCC_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "7.0" ) )
            list(APPEND CXX_FLAGS  "-fdiagnostics-generate-patch")
          endif()
        else()
          if (  JLN_CLANG_LIKE_COMPILER )
            list(APPEND CXX_FLAGS  "-fdiagnostics-print-source-range-info")
          endif()
        endif()
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_PEDANTIC STREQUAL "default" ) )
      if (   NOT ( JLN_FLAGS_PEDANTIC STREQUAL "off" ) )
        list(APPEND CXX_FLAGS  "-pedantic")
        if (  JLN_FLAGS_PEDANTIC STREQUAL "as_error" )
          list(APPEND CXX_FLAGS  "-pedantic-errors" "-Werror=write-strings")
        endif()
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_SYMBOLS STREQUAL "default" ) )
      if (  JLN_FLAGS_SYMBOLS STREQUAL "hidden" )
        list(APPEND CXX_FLAGS  "-fvisibility=hidden")
      else()
        if (  JLN_FLAGS_SYMBOLS STREQUAL "strip_all" )
          list(APPEND LINK_FLAGS  "-s")
        else()
          if (  JLN_FLAGS_SYMBOLS STREQUAL "gc_sections" )
            if (  JLN_LD64_C_LINKER )
              list(APPEND LINK_FLAGS  "-Wl,-S" "-Wl,-dead_strip")
            endif()
            list(APPEND LINK_FLAGS  "-s" "-Wl,--gc-sections")
          else()
            if (  JLN_FLAGS_SYMBOLS STREQUAL "nodebug" )
              list(APPEND CXX_FLAGS  "-g0")
            else()
              if (  JLN_FLAGS_SYMBOLS STREQUAL "debug" )
                list(APPEND CXX_FLAGS  "-g")
              else()
                if (  JLN_FLAGS_SYMBOLS STREQUAL "minimal_debug" )
                  list(APPEND CXX_FLAGS  "-g1")
                else()
                  if (  JLN_FLAGS_SYMBOLS STREQUAL "full_debug" )
                    list(APPEND CXX_FLAGS  "-g3")
                  else()
                    if (  JLN_CLANG_C_COMPILER )
                      if (  JLN_FLAGS_SYMBOLS STREQUAL "dwarf" )
                        list(APPEND CXX_FLAGS  "-g")
                      endif()
                      if (  JLN_FLAGS_SYMBOLS STREQUAL "lldb" )
                        list(APPEND CXX_FLAGS  "-glldb")
                      endif()
                      if (  JLN_FLAGS_SYMBOLS STREQUAL "sce" )
                        list(APPEND CXX_FLAGS  "-gsce")
                      endif()
                      if (  JLN_FLAGS_SYMBOLS STREQUAL "dbx" )
                        list(APPEND CXX_FLAGS  "-gdbx")
                      endif()
                    else()
                      if (  JLN_GCC_C_COMPILER )
                        if (  JLN_FLAGS_SYMBOLS STREQUAL "dwarf" )
                          list(APPEND CXX_FLAGS  "-g")
                        endif()
                        if (  JLN_FLAGS_SYMBOLS STREQUAL "codeview" )
                          list(APPEND CXX_FLAGS  "-gcodeview")
                        endif()
                        if (  JLN_FLAGS_SYMBOLS STREQUAL "btf" )
                          list(APPEND CXX_FLAGS  "-gbtf")
                        endif()
                        if (  JLN_FLAGS_SYMBOLS STREQUAL "ctf" )
                          list(APPEND CXX_FLAGS  "-gctf")
                        endif()
                        if (  JLN_FLAGS_SYMBOLS STREQUAL "ctf1" )
                          list(APPEND CXX_FLAGS  "-gctf1")
                        endif()
                        if (  JLN_FLAGS_SYMBOLS STREQUAL "ctf2" )
                          list(APPEND CXX_FLAGS  "-gctf2")
                        endif()
                        if (  JLN_FLAGS_SYMBOLS STREQUAL "vms" )
                          list(APPEND CXX_FLAGS  "-gvms")
                        endif()
                        if (  JLN_FLAGS_SYMBOLS STREQUAL "vms1" )
                          list(APPEND CXX_FLAGS  "-gvms1")
                        endif()
                        if (  JLN_FLAGS_SYMBOLS STREQUAL "vms2" )
                          list(APPEND CXX_FLAGS  "-gvms2")
                        endif()
                        if (  JLN_FLAGS_SYMBOLS STREQUAL "vms3" )
                          list(APPEND CXX_FLAGS  "-gvms3")
                        endif()
                      endif()
                    endif()
                  endif()
                endif()
              endif()
            endif()
          endif()
        endif()
      endif()
    endif()
    if (  JLN_CLANG_EMCC_C_COMPILER )
      if (   NOT ( JLN_FLAGS_OPTIMIZATION STREQUAL "default" ) )
        if (  JLN_FLAGS_OPTIMIZATION STREQUAL "0" )
          list(APPEND CXX_FLAGS  "-O0")
          list(APPEND LINK_FLAGS  "-O0")
        else()
          if (  JLN_FLAGS_OPTIMIZATION STREQUAL "g" )
            list(APPEND CXX_FLAGS  "-Og")
            list(APPEND LINK_FLAGS  "-Og")
          else()
            if (  JLN_FLAGS_OPTIMIZATION STREQUAL "1" )
              list(APPEND CXX_FLAGS  "-O1")
              list(APPEND LINK_FLAGS  "-O1")
            else()
              if (  JLN_FLAGS_OPTIMIZATION STREQUAL "2" )
                list(APPEND CXX_FLAGS  "-O2")
                list(APPEND LINK_FLAGS  "-O2")
              else()
                if (  JLN_FLAGS_OPTIMIZATION STREQUAL "3" )
                  list(APPEND CXX_FLAGS  "-O3")
                  list(APPEND LINK_FLAGS  "-O3")
                else()
                  if (  JLN_FLAGS_OPTIMIZATION STREQUAL "fast" )
                    list(APPEND CXX_FLAGS  "-O3" "-mnontrapping-fptoint")
                    list(APPEND LINK_FLAGS  "-O3" "-mnontrapping-fptoint")
                  else()
                    if (  JLN_FLAGS_OPTIMIZATION STREQUAL "size" )
                      list(APPEND CXX_FLAGS  "-Os")
                      list(APPEND LINK_FLAGS  "-Os")
                    else()
                      list(APPEND CXX_FLAGS  "-Oz")
                      list(APPEND LINK_FLAGS  "-Oz")
                    endif()
                  endif()
                endif()
              endif()
            endif()
          endif()
        endif()
      endif()
    else()
      if (   NOT ( JLN_FLAGS_COVERAGE STREQUAL "default" ) )
        if (  JLN_FLAGS_COVERAGE STREQUAL "on" )
          list(APPEND CXX_FLAGS  "--coverage")
          list(APPEND LINK_FLAGS  "--coverage")
          if (  JLN_CLANG_C_COMPILER )
            list(APPEND LINK_FLAGS  "-lprofile_rt")
          endif()
        endif()
      endif()
      if (   NOT ( JLN_FLAGS_OPTIMIZATION STREQUAL "default" ) )
        if (  JLN_FLAGS_OPTIMIZATION STREQUAL "0" )
          list(APPEND CXX_FLAGS  "-O0")
        else()
          if (  JLN_FLAGS_OPTIMIZATION STREQUAL "g" )
            list(APPEND CXX_FLAGS  "-Og")
          else()
            list(APPEND LINK_FLAGS  "-Wl,-O1")
            if (  JLN_FLAGS_OPTIMIZATION STREQUAL "1" )
              list(APPEND CXX_FLAGS  "-O1")
            else()
              if (  JLN_FLAGS_OPTIMIZATION STREQUAL "2" )
                list(APPEND CXX_FLAGS  "-O2")
              else()
                if (  JLN_FLAGS_OPTIMIZATION STREQUAL "3" )
                  list(APPEND CXX_FLAGS  "-O3")
                else()
                  if (  JLN_FLAGS_OPTIMIZATION STREQUAL "size" )
                    list(APPEND CXX_FLAGS  "-Os")
                  else()
                    if (  JLN_FLAGS_OPTIMIZATION STREQUAL "z" )
                      if (  ( JLN_CLANG_C_COMPILER OR ( JLN_GCC_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "12.0" ) ) )
                        list(APPEND CXX_FLAGS  "-Oz")
                      else()
                        list(APPEND CXX_FLAGS  "-Os")
                      endif()
                    else()
                      if (  JLN_CLANG_C_COMPILER )
                        list(APPEND CXX_FLAGS  "-O3" "-ffast-math")
                      else()
                        list(APPEND CXX_FLAGS  "-Ofast")
                      endif()
                    endif()
                  endif()
                endif()
              endif()
            endif()
          endif()
        endif()
      endif()
      if (   NOT ( JLN_FLAGS_CPU STREQUAL "default" ) )
        if (  JLN_FLAGS_CPU STREQUAL "generic" )
          list(APPEND CXX_FLAGS  "-mtune=generic")
          list(APPEND LINK_FLAGS  "-mtune=generic")
        else()
          list(APPEND CXX_FLAGS  "-march=native" "-mtune=native")
          list(APPEND LINK_FLAGS  "-march=native" "-mtune=native")
        endif()
      endif()
      if (   NOT ( JLN_FLAGS_LINKER STREQUAL "default" ) )
        if (  JLN_FLAGS_LINKER STREQUAL "mold" )
          list(APPEND LINK_FLAGS  "-fuse-ld=mold")
        else()
          if (  JLN_FLAGS_LINKER STREQUAL "native" )
            if (  JLN_GCC_C_COMPILER )
              list(APPEND LINK_FLAGS  "-fuse-ld=gold")
            else()
              list(APPEND LINK_FLAGS  "-fuse-ld=lld")
            endif()
          else()
            if (  JLN_FLAGS_LINKER STREQUAL "bfd" )
              list(APPEND LINK_FLAGS  "-fuse-ld=bfd")
            else()
              if (  ( JLN_FLAGS_LINKER STREQUAL "gold" OR ( JLN_GCC_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_LESS "9.0" ) ) )
                list(APPEND LINK_FLAGS  "-fuse-ld=gold")
              else()
                list(APPEND LINK_FLAGS  "-fuse-ld=lld")
              endif()
            endif()
          endif()
        endif()
      endif()
      if (   NOT ( JLN_FLAGS_ANALYZER STREQUAL "default" ) )
        if (  ( JLN_GCC_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "10.0" ) )
          if (  JLN_FLAGS_ANALYZER STREQUAL "off" )
            list(APPEND CXX_FLAGS  "-fno-analyzer")
          else()
            list(APPEND CXX_FLAGS  "-fanalyzer")
            if (   NOT ( JLN_FLAGS_ANALYZER_TOO_COMPLEX_WARNING STREQUAL "default" ) )
              if (  JLN_FLAGS_ANALYZER_TOO_COMPLEX_WARNING STREQUAL "on" )
                list(APPEND CXX_FLAGS  "-Wanalyzer-too-complex")
              else()
                list(APPEND CXX_FLAGS  "-Wno-analyzer-too-complex")
              endif()
            endif()
            if (   NOT ( JLN_FLAGS_ANALYZER_VERBOSITY STREQUAL "default" ) )
              if (  JLN_FLAGS_ANALYZER_VERBOSITY STREQUAL "0" )
                list(APPEND CXX_FLAGS  "-fanalyzer-verbosity=0")
              else()
                if (  JLN_FLAGS_ANALYZER_VERBOSITY STREQUAL "1" )
                  list(APPEND CXX_FLAGS  "-fanalyzer-verbosity=1")
                else()
                  if (  JLN_FLAGS_ANALYZER_VERBOSITY STREQUAL "2" )
                    list(APPEND CXX_FLAGS  "-fanalyzer-verbosity=2")
                  else()
                    list(APPEND CXX_FLAGS  "-fanalyzer-verbosity=3")
                  endif()
                endif()
              endif()
            endif()
          endif()
        endif()
      endif()
    endif()
  endif()
  if (  ( JLN_MSVC_C_COMPILER OR JLN_CLANG_CL_C_COMPILER OR JLN_ICL_C_COMPILER ) )
    if (   NOT ( JLN_FLAGS_EXCEPTIONS STREQUAL "default" ) )
      if (  JLN_FLAGS_EXCEPTIONS STREQUAL "on" )
        list(APPEND CXX_FLAGS  "/EHsc")
      else()
        list(APPEND CXX_FLAGS  "/EHs-c-")
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_RTTI STREQUAL "default" ) )
      if (  JLN_FLAGS_RTTI STREQUAL "on" )
        list(APPEND CXX_FLAGS  "/GR")
      else()
        list(APPEND CXX_FLAGS  "/GR-")
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_STL_HARDENING STREQUAL "default" ) )
      if (  JLN_FLAGS_STL_HARDENING STREQUAL "off" )
        list(APPEND CXX_FLAGS  "/D_SECURE_SCL=0")
      else()
        if (  ( NOT ( ( JLN_FLAGS_STL_HARDENING STREQUAL "fast" OR JLN_FLAGS_STL_HARDENING STREQUAL "extensive" ) ) AND  NOT ( JLN_FLAGS_STL_HARDENING STREQUAL "debug" ) ) )
          list(APPEND CXX_FLAGS  "/D_DEBUG")
        endif()
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_STL_FIX STREQUAL "default" ) )
      if (  JLN_FLAGS_STL_FIX STREQUAL "on" )
        list(APPEND CXX_FLAGS  "/DNOMINMAX")
      endif()
    endif()
    if (   NOT ( JLN_ICL_C_COMPILER ) )
      if (   NOT ( JLN_FLAGS_SYMBOLS STREQUAL "default" ) )
        if (  JLN_FLAGS_SYMBOLS STREQUAL "nodebug" )
          list(APPEND LINK_FLAGS  "/DEBUG:NONE")
        else()
          if (  ( JLN_FLAGS_SYMBOLS STREQUAL "debug" OR JLN_FLAGS_SYMBOLS STREQUAL "minimal_debug" OR JLN_FLAGS_SYMBOLS STREQUAL "full_debug" OR JLN_FLAGS_SYMBOLS STREQUAL "codeview" ) )
            list(APPEND CXX_FLAGS  "/Zi")
            list(APPEND LINK_FLAGS  "/DEBUG:FULL")
          else()
            if (  JLN_CLANG_CL_C_COMPILER )
              if (  JLN_FLAGS_SYMBOLS STREQUAL "dwarf" )
                list(APPEND LINK_FLAGS  "-gdwarf")
              endif()
            endif()
          endif()
        endif()
      endif()
      if (   NOT ( JLN_FLAGS_OPTIMIZATION STREQUAL "default" ) )
        if (  JLN_FLAGS_OPTIMIZATION STREQUAL "0" )
          list(APPEND CXX_FLAGS  "/Od")
        else()
          if (  JLN_FLAGS_OPTIMIZATION STREQUAL "g" )
            list(APPEND CXX_FLAGS  "/Ob1")
          else()
            if (  JLN_FLAGS_OPTIMIZATION STREQUAL "2" )
              list(APPEND CXX_FLAGS  "/O2")
            else()
              if (  ( JLN_FLAGS_OPTIMIZATION STREQUAL "1" OR JLN_FLAGS_OPTIMIZATION STREQUAL "size" ) )
                list(APPEND CXX_FLAGS  "/O1")
              else()
                if (  JLN_FLAGS_OPTIMIZATION STREQUAL "z" )
                  list(APPEND CXX_FLAGS  "/O1" "/Gw")
                else()
                  if (  JLN_FLAGS_OPTIMIZATION STREQUAL "fast" )
                    list(APPEND CXX_FLAGS  "/fp:fast")
                  endif()
                  list(APPEND CXX_FLAGS  "/O2")
                  if (  ( ( JLN_MSVC_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.20" ) OR JLN_CLANG_CL_C_COMPILER ) )
                    list(APPEND CXX_FLAGS  "/Ob3")
                  endif()
                  list(APPEND CXX_FLAGS  "/Gw")
                endif()
              endif()
            endif()
          endif()
        endif()
      endif()
      if (   NOT ( JLN_FLAGS_HARDENED STREQUAL "default" ) )
        if (  JLN_FLAGS_HARDENED STREQUAL "off" )
          list(APPEND CXX_FLAGS  "/GS-")
        else()
          list(APPEND CXX_FLAGS  "/sdl" "/guard:cf")
          if (  ( ( JLN_MSVC_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.27" ) OR ( JLN_CLANG_CL_C_COMPILER AND JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "10.0" ) ) )
            list(APPEND CXX_FLAGS  "/guard:ehcont")
            list(APPEND LINK_FLAGS  "/CETCOMPAT")
          endif()
        endif()
      endif()
    endif()
  endif()
  if (  JLN_MSVC_C_COMPILER )
    if (   NOT ( JLN_FLAGS_ANALYZER STREQUAL "default" ) )
      if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.0" )
        if (  JLN_FLAGS_ANALYZER STREQUAL "off" )
          list(APPEND CXX_FLAGS  "/analyze-")
        else()
          list(APPEND CXX_FLAGS  "/analyze")
          if (   NOT ( JLN_FLAGS_ANALYZER STREQUAL "with_external_headers" ) )
            if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "16.10" )
              list(APPEND CXX_FLAGS  "/analyze:external-")
            endif()
          endif()
        endif()
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_WINDOWS_BIGOBJ STREQUAL "default" ) )
      list(APPEND CXX_FLAGS  "/bigobj")
    endif()
    if (   NOT ( JLN_FLAGS_MSVC_CRT_SECURE_NO_WARNINGS STREQUAL "default" ) )
      if (  JLN_FLAGS_MSVC_CRT_SECURE_NO_WARNINGS STREQUAL "on" )
        list(APPEND CXX_FLAGS  "/D_CRT_SECURE_NO_WARNINGS=1")
      else()
        if (  JLN_FLAGS_MSVC_CRT_SECURE_NO_WARNINGS STREQUAL "off" )
          list(APPEND CXX_FLAGS  "/U_CRT_SECURE_NO_WARNINGS")
        endif()
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_MSVC_DIAGNOSTICS_FORMAT STREQUAL "default" ) )
      if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.10" )
        if (  JLN_FLAGS_MSVC_DIAGNOSTICS_FORMAT STREQUAL "classic" )
          list(APPEND CXX_FLAGS  "/diagnostics:classic")
        else()
          if (  JLN_FLAGS_MSVC_DIAGNOSTICS_FORMAT STREQUAL "column" )
            list(APPEND CXX_FLAGS  "/diagnostics:column")
          else()
            list(APPEND CXX_FLAGS  "/diagnostics:caret")
          endif()
        endif()
      endif()
    endif()
    if (  JLN_C_COMPILER_VERSION VERSION_LESS "19.13" )
      set(JLN_FLAGS_MSVC_ISYSTEM "default")
    endif()
    if (   NOT ( JLN_FLAGS_MSVC_ISYSTEM STREQUAL "default" ) )
      if (  JLN_FLAGS_MSVC_ISYSTEM STREQUAL "external_as_include_system_flag" )
        if (  JLN_C_COMPILER_VERSION VERSION_LESS "19.29" )
          set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /external:env:INCLUDE /external:W0 /experimental:external " CACHE INTERNAL "")
          set(CMAKE_INCLUDE_SYSTEM_FLAG_C "/external:I " CACHE INTERNAL "")
        else()
          set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /external:env:INCLUDE /external:W0 " CACHE INTERNAL "")
          set(CMAKE_INCLUDE_SYSTEM_FLAG_C "/external:I " CACHE INTERNAL "")
        endif()
      else()
        if (   NOT ( JLN_FLAGS_MSVC_ISYSTEM STREQUAL "assumed" ) )
          if (  JLN_C_COMPILER_VERSION VERSION_LESS "19.29" )
            list(APPEND CXX_FLAGS  "/experimental:external")
          endif()
          list(APPEND CXX_FLAGS  "/external:W0")
          if (  JLN_FLAGS_MSVC_ISYSTEM STREQUAL "anglebrackets" )
            list(APPEND CXX_FLAGS  "/external:anglebrackets")
          else()
            list(APPEND CXX_FLAGS  "/external:env:INCLUDE" "/external:env:CAExcludePath")
          endif()
        endif()
      endif()
      if (   NOT ( JLN_FLAGS_MSVC_ISYSTEM_WITH_TEMPLATE_INSTANTIATIONS_TREATED_AS_NON_EXTERNAL STREQUAL "default" ) )
        if (  JLN_FLAGS_MSVC_ISYSTEM_WITH_TEMPLATE_INSTANTIATIONS_TREATED_AS_NON_EXTERNAL STREQUAL "off" )
          list(APPEND CXX_FLAGS  "/external:templates")
        else()
          list(APPEND CXX_FLAGS  "/external:templates-")
        endif()
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_WARNINGS STREQUAL "default" ) )
      if (  JLN_FLAGS_WARNINGS STREQUAL "off" )
        list(APPEND CXX_FLAGS  "/W0")
      else()
        if (  JLN_FLAGS_WARNINGS STREQUAL "essential" )
          list(APPEND CXX_FLAGS  "/W4" "/wd4711")
        else()
          if (  JLN_FLAGS_WARNINGS STREQUAL "on" )
            list(APPEND CXX_FLAGS  "/W4" "/wd4711" "/w14296" "/w14444" "/w14555" "/w14557" "/w14905" "/w14906" "/w14917" "/w14545" "/w14546" "/w14547" "/w14548" "/w14549")
            if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.0" )
              list(APPEND CXX_FLAGS  "/w14426")
              if (  JLN_FLAGS_MSVC_ISYSTEM STREQUAL "default" )
                list(APPEND CXX_FLAGS  "/w14654")
              endif()
              list(APPEND CXX_FLAGS  "/w15031" "/w15032")
              if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.11" )
                if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.15" )
                  if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.22" )
                    if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.25" )
                      if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.29" )
                        list(APPEND CXX_FLAGS  "/w15240")
                        if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.30" )
                          list(APPEND CXX_FLAGS  "/w15249")
                          if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.32" )
                            list(APPEND CXX_FLAGS  "/w15258")
                            if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.34" )
                              if (  JLN_FLAGS_MSVC_ISYSTEM STREQUAL "default" )
                                list(APPEND CXX_FLAGS  "/w15262")
                              endif()
                            endif()
                          endif()
                        endif()
                      endif()
                    endif()
                  endif()
                endif()
              endif()
            endif()
          else()
            list(APPEND CXX_FLAGS  "/Wall" "/wd4370" "/wd4371" "/wd4514" "/wd4571" "/wd4577" "/wd4686" "/wd4710" "/wd4711" "/wd4820" "/wd4866")
            if (  JLN_FLAGS_MSVC_ISYSTEM STREQUAL "default" )
              list(APPEND CXX_FLAGS  "/wd4464" "/wd4548" "/wd4668")
              if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.0" )
                if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.34" )
                  list(APPEND CXX_FLAGS  "/wd5262")
                  if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.0" )
                    list(APPEND CXX_FLAGS  "/wd4774")
                  endif()
                endif()
              endif()
            endif()
            if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "16.0" )
              list(APPEND CXX_FLAGS  "/wd4800")
              if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.39" )
                list(APPEND CXX_FLAGS  "/wd4975")
                if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.40" )
                  list(APPEND CXX_FLAGS  "/wd4860" "/wd4861" "/wd5273" "/wd5274")
                  if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.41" )
                    list(APPEND CXX_FLAGS  "/wd5306")
                    if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.43" )
                      list(APPEND CXX_FLAGS  "/wd5277")
                    endif()
                  endif()
                endif()
              endif()
            endif()
          endif()
        endif()
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_CONVERSION_WARNINGS STREQUAL "default" ) )
      if (  ( JLN_FLAGS_CONVERSION_WARNINGS STREQUAL "off" OR JLN_FLAGS_CONVERSION_WARNINGS STREQUAL "sign" ) )
        list(APPEND CXX_FLAGS  "/wd4244" "/wd4245" "/wd4365")
      else()
        list(APPEND CXX_FLAGS  "/w14244" "/w14245" "/w14365")
      endif()
      if (  ( JLN_FLAGS_CONVERSION_WARNINGS STREQUAL "on" OR JLN_FLAGS_CONVERSION_WARNINGS STREQUAL "all" OR JLN_FLAGS_CONVERSION_WARNINGS STREQUAL "sign" ) )
        list(APPEND CXX_FLAGS  "/w14018" "/w14388" "/w14289")
      else()
        list(APPEND CXX_FLAGS  "/wd4018" "/wd4388" "/wd4289")
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_SWITCH_WARNINGS STREQUAL "default" ) )
      if (  ( JLN_FLAGS_SWITCH_WARNINGS STREQUAL "on" OR JLN_FLAGS_SWITCH_WARNINGS STREQUAL "mandatory_default" ) )
        list(APPEND CXX_FLAGS  "/wd4061" "/w14062")
      else()
        if (  ( JLN_FLAGS_SWITCH_WARNINGS STREQUAL "exhaustive_enum" OR JLN_FLAGS_SWITCH_WARNINGS STREQUAL "exhaustive_enum_and_mandatory_default" ) )
          list(APPEND CXX_FLAGS  "/w14061" "/w14062")
        else()
          list(APPEND CXX_FLAGS  "/wd4061" "/wd4062")
        endif()
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_SHADOW_WARNINGS STREQUAL "default" ) )
      if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.0" )
        if (  JLN_FLAGS_SHADOW_WARNINGS STREQUAL "off" )
          list(APPEND CXX_FLAGS  "/wd4456" "/wd4459")
        else()
          if (  ( JLN_FLAGS_SHADOW_WARNINGS STREQUAL "on" OR JLN_FLAGS_SHADOW_WARNINGS STREQUAL "all" ) )
            list(APPEND CXX_FLAGS  "/w14456" "/w14459")
          else()
            if (  JLN_FLAGS_SHADOW_WARNINGS STREQUAL "local" )
              list(APPEND CXX_FLAGS  "/w4456" "/wd4459")
            endif()
          endif()
        endif()
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_WARNINGS_AS_ERROR STREQUAL "default" ) )
      if (  JLN_FLAGS_WARNINGS_AS_ERROR STREQUAL "on" )
        list(APPEND CXX_FLAGS  "/WX")
      else()
        if (  JLN_FLAGS_WARNINGS_AS_ERROR STREQUAL "off" )
          list(APPEND CXX_FLAGS  "/WX-")
        else()
          list(APPEND CXX_FLAGS  "/we4716" "/we2124")
        endif()
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_PEDANTIC STREQUAL "default" ) )
      if (   NOT ( JLN_FLAGS_PEDANTIC STREQUAL "off" ) )
        list(APPEND CXX_FLAGS  "/permissive-" "/Zc:inline")
        if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.13" )
          if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.14" )
            if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.25" )
              list(APPEND CXX_FLAGS  "/Zc:preprocessor")
            endif()
          endif()
        endif()
        if (  JLN_FLAGS_PEDANTIC STREQUAL "as_error" )
          list(APPEND CXX_FLAGS  "/we4608")
          if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.31" )
            if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.38" )
              list(APPEND CXX_FLAGS  "/we5110")
            endif()
          endif()
        else()
          list(APPEND CXX_FLAGS  "/w14608")
          if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.31" )
            if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.38" )
              list(APPEND CXX_FLAGS  "/w15110")
            endif()
          endif()
        endif()
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_LTO STREQUAL "default" ) )
      if (  JLN_FLAGS_LTO STREQUAL "off" )
        list(APPEND CXX_FLAGS  "/GL-")
      else()
        if (   NOT ( JLN_FLAGS_LTO STREQUAL "thin_or_nothing" ) )
          list(APPEND CXX_FLAGS  "/GL" "/Gw")
          list(APPEND LINK_FLAGS  "/LTCG")
        endif()
      endif()
    endif()
    if (   NOT ( JLN_FLAGS_SANITIZERS STREQUAL "default" ) )
      if (  JLN_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.28" )
        if (  ( JLN_FLAGS_SANITIZERS STREQUAL "on" OR JLN_FLAGS_SANITIZERS STREQUAL "with_minimal_code_size" OR JLN_FLAGS_SANITIZERS STREQUAL "extra" OR JLN_FLAGS_SANITIZERS STREQUAL "extra_with_minimal_code_size" OR JLN_FLAGS_SANITIZERS STREQUAL "address" OR JLN_FLAGS_SANITIZERS STREQUAL "address_with_minimal_code_size" ) )
          list(APPEND CXX_FLAGS  "/fsanitize=address")
          list(APPEND LINK_FLAGS  "/fsanitize=address")
          if (  ( JLN_FLAGS_SANITIZERS STREQUAL "extra" OR JLN_FLAGS_SANITIZERS STREQUAL "extra_with_minimal_code_size" ) )
            list(APPEND CXX_FLAGS  "/fsanitize-address-use-after-return")
          endif()
        endif()
      else()
        if (  ( JLN_FLAGS_SANITIZERS STREQUAL "on" OR JLN_FLAGS_SANITIZERS STREQUAL "with_minimal_code_size" OR JLN_FLAGS_SANITIZERS STREQUAL "extra" OR JLN_FLAGS_SANITIZERS STREQUAL "extra_with_minimal_code_size" OR JLN_FLAGS_SANITIZERS STREQUAL "address" OR JLN_FLAGS_SANITIZERS STREQUAL "address_with_minimal_code_size" ) )
          list(APPEND CXX_FLAGS  "/sdl")
          if (  ( JLN_FLAGS_OPTIMIZATION STREQUAL "0" ) )
            list(APPEND CXX_FLAGS  "/RTCsu")
          endif()
        else()
          if (  JLN_FLAGS_SANITIZERS STREQUAL "off" )
            if (  JLN_FLAGS_HARDENED STREQUAL "default" )
              list(APPEND CXX_FLAGS  "/sdl-")
            endif()
          endif()
        endif()
      endif()
    endif()
  else()
    if (  JLN_CLANG_CL_C_COMPILER )
      if (   NOT ( JLN_FLAGS_PEDANTIC STREQUAL "default" ) )
        if (   NOT ( JLN_FLAGS_PEDANTIC STREQUAL "off" ) )
          if (  JLN_FLAGS_PEDANTIC STREQUAL "as_error" )
            list(APPEND CXX_FLAGS  "-Werror=write-strings")
          endif()
        endif()
      endif()
      if (   NOT ( JLN_FLAGS_COLOR STREQUAL "default" ) )
        if (  JLN_FLAGS_COLOR STREQUAL "never" )
          list(APPEND CXX_FLAGS  "-fno-color-diagnostics")
        else()
          if (  JLN_FLAGS_COLOR STREQUAL "always" )
            list(APPEND CXX_FLAGS  "-fcolor-diagnostics")
          endif()
        endif()
      endif()
      if (   NOT ( JLN_FLAGS_DIAGNOSTICS_FORMAT STREQUAL "default" ) )
        if (  JLN_FLAGS_DIAGNOSTICS_FORMAT STREQUAL "fixits" )
          list(APPEND CXX_FLAGS  "-fdiagnostics-parseable-fixits")
        endif()
      endif()
      if (   NOT ( JLN_FLAGS_CPU STREQUAL "default" ) )
        if (  JLN_FLAGS_CPU STREQUAL "generic" )
          list(APPEND CXX_FLAGS  "-mtune=generic")
          list(APPEND LINK_FLAGS  "-mtune=generic")
        else()
          list(APPEND CXX_FLAGS  "-march=native" "-mtune=native")
          list(APPEND LINK_FLAGS  "-march=native" "-mtune=native")
        endif()
      endif()
      if (   NOT ( JLN_FLAGS_LINKER STREQUAL "default" ) )
        if (  ( JLN_FLAGS_LINKER STREQUAL "lld" OR JLN_FLAGS_LINKER STREQUAL "native" ) )
          list(APPEND LINK_FLAGS  "-fuse-ld=lld")
        else()
          if (  JLN_FLAGS_LINKER STREQUAL "mold" )
            list(APPEND LINK_FLAGS  "-fuse-ld=mold")
          endif()
        endif()
      endif()
    else()
      if (  JLN_ICL_C_COMPILER )
        if (   NOT ( JLN_FLAGS_WARNINGS STREQUAL "default" ) )
          if (  JLN_FLAGS_WARNINGS STREQUAL "off" )
            list(APPEND CXX_FLAGS  "/w")
          else()
            list(APPEND CXX_FLAGS  "/W2" "/Qdiag-disable:1418,2259")
          endif()
        endif()
        if (   NOT ( JLN_FLAGS_WARNINGS_AS_ERROR STREQUAL "default" ) )
          if (  JLN_FLAGS_WARNINGS_AS_ERROR STREQUAL "on" )
            list(APPEND CXX_FLAGS  "/WX")
          else()
            if (  JLN_FLAGS_WARNINGS_AS_ERROR STREQUAL "basic" )
              list(APPEND CXX_FLAGS  "/Qdiag-error:1079,39,109")
            endif()
          endif()
        endif()
        if (   NOT ( JLN_FLAGS_WINDOWS_BIGOBJ STREQUAL "default" ) )
          list(APPEND CXX_FLAGS  "/bigobj")
        endif()
        if (   NOT ( JLN_FLAGS_SYMBOLS STREQUAL "default" ) )
          if (  JLN_FLAGS_SYMBOLS STREQUAL "nodebug" )
            list(APPEND CXX_FLAGS  "/debug:none")
          else()
            if (  JLN_FLAGS_SYMBOLS STREQUAL "minimal_debug" )
              list(APPEND CXX_FLAGS  "/debug:minimal")
            else()
              if (  ( JLN_FLAGS_SYMBOLS STREQUAL "debug" OR JLN_FLAGS_SYMBOLS STREQUAL "full_debug" OR JLN_FLAGS_SYMBOLS STREQUAL "codeview" ) )
                list(APPEND CXX_FLAGS  "/debug:full")
              endif()
            endif()
          endif()
        endif()
        if (   NOT ( JLN_FLAGS_OPTIMIZATION STREQUAL "default" ) )
          if (  JLN_FLAGS_OPTIMIZATION STREQUAL "0" )
            list(APPEND CXX_FLAGS  "/Ob0")
          else()
            if (  JLN_FLAGS_OPTIMIZATION STREQUAL "g" )
              list(APPEND CXX_FLAGS  "/Ob1")
            else()
              list(APPEND CXX_FLAGS  "/GF")
              if (  JLN_FLAGS_OPTIMIZATION STREQUAL "1" )
                list(APPEND CXX_FLAGS  "/O1")
              else()
                if (  JLN_FLAGS_OPTIMIZATION STREQUAL "2" )
                  list(APPEND CXX_FLAGS  "/O2")
                else()
                  if (  JLN_FLAGS_OPTIMIZATION STREQUAL "3" )
                    list(APPEND CXX_FLAGS  "/O2")
                  else()
                    if (  JLN_FLAGS_OPTIMIZATION STREQUAL "z" )
                      list(APPEND CXX_FLAGS  "/O3")
                    else()
                      if (  JLN_FLAGS_OPTIMIZATION STREQUAL "size" )
                        list(APPEND CXX_FLAGS  "/Os")
                      else()
                        list(APPEND CXX_FLAGS  "/fast")
                      endif()
                    endif()
                  endif()
                endif()
              endif()
            endif()
          endif()
        endif()
        if (   NOT ( JLN_FLAGS_HARDENED STREQUAL "default" ) )
          if (  JLN_FLAGS_HARDENED STREQUAL "off" )
            list(APPEND CXX_FLAGS  "/GS-")
          else()
            list(APPEND CXX_FLAGS  "/GS" "/guard:cf" "/mconditional-branch:all-fix" "/Qcf-protection:full")
          endif()
        endif()
        if (   NOT ( JLN_FLAGS_SANITIZERS STREQUAL "default" ) )
          if (  ( JLN_FLAGS_SANITIZERS STREQUAL "on" OR JLN_FLAGS_SANITIZERS STREQUAL "with_minimal_code_size" OR JLN_FLAGS_SANITIZERS STREQUAL "extra" OR JLN_FLAGS_SANITIZERS STREQUAL "extra_with_minimal_code_size" OR JLN_FLAGS_SANITIZERS STREQUAL "address" OR JLN_FLAGS_SANITIZERS STREQUAL "address_with_minimal_code_size" ) )
            list(APPEND CXX_FLAGS  "/Qtrapuv" "/RTCsu")
            if (  ( JLN_FLAGS_SANITIZERS STREQUAL "on" OR JLN_FLAGS_SANITIZERS STREQUAL "with_minimal_code_size" OR JLN_FLAGS_SANITIZERS STREQUAL "extra" OR JLN_FLAGS_SANITIZERS STREQUAL "extra_with_minimal_code_size" ) )
              list(APPEND CXX_FLAGS  "/Qfp-stack-check" "/Qfp-trap:common")
            endif()
          endif()
        endif()
        if (   NOT ( JLN_FLAGS_CPU STREQUAL "default" ) )
          if (  JLN_FLAGS_CPU STREQUAL "generic" )
            list(APPEND CXX_FLAGS  "/Qtune:generic")
            list(APPEND LINK_FLAGS  "/Qtune:generic")
          else()
            list(APPEND CXX_FLAGS  "/QxHost")
            list(APPEND LINK_FLAGS  "/QxHost")
          endif()
        endif()
      else()
        if (  JLN_ICC_C_COMPILER )
          if (   NOT ( JLN_FLAGS_WARNINGS STREQUAL "default" ) )
            if (  JLN_FLAGS_WARNINGS STREQUAL "off" )
              list(APPEND CXX_FLAGS  "-w")
            else()
              if (  JLN_FLAGS_WARNINGS STREQUAL "essential" )
                list(APPEND CXX_FLAGS  "-Wall")
              else()
                list(APPEND CXX_FLAGS  "-Wall" "-Warray-bounds" "-Wcast-qual" "-Wchar-subscripts" "-Wdisabled-optimization" "-Wenum-compare" "-Wextra" "-Wfloat-equal" "-Wformat-security" "-Wformat=2" "-Winit-self" "-Winvalid-pch" "-Wmaybe-uninitialized" "-Wmissing-include-dirs" "-Wnarrowing" "-Wnonnull" "-Wpointer-sign" "-Wreorder" "-Wsequence-point" "-Wtrigraphs" "-Wundef" "-Wunused-function" "-Wunused-but-set-variable" "-Wunused-variable" "-Wpointer-arith" "-Wold-style-definition" "-Wstrict-prototypes" "-Wwrite-strings")
              endif()
            endif()
          endif()
          if (   NOT ( JLN_FLAGS_SWITCH_WARNINGS STREQUAL "default" ) )
            if (  ( JLN_FLAGS_SWITCH_WARNINGS STREQUAL "on" OR JLN_FLAGS_SWITCH_WARNINGS STREQUAL "exhaustive_enum" ) )
              list(APPEND CXX_FLAGS  "-Wswitch-enum")
            else()
              if (  JLN_FLAGS_SWITCH_WARNINGS STREQUAL "mandatory_default" )
                list(APPEND CXX_FLAGS  "-Wswitch-default")
              else()
                if (  JLN_FLAGS_SWITCH_WARNINGS STREQUAL "exhaustive_enum_and_mandatory_default" )
                  list(APPEND CXX_FLAGS  "-Wswitch")
                else()
                  list(APPEND CXX_FLAGS  "-Wno-switch")
                endif()
              endif()
            endif()
          endif()
          if (   NOT ( JLN_FLAGS_WARNINGS_AS_ERROR STREQUAL "default" ) )
            if (  JLN_FLAGS_WARNINGS_AS_ERROR STREQUAL "on" )
              list(APPEND CXX_FLAGS  "-Werror")
            else()
              if (  JLN_FLAGS_WARNINGS_AS_ERROR STREQUAL "basic" )
                list(APPEND CXX_FLAGS  "-diag-error=1079,39,109")
              endif()
            endif()
          endif()
          if (   NOT ( JLN_FLAGS_PEDANTIC STREQUAL "default" ) )
            if (  JLN_FLAGS_PEDANTIC STREQUAL "off" )
              list(APPEND CXX_FLAGS  "-fgnu-keywords")
            else()
              list(APPEND CXX_FLAGS  "-fno-gnu-keywords" "/Zc:inline" "/Zc:strictStrings" "/Zc:throwingNew")
            endif()
          endif()
          if (   NOT ( JLN_FLAGS_SHADOW_WARNINGS STREQUAL "default" ) )
            if (  JLN_FLAGS_SHADOW_WARNINGS STREQUAL "off" )
              list(APPEND CXX_FLAGS  "-Wno-shadow")
            else()
              if (  ( JLN_FLAGS_SHADOW_WARNINGS STREQUAL "on" OR JLN_FLAGS_SHADOW_WARNINGS STREQUAL "all" ) )
                list(APPEND CXX_FLAGS  "-Wshadow")
              endif()
            endif()
          endif()
          if (   NOT ( JLN_FLAGS_SYMBOLS STREQUAL "default" ) )
            if (  JLN_FLAGS_SYMBOLS STREQUAL "nodebug" )
              list(APPEND CXX_FLAGS  "-g0")
            else()
              if (  JLN_FLAGS_SYMBOLS STREQUAL "hidden" )
                list(APPEND CXX_FLAGS  "-fvisibility=hidden")
              else()
                if (  JLN_FLAGS_SYMBOLS STREQUAL "debug" )
                  list(APPEND CXX_FLAGS  "-g")
                else()
                  if (  JLN_FLAGS_SYMBOLS STREQUAL "minimal_debug" )
                    list(APPEND CXX_FLAGS  "-g1")
                  else()
                    if (  JLN_FLAGS_SYMBOLS STREQUAL "full_debug" )
                      list(APPEND CXX_FLAGS  "-g3")
                    endif()
                  endif()
                endif()
              endif()
            endif()
          endif()
          if (   NOT ( JLN_FLAGS_OPTIMIZATION STREQUAL "default" ) )
            if (  JLN_FLAGS_OPTIMIZATION STREQUAL "0" )
              list(APPEND CXX_FLAGS  "-O0")
            else()
              if (  JLN_FLAGS_OPTIMIZATION STREQUAL "g" )
                list(APPEND CXX_FLAGS  "-O1")
              else()
                if (  JLN_FLAGS_OPTIMIZATION STREQUAL "1" )
                  list(APPEND CXX_FLAGS  "-O1")
                else()
                  if (  JLN_FLAGS_OPTIMIZATION STREQUAL "2" )
                    list(APPEND CXX_FLAGS  "-O2")
                  else()
                    if (  JLN_FLAGS_OPTIMIZATION STREQUAL "3" )
                      list(APPEND CXX_FLAGS  "-O3")
                    else()
                      if (  JLN_FLAGS_OPTIMIZATION STREQUAL "z" )
                        list(APPEND CXX_FLAGS  "-fast")
                      else()
                        if (  JLN_FLAGS_OPTIMIZATION STREQUAL "size" )
                          list(APPEND CXX_FLAGS  "-Os")
                        else()
                          list(APPEND CXX_FLAGS  "-Ofast")
                        endif()
                      endif()
                    endif()
                  endif()
                endif()
              endif()
            endif()
          endif()
          if (   NOT ( JLN_FLAGS_HARDENED STREQUAL "default" ) )
            if (  ( JLN_FLAGS_HARDENED STREQUAL "on" OR JLN_FLAGS_HARDENED STREQUAL "all" ) )
              list(APPEND CXX_FLAGS  "-D_FORTIFY_SOURCE=2")
              if (  JLN_FLAGS_HARDENED STREQUAL "all" )
                list(APPEND CXX_FLAGS  "-fstack-protector-all")
              else()
                list(APPEND CXX_FLAGS  "-fstack-protector-strong")
              endif()
              list(APPEND CXX_FLAGS  "-fcf-protection=full")
              list(APPEND LINK_FLAGS  "-Xlinker-zrelro" "-Xlinker-znow" "-Xlinker-znoexecstack")
            endif()
          endif()
          if (   NOT ( JLN_FLAGS_SANITIZERS STREQUAL "default" ) )
            if (  ( JLN_FLAGS_SANITIZERS STREQUAL "on" OR JLN_FLAGS_SANITIZERS STREQUAL "with_minimal_code_size" OR JLN_FLAGS_SANITIZERS STREQUAL "extra" OR JLN_FLAGS_SANITIZERS STREQUAL "extra_with_minimal_code_size" OR JLN_FLAGS_SANITIZERS STREQUAL "address" OR JLN_FLAGS_SANITIZERS STREQUAL "address_with_minimal_code_size" ) )
              list(APPEND CXX_FLAGS  "-ftrapuv")
              if (  ( JLN_FLAGS_SANITIZERS STREQUAL "on" OR JLN_FLAGS_SANITIZERS STREQUAL "with_minimal_code_size" OR JLN_FLAGS_SANITIZERS STREQUAL "extra" OR JLN_FLAGS_SANITIZERS STREQUAL "extra_with_minimal_code_size" ) )
                list(APPEND CXX_FLAGS  "-fp-stack-check" "-fp-trap=common")
              endif()
            endif()
          endif()
          if (   NOT ( JLN_FLAGS_LINKER STREQUAL "default" ) )
            if (  JLN_FLAGS_LINKER STREQUAL "bfd" )
              list(APPEND LINK_FLAGS  "-fuse-ld=bfd")
            else()
              if (  JLN_FLAGS_LINKER STREQUAL "gold" )
                list(APPEND LINK_FLAGS  "-fuse-ld=gold")
              else()
                if (  JLN_FLAGS_LINKER STREQUAL "mold" )
                  list(APPEND LINK_FLAGS  "-fuse-ld=mold")
                else()
                  list(APPEND LINK_FLAGS  "-fuse-ld=lld")
                endif()
              endif()
            endif()
          endif()
          if (   NOT ( JLN_FLAGS_LTO STREQUAL "default" ) )
            if (  JLN_FLAGS_LTO STREQUAL "off" )
              list(APPEND CXX_FLAGS  "-no-ipo")
              list(APPEND LINK_FLAGS  "-no-ipo")
            else()
              if (   NOT ( JLN_FLAGS_LTO STREQUAL "thin_or_nothing" ) )
                list(APPEND CXX_FLAGS  "-ipo")
                list(APPEND LINK_FLAGS  "-ipo")
              endif()
            endif()
          endif()
          if (   NOT ( JLN_FLAGS_EXCEPTIONS STREQUAL "default" ) )
            if (  JLN_FLAGS_EXCEPTIONS STREQUAL "on" )
              list(APPEND CXX_FLAGS  "-fexceptions")
            else()
              list(APPEND CXX_FLAGS  "-fno-exceptions")
            endif()
          endif()
          if (   NOT ( JLN_FLAGS_CPU STREQUAL "default" ) )
            if (  JLN_FLAGS_CPU STREQUAL "generic" )
              list(APPEND CXX_FLAGS  "-mtune=generic")
              list(APPEND LINK_FLAGS  "-mtune=generic")
            else()
              list(APPEND CXX_FLAGS  "-xHost")
              list(APPEND LINK_FLAGS  "-xHost")
            endif()
          endif()
        else()
          if (  MINGW )
            if (   NOT ( JLN_FLAGS_WINDOWS_BIGOBJ STREQUAL "default" ) )
              list(APPEND CXX_FLAGS  "-Wa,-mbig-obj")
            endif()
          endif()
        endif()
      endif()
    endif()
  endif()
  if(JLN_FLAGS_C_VAR)
    set(${JLN_FLAGS_C_VAR} ${CXX_FLAGS} PARENT_SCOPE)
  endif()
  if(JLN_FLAGS_LINK_VAR)
    set(${JLN_FLAGS_LINK_VAR} ${LINK_FLAGS} PARENT_SCOPE)
  endif()
endfunction()
