-- File generated with https://github.com/jonathanpoelen/cpp-compiler-options

local _jln_extraopt_flag_names = {
  ["jln-cxx"] = true,
  ["cxx"] = true,
  ["jln-cxx-version"] = true,
  ["cxx_version"] = true,
  ["jln-ld"] = true,
  ["ld"] = true,
}

local _jln_flag_names = {
  ["jln-analyzer"] = true,
  ["analyzer"] = true,
  ["jln-analyzer-too-complex-warning"] = true,
  ["analyzer_too_complex_warning"] = true,
  ["jln-analyzer-verbosity"] = true,
  ["analyzer_verbosity"] = true,
  ["jln-color"] = true,
  ["color"] = true,
  ["jln-conversion-warnings"] = true,
  ["conversion_warnings"] = true,
  ["jln-coverage"] = true,
  ["coverage"] = true,
  ["jln-covered-switch-default-warnings"] = true,
  ["covered_switch_default_warnings"] = true,
  ["jln-cpu"] = true,
  ["cpu"] = true,
  ["jln-diagnostics-format"] = true,
  ["diagnostics_format"] = true,
  ["jln-diagnostics-show-template"] = true,
  ["diagnostics_show_template"] = true,
  ["jln-emcc-debug"] = true,
  ["emcc_debug"] = true,
  ["jln-exceptions"] = true,
  ["exceptions"] = true,
  ["jln-hardened"] = true,
  ["hardened"] = true,
  ["jln-linker"] = true,
  ["linker"] = true,
  ["jln-lto"] = true,
  ["lto"] = true,
  ["jln-msvc-crt-secure-no-warnings"] = true,
  ["msvc_crt_secure_no_warnings"] = true,
  ["jln-msvc-diagnostics-format"] = true,
  ["msvc_diagnostics_format"] = true,
  ["jln-msvc-isystem"] = true,
  ["msvc_isystem"] = true,
  ["jln-msvc-isystem-with-template-instantiations-treated-as-non-external"] = true,
  ["msvc_isystem_with_template_instantiations_treated_as_non_external"] = true,
  ["jln-ndebug"] = true,
  ["ndebug"] = true,
  ["jln-noexcept-warnings"] = true,
  ["noexcept_warnings"] = true,
  ["jln-optimization"] = true,
  ["optimization"] = true,
  ["jln-optimization-warnings"] = true,
  ["optimization_warnings"] = true,
  ["jln-pedantic"] = true,
  ["pedantic"] = true,
  ["jln-reproducible-build-warnings"] = true,
  ["reproducible_build_warnings"] = true,
  ["jln-rtti"] = true,
  ["rtti"] = true,
  ["jln-sanitizers"] = true,
  ["sanitizers"] = true,
  ["jln-shadow-warnings"] = true,
  ["shadow_warnings"] = true,
  ["jln-stl-fix"] = true,
  ["stl_fix"] = true,
  ["jln-stl-hardening"] = true,
  ["stl_hardening"] = true,
  ["jln-suggest-attributes"] = true,
  ["suggest_attributes"] = true,
  ["jln-switch-warnings"] = true,
  ["switch_warnings"] = true,
  ["jln-symbols"] = true,
  ["symbols"] = true,
  ["jln-unsafe-buffer-usage-warnings"] = true,
  ["unsafe_buffer_usage_warnings"] = true,
  ["jln-var-init"] = true,
  ["var_init"] = true,
  ["jln-warnings"] = true,
  ["warnings"] = true,
  ["jln-warnings-as-error"] = true,
  ["warnings_as_error"] = true,
  ["jln-windows-abi-compatibility-warnings"] = true,
  ["windows_abi_compatibility_warnings"] = true,
  ["jln-windows-bigobj"] = true,
  ["windows_bigobj"] = true,
}

local _jln_check_flag_names = function(t)
  for k in pairs(t) do
    if not _jln_flag_names[k]
    and not _jln_extraopt_flag_names[k] then
      error("unknown '" .. k .. "' jln flag name")
    end
  end
end

function jln_newoptions(defaults)
  if defaults then
    _jln_check_flag_names(defaults)
  else
    defaults = {}
  end

  newoption{trigger="jln-analyzer", allowed={{'default'}, {'off'}, {'on', 'Enables an static analysis and ignore external headers with MSVC.'}, {'with_external_headers', 'Enables an static analysis.'}}, description="Enables an static analysis. It can have false positives and false negatives. It is a bug-finding tool, rather than a tool for proving program correctness. Available only with GCC and MSVC."}
  if not _OPTIONS["jln-analyzer"] then _OPTIONS["jln-analyzer"] = (defaults["analyzer"] or defaults["jln-analyzer"] or "default") end

  newoption{trigger="jln-analyzer-too-complex-warning", allowed={{'default'}, {'off'}, {'on'}}, description="By default, the analysis silently stops if the code is too complicated for the analyzer to fully explore and it reaches an internal limit. This option warns if this occurs. Available only with GCC."}
  if not _OPTIONS["jln-analyzer-too-complex-warning"] then _OPTIONS["jln-analyzer-too-complex-warning"] = (defaults["analyzer_too_complex_warning"] or defaults["jln-analyzer-too-complex-warning"] or "default") end

  newoption{trigger="jln-analyzer-verbosity", allowed={{'default'}, {'0', 'At this level, interprocedural call and return events are displayed, along with the most pertinent state-change events relating to a diagnostic. For example, for a double-free diagnostic, both calls to free will be shown.'}, {'1', 'As per the previous level, but also show events for the entry to each function.'}, {'2', 'As per the previous level, but also show events relating to control flow that are significant to triggering the issue (e.g. \"true path taken\" at a conditional). This level is the default.'}, {'3', 'As per the previous level, but show all control flow events, not just significant ones.'}}, description="Controls the complexity of the control flow paths that are emitted for analyzer diagnostics. Available only with GCC."}
  if not _OPTIONS["jln-analyzer-verbosity"] then _OPTIONS["jln-analyzer-verbosity"] = (defaults["analyzer_verbosity"] or defaults["jln-analyzer-verbosity"] or "default") end

  newoption{trigger="jln-color", allowed={{'default'}, {'auto'}, {'never'}, {'always'}}, description=""}
  if not _OPTIONS["jln-color"] then _OPTIONS["jln-color"] = (defaults["color"] or defaults["jln-color"] or "default") end

  newoption{trigger="jln-conversion-warnings", allowed={{'default'}, {'off'}, {'on', 'Combine conversion and sign value'}, {'sign', 'Warn for implicit conversions that may change the sign (the `unsigned_integer = signed_integer`) or a comparison between signed and unsigned values could produce an incorrect result when the signed value is converted to unsigned.'}, {'float', 'Warn for implicit conversions that reduce the precision of a real value.'}, {'conversion', 'Warn for implicit conversions that may alter a value.'}, {'all', 'Like conversion and also warn about implicit conversions from arithmetic operations even when conversion of the operands to the same type cannot change their values.'}}, description="Warn for implicit conversions that may alter a value."}
  if not _OPTIONS["jln-conversion-warnings"] then _OPTIONS["jln-conversion-warnings"] = (defaults["conversion_warnings"] or defaults["jln-conversion-warnings"] or "on") end

  newoption{trigger="jln-coverage", allowed={{'default'}, {'off'}, {'on'}}, description=""}
  if not _OPTIONS["jln-coverage"] then _OPTIONS["jln-coverage"] = (defaults["coverage"] or defaults["jln-coverage"] or "default") end

  newoption{trigger="jln-covered-switch-default-warnings", allowed={{'default'}, {'on'}, {'off'}}, description="Warning for default label in switch which covers all enumeration values."}
  if not _OPTIONS["jln-covered-switch-default-warnings"] then _OPTIONS["jln-covered-switch-default-warnings"] = (defaults["covered_switch_default_warnings"] or defaults["jln-covered-switch-default-warnings"] or "on") end

  newoption{trigger="jln-cpu", allowed={{'default'}, {'generic'}, {'native'}}, description=""}
  if not _OPTIONS["jln-cpu"] then _OPTIONS["jln-cpu"] = (defaults["cpu"] or defaults["jln-cpu"] or "default") end

  newoption{trigger="jln-diagnostics-format", allowed={{'default'}, {'fixits'}, {'patch'}, {'print_source_range_info'}}, description="Emit fix-it hints in a machine-parseable format."}
  if not _OPTIONS["jln-diagnostics-format"] then _OPTIONS["jln-diagnostics-format"] = (defaults["diagnostics_format"] or defaults["jln-diagnostics-format"] or "default") end

  newoption{trigger="jln-diagnostics-show-template", allowed={{'default'}, {'tree', 'Enables printing a tree-like structure showing the common and differing parts of the types'}, {'without_elided_types', 'Disables printing diagnostics showing common parts of template types as \"[...]\".'}, {'tree_without_elided_types', 'Prints a tree-like without replacing common types. Mergeing `tree` and `without_elided_types`.'}}, description="Configures how templates with incompatible types are displayed (Clang and GCC only)."}
  if not _OPTIONS["jln-diagnostics-show-template"] then _OPTIONS["jln-diagnostics-show-template"] = (defaults["diagnostics_show_template"] or defaults["jln-diagnostics-show-template"] or "default") end

  newoption{trigger="jln-emcc-debug", allowed={{'default'}, {'off', 'Disable checks used with default `-O0` optimization.'}, {'on', 'Activate some checks in addition to those used with default `-O0` optimization.'}, {'slow', 'Activate checks that can greatly slow down the program.'}}, description="Add checks with Emscripten compiler."}
  if not _OPTIONS["jln-emcc-debug"] then _OPTIONS["jln-emcc-debug"] = (defaults["emcc_debug"] or defaults["jln-emcc-debug"] or "default") end

  newoption{trigger="jln-exceptions", allowed={{'default'}, {'off'}, {'on'}}, description="Enable C++ exceptions."}
  if not _OPTIONS["jln-exceptions"] then _OPTIONS["jln-exceptions"] = (defaults["exceptions"] or defaults["jln-exceptions"] or "default") end

  newoption{trigger="jln-hardened", allowed={{'default'}, {'off', 'Use `/GS-` with MSVC-like compiler. Does nothing with other compilers.'}, {'on'}, {'all', 'Use -fstack-protector-all instead of -fstack-protector-strong'}}, description="Enable a set of flags for C and C++ that improve the security of the generated code without affecting its ABI. Can impact performance."}
  if not _OPTIONS["jln-hardened"] then _OPTIONS["jln-hardened"] = (defaults["hardened"] or defaults["jln-hardened"] or "default") end

  newoption{trigger="jln-linker", allowed={{'default'}, {'bfd'}, {'gold'}, {'lld'}, {'mold'}, {'native'}}, description="Configure linker."}
  if not _OPTIONS["jln-linker"] then _OPTIONS["jln-linker"] = (defaults["linker"] or defaults["jln-linker"] or "default") end

  newoption{trigger="jln-lto", allowed={{'default'}, {'off'}, {'on', 'Activates ThinLTO when available (Clang), otherwise FullLTO.'}, {'full', 'Activates FullLTO.'}, {'thin_or_nothing', 'Activates ThinLTO. Disable lto when not supported.'}, {'whole_program', 'Assume that the current compilation unit represents the whole program being compiled. This option should not be used to compile a library. When not supported by the compiler, ThinLTO or FullLTO are used.'}, {'whole_program_and_full_lto', 'Same as `whole_program`, but use FullLTO when not supported.'}}, description="Enable Link Time Optimization. Also known as interprocedural optimization (IPO)."}
  if not _OPTIONS["jln-lto"] then _OPTIONS["jln-lto"] = (defaults["lto"] or defaults["jln-lto"] or "default") end

  newoption{trigger="jln-msvc-crt-secure-no-warnings", allowed={{'default'}, {'off'}, {'on'}}, description="Disable CRT warnings with MSVC."}
  if not _OPTIONS["jln-msvc-crt-secure-no-warnings"] then _OPTIONS["jln-msvc-crt-secure-no-warnings"] = (defaults["msvc_crt_secure_no_warnings"] or defaults["jln-msvc-crt-secure-no-warnings"] or "on") end

  newoption{trigger="jln-msvc-diagnostics-format", allowed={{'default'}, {'classic', 'Which reports only the line number where the issue was found.'}, {'column', 'Includes the column where the issue was found. This can help you identify the specific language construct or character that is causing the issue.'}, {'caret', 'Includes the column where the issue was found and places a caret (^) under the location in the line of code where the issue was detected.'}}, description="Controls the display of error and warning information (https://learn.microsoft.com/en-us/cpp/build/reference/diagnostics-compiler-diagnostic-options)."}
  if not _OPTIONS["jln-msvc-diagnostics-format"] then _OPTIONS["jln-msvc-diagnostics-format"] = (defaults["msvc_diagnostics_format"] or defaults["jln-msvc-diagnostics-format"] or "caret") end

  newoption{trigger="jln-msvc-isystem", allowed={{'default'}, {'anglebrackets'}, {'include_and_caexcludepath'}, {'assumed'}}, description="Warnings concerning external header (https://devblogs.microsoft.com/cppblog/broken-warnings-theory)."}
  if not _OPTIONS["jln-msvc-isystem"] then _OPTIONS["jln-msvc-isystem"] = (defaults["msvc_isystem"] or defaults["jln-msvc-isystem"] or "default") end

  newoption{trigger="jln-msvc-isystem-with-template-instantiations-treated-as-non-external", allowed={{'default'}, {'off'}, {'on'}}, description="Allows warnings from external headers when they occur in a template that\'s instantiated in your code. (requires `msvc_isystem` option)."}
  if not _OPTIONS["jln-msvc-isystem-with-template-instantiations-treated-as-non-external"] then _OPTIONS["jln-msvc-isystem-with-template-instantiations-treated-as-non-external"] = (defaults["msvc_isystem_with_template_instantiations_treated_as_non_external"] or defaults["jln-msvc-isystem-with-template-instantiations-treated-as-non-external"] or "default") end

  newoption{trigger="jln-ndebug", allowed={{'default'}, {'off'}, {'on'}, {'with_optimization_1_or_above'}}, description="Enable `NDEBUG` macro (disable assert macro)."}
  if not _OPTIONS["jln-ndebug"] then _OPTIONS["jln-ndebug"] = (defaults["ndebug"] or defaults["jln-ndebug"] or "with_optimization_1_or_above") end

  newoption{trigger="jln-noexcept-warnings", allowed={{'default'}, {'off'}, {'on'}}, description="Warn when a noexcept-expression evaluates to false because of a call to a function that does not have a non-throwing exception specification (i.e. \"throw()\" or \"noexcept\") but is known by the compiler to never throw an exception. Only with GCC."}
  if not _OPTIONS["jln-noexcept-warnings"] then _OPTIONS["jln-noexcept-warnings"] = (defaults["noexcept_warnings"] or defaults["jln-noexcept-warnings"] or "default") end

  newoption{trigger="jln-optimization", allowed={{'default'}, {'0', 'Not optimize.'}, {'g', 'Enable debugging experience.'}, {'1', 'Optimize.'}, {'2', 'Optimize even more.'}, {'3', 'Optimize yet more.'}, {'fast', 'Enables all `optimization=3` and disregard strict standards compliance.'}, {'size', 'Optimize for size.'}, {'z', 'Optimize for size aggressively (/!\\ possible slow compilation with emcc).'}}, description="Optimization level."}
  if not _OPTIONS["jln-optimization"] then _OPTIONS["jln-optimization"] = (defaults["optimization"] or defaults["jln-optimization"] or "default") end

  newoption{trigger="jln-optimization-warnings", allowed={{'default'}, {'off'}, {'on'}}, description="Activate warnings about optimization."}
  if not _OPTIONS["jln-optimization-warnings"] then _OPTIONS["jln-optimization-warnings"] = (defaults["optimization_warnings"] or defaults["jln-optimization-warnings"] or "default") end

  newoption{trigger="jln-pedantic", allowed={{'default'}, {'off'}, {'on'}, {'as_error'}}, description="Issue all the warnings demanded by strict ISO C and ISO C++."}
  if not _OPTIONS["jln-pedantic"] then _OPTIONS["jln-pedantic"] = (defaults["pedantic"] or defaults["jln-pedantic"] or "on") end

  newoption{trigger="jln-reproducible-build-warnings", allowed={{'default'}, {'off'}, {'on'}}, description="Warn when macros \"__TIME__\", \"__DATE__\" or \"__TIMESTAMP__\" are encountered as they might prevent bit-wise-identical reproducible compilations."}
  if not _OPTIONS["jln-reproducible-build-warnings"] then _OPTIONS["jln-reproducible-build-warnings"] = (defaults["reproducible_build_warnings"] or defaults["jln-reproducible-build-warnings"] or "default") end

  newoption{trigger="jln-rtti", allowed={{'default'}, {'off'}, {'on'}}, description="Disable generation of information about every class with virtual functions for use by the C++ run-time type identification features (\"dynamic_cast\" and \"typeid\")."}
  if not _OPTIONS["jln-rtti"] then _OPTIONS["jln-rtti"] = (defaults["rtti"] or defaults["jln-rtti"] or "default") end

  newoption{trigger="jln-sanitizers", allowed={{'default'}, {'off'}, {'on', 'Enable address sanitizer and other compatible sanitizers'}, {'with_minimal_code_size', 'Enable address sanitizer and other compatible sanitizers, but reduces code size by removing the possibility of deleting checks via an environment variable when possible (use `-fsanitize-address-use-after-return=runtime` with Clang family).'}, {'extra', 'Enable address sanitizer and other compatible sanitizers, even those who require a config via environment variable.'}, {'extra_with_minimal_code_size', 'Combines `extra` and `with_minimal_code_size` values.'}, {'address', 'Enable address sanitizer only.'}, {'address_with_minimal_code_size', 'Enable address sanitizer only, but reduces code size by removing the possibility of deleting checks via an environment variable when possible (use `-fsanitize-address-use-after-return=runtime` with Clang family).'}, {'thread', 'Enable thread sanitizer.'}, {'undefined', 'Enable undefined sanitizer.'}, {'undefined_minimal_runtime', 'Enable undefined sanitizer with minimal UBSan runtime when available (Clang>=6).'}, {'scudo_hardened_allocator', 'Enable Scudo Hardened Allocator with Clang. See https://llvm.org/docs/ScudoHardenedAllocator.html.'}}, description="Enable sanitizers (asan, ubsan, etc) when available."}
  if not _OPTIONS["jln-sanitizers"] then _OPTIONS["jln-sanitizers"] = (defaults["sanitizers"] or defaults["jln-sanitizers"] or "default") end

  newoption{trigger="jln-shadow-warnings", allowed={{'default'}, {'off'}, {'on'}, {'local'}, {'compatible_local'}, {'all'}}, description=""}
  if not _OPTIONS["jln-shadow-warnings"] then _OPTIONS["jln-shadow-warnings"] = (defaults["shadow_warnings"] or defaults["jln-shadow-warnings"] or "off") end

  newoption{trigger="jln-stl-fix", allowed={{'default'}, {'off'}, {'on'}}, description="Enable `/DNOMINMAX` with MSVC."}
  if not _OPTIONS["jln-stl-fix"] then _OPTIONS["jln-stl-fix"] = (defaults["stl_fix"] or defaults["jln-stl-fix"] or "on") end

  newoption{trigger="jln-stl-hardening", allowed={{'default'}, {'off'}, {'fast', 'A set of security-critical checks that can be done with relatively little overhead in constant time and are intended to be used in production. No impact on the ABI.'}, {'extensive', 'All the checks from fast mode and some additional checks for undefined behavior that incur relatively little overhead but aren\'t security-critical. No impact on the ABI.'}, {'debug', 'Enables all the available checks, including heuristic checks that might have significant performance overhead as well as internal library assertions. No impact on the ABI.'}, {'debug_with_broken_abi', 'Debug mode with ABI incompatibility for more check.'}}, description="Hardening allows turning some instances of undefined behavior in the standard library into a contract violation."}
  if not _OPTIONS["jln-stl-hardening"] then _OPTIONS["jln-stl-hardening"] = (defaults["stl_hardening"] or defaults["jln-stl-hardening"] or "default") end

  newoption{trigger="jln-suggest-attributes", allowed={{'default'}, {'off'}, {'on', 'Suggests noreturn attribute with Clang and GCC.'}, {'common', 'Suggests noreturn and format attributes with GCC ; noreturn with Clang.'}, {'analysis', 'Suggests noreturn, format attributes, malloc and returns_nonnull attributes with GCC ; noreturn with Clang.'}, {'unity', 'Suggests noreturn, format attributes and final on types and methods ; noreturn with Clang.'}, {'all', 'Active all suggestions for attributes.'}}, description="Warn for cases where adding an attribute may be beneficial. With GCC, this  analysis requires option `-fipa-pure-const`, which is enabled by default at `-O1` and higher."}
  if not _OPTIONS["jln-suggest-attributes"] then _OPTIONS["jln-suggest-attributes"] = (defaults["suggest_attributes"] or defaults["jln-suggest-attributes"] or "on") end

  newoption{trigger="jln-switch-warnings", allowed={{'default'}, {'on'}, {'off'}, {'exhaustive_enum'}, {'mandatory_default'}, {'exhaustive_enum_and_mandatory_default'}}, description="Warnings concerning the switch keyword."}
  if not _OPTIONS["jln-switch-warnings"] then _OPTIONS["jln-switch-warnings"] = (defaults["switch_warnings"] or defaults["jln-switch-warnings"] or "on") end

  newoption{trigger="jln-symbols", allowed={{'default'}, {'hidden', 'Use `-fvisibility=hidden` with Clang, GCC and other compilers that support this flag.'}, {'strip_all', 'Strip all symbols.'}, {'gc_sections', 'Enable garbage collection of unused sections.'}, {'nodebug', 'Request no debugging information.'}, {'debug', 'Request debugging information. How much information can be controlled with options `minimal_debug` and `full_debug`.'}, {'minimal_debug', 'If possible, produces information for tracebacks only. This includes descriptions of functions and external variables, and line number tables, but no information about local variables. If the level is not supported by a compiler, this is equivalent to the `debug` option.'}, {'full_debug', 'If possible, includes extra information, such as all the macro definitions present in the program.'}, {'btf', 'GCC only. Request BTF debug information. BTF is the default debugging format for the eBPF  target.'}, {'codeview', 'GCC only. Code View debug format (used by Microsoft Visual C++ on Windows).'}, {'ctf', 'GCC only. Produce a CTF debug information. The default level is 2.'}, {'ctf1', 'Level 1 produces CTF information for tracebacks only. This includes callsite information, but does not include type information.'}, {'ctf2', 'Level 2 produces type information for entities (functions, data objects etc.)  at file-scope or global-scope only.'}, {'vms', 'GCC only. Alpha/VMS debug format (used by DEBUG on Alpha/VMS systems).The default level is 2.'}, {'vms1', 'Same as `minimal_debug`, but for Alpha/VMS.'}, {'vms2', 'Same as `debug`, but for Alpha/VMS.'}, {'vms3', 'Same as `full_debug`, but for Alpha/VMS.'}, {'dbx', 'Clang only.'}, {'lldb', 'Clang only.'}, {'sce', 'Clang only.'}, {'dwarf', 'Clang-cl only'}}, description="Produce debugging information in the operating system\'s."}
  if not _OPTIONS["jln-symbols"] then _OPTIONS["jln-symbols"] = (defaults["symbols"] or defaults["jln-symbols"] or "default") end

  newoption{trigger="jln-unsafe-buffer-usage-warnings", allowed={{'default'}, {'on'}, {'off'}}, description="Enable `-Wunsafe-buffer-usage` with Clang (https://clang.llvm.org/docs/SafeBuffers.html)."}
  if not _OPTIONS["jln-unsafe-buffer-usage-warnings"] then _OPTIONS["jln-unsafe-buffer-usage-warnings"] = (defaults["unsafe_buffer_usage_warnings"] or defaults["jln-unsafe-buffer-usage-warnings"] or "default") end

  newoption{trigger="jln-var-init", allowed={{'default'}, {'uninitialized', 'Doesn\'t initialize any automatic variables (default behavior of Clang and GCC).'}, {'pattern', 'Initialize automatic variables with byte-repeatable pattern (0xFE for GCC, 0xAA for Clang).'}, {'zero', 'zero Initialize automatic variables with zeroes.'}}, description="Initialize all stack variables implicitly, including padding."}
  if not _OPTIONS["jln-var-init"] then _OPTIONS["jln-var-init"] = (defaults["var_init"] or defaults["jln-var-init"] or "default") end

  newoption{trigger="jln-warnings", allowed={{'default'}, {'off'}, {'on', 'Activates essential warnings and extras.'}, {'essential', 'Activates essential warnings, typically `-Wall -Wextra` or `/W4`).'}, {'extensive', 'Activates essential warnings, extras and some that may raise false positives'}}, description="Warning level."}
  if not _OPTIONS["jln-warnings"] then _OPTIONS["jln-warnings"] = (defaults["warnings"] or defaults["jln-warnings"] or "on") end

  newoption{trigger="jln-warnings-as-error", allowed={{'default'}, {'off'}, {'on'}, {'basic'}}, description="Make all or some warnings into errors."}
  if not _OPTIONS["jln-warnings-as-error"] then _OPTIONS["jln-warnings-as-error"] = (defaults["warnings_as_error"] or defaults["jln-warnings-as-error"] or "default") end

  newoption{trigger="jln-windows-abi-compatibility-warnings", allowed={{'default'}, {'off'}, {'on'}}, description="In code that is intended to be portable to Windows-based compilers the warning helps prevent unresolved references due to the difference in the mangling of symbols declared with different class-keys."}
  if not _OPTIONS["jln-windows-abi-compatibility-warnings"] then _OPTIONS["jln-windows-abi-compatibility-warnings"] = (defaults["windows_abi_compatibility_warnings"] or defaults["jln-windows-abi-compatibility-warnings"] or "off") end

  newoption{trigger="jln-windows-bigobj", allowed={{'default'}, {'on'}}, description="Increases that addressable sections capacity."}
  if not _OPTIONS["jln-windows-bigobj"] then _OPTIONS["jln-windows-bigobj"] = (defaults["windows_bigobj"] or defaults["jln-windows-bigobj"] or "on") end
  newoption{trigger="jln-cxx", description="Path or name of the compiler for jln functions"}
  newoption{trigger="jln-cxx-version", description="Force the compiler version for jln functions"}
  newoption{trigger="jln-ld", description="Path or name of the linker for jln functions"}
end

-- same as jln_getoptions
function jln_setoptions(compiler, version, values, disable_others, print_compiler)
  local options = jln_getoptions(compiler, version, values, disable_others, print_compiler)
  buildoptions(options.buildoptions)
  linkoptions(options.linkoptions)
  return options
end

local _jln_compiler_by_os = {
  windows='msvc',
  linux='g++',
  cygwin='g++',
  mingw='g++',
  bsd='g++',
  macosx='clang++',
}

local _jln_default_compiler = 'g++'
local _jln_comp_cache = {}

local _get_extra = function(opt)
  local x = _OPTIONS[opt]
  return x ~= '' and x or nil
end

-- Returns the merge of the default values and new value table
-- jln_tovalues(table, disable_others = false)
-- `values`: table. ex: {warnings='on'}
-- `values` can have 3 additional fields:
--  - `cxx`: compiler name (otherwise deducted from --cxx and --toolchain)
--  - `cxx_version`: compiler version (otherwise deducted from cxx). ex: '7', '7.2'
--  - `ld`: linker name
function jln_tovalues(values, disable_others)
  if values then
    _jln_check_flag_names(values)
    return {
      ["analyzer"] = values["analyzer"] or values["jln-analyzer"] or (disable_others and "default" or _OPTIONS["jln-analyzer"]),
      ["analyzer_too_complex_warning"] = values["analyzer_too_complex_warning"] or values["jln-analyzer-too-complex-warning"] or (disable_others and "default" or _OPTIONS["jln-analyzer-too-complex-warning"]),
      ["analyzer_verbosity"] = values["analyzer_verbosity"] or values["jln-analyzer-verbosity"] or (disable_others and "default" or _OPTIONS["jln-analyzer-verbosity"]),
      ["color"] = values["color"] or values["jln-color"] or (disable_others and "default" or _OPTIONS["jln-color"]),
      ["conversion_warnings"] = values["conversion_warnings"] or values["jln-conversion-warnings"] or (disable_others and "default" or _OPTIONS["jln-conversion-warnings"]),
      ["coverage"] = values["coverage"] or values["jln-coverage"] or (disable_others and "default" or _OPTIONS["jln-coverage"]),
      ["covered_switch_default_warnings"] = values["covered_switch_default_warnings"] or values["jln-covered-switch-default-warnings"] or (disable_others and "default" or _OPTIONS["jln-covered-switch-default-warnings"]),
      ["cpu"] = values["cpu"] or values["jln-cpu"] or (disable_others and "default" or _OPTIONS["jln-cpu"]),
      ["diagnostics_format"] = values["diagnostics_format"] or values["jln-diagnostics-format"] or (disable_others and "default" or _OPTIONS["jln-diagnostics-format"]),
      ["diagnostics_show_template"] = values["diagnostics_show_template"] or values["jln-diagnostics-show-template"] or (disable_others and "default" or _OPTIONS["jln-diagnostics-show-template"]),
      ["emcc_debug"] = values["emcc_debug"] or values["jln-emcc-debug"] or (disable_others and "default" or _OPTIONS["jln-emcc-debug"]),
      ["exceptions"] = values["exceptions"] or values["jln-exceptions"] or (disable_others and "default" or _OPTIONS["jln-exceptions"]),
      ["hardened"] = values["hardened"] or values["jln-hardened"] or (disable_others and "default" or _OPTIONS["jln-hardened"]),
      ["linker"] = values["linker"] or values["jln-linker"] or (disable_others and "default" or _OPTIONS["jln-linker"]),
      ["lto"] = values["lto"] or values["jln-lto"] or (disable_others and "default" or _OPTIONS["jln-lto"]),
      ["msvc_crt_secure_no_warnings"] = values["msvc_crt_secure_no_warnings"] or values["jln-msvc-crt-secure-no-warnings"] or (disable_others and "default" or _OPTIONS["jln-msvc-crt-secure-no-warnings"]),
      ["msvc_diagnostics_format"] = values["msvc_diagnostics_format"] or values["jln-msvc-diagnostics-format"] or (disable_others and "default" or _OPTIONS["jln-msvc-diagnostics-format"]),
      ["msvc_isystem"] = values["msvc_isystem"] or values["jln-msvc-isystem"] or (disable_others and "default" or _OPTIONS["jln-msvc-isystem"]),
      ["msvc_isystem_with_template_instantiations_treated_as_non_external"] = values["msvc_isystem_with_template_instantiations_treated_as_non_external"] or values["jln-msvc-isystem-with-template-instantiations-treated-as-non-external"] or (disable_others and "default" or _OPTIONS["jln-msvc-isystem-with-template-instantiations-treated-as-non-external"]),
      ["ndebug"] = values["ndebug"] or values["jln-ndebug"] or (disable_others and "default" or _OPTIONS["jln-ndebug"]),
      ["noexcept_warnings"] = values["noexcept_warnings"] or values["jln-noexcept-warnings"] or (disable_others and "default" or _OPTIONS["jln-noexcept-warnings"]),
      ["optimization"] = values["optimization"] or values["jln-optimization"] or (disable_others and "default" or _OPTIONS["jln-optimization"]),
      ["optimization_warnings"] = values["optimization_warnings"] or values["jln-optimization-warnings"] or (disable_others and "default" or _OPTIONS["jln-optimization-warnings"]),
      ["pedantic"] = values["pedantic"] or values["jln-pedantic"] or (disable_others and "default" or _OPTIONS["jln-pedantic"]),
      ["reproducible_build_warnings"] = values["reproducible_build_warnings"] or values["jln-reproducible-build-warnings"] or (disable_others and "default" or _OPTIONS["jln-reproducible-build-warnings"]),
      ["rtti"] = values["rtti"] or values["jln-rtti"] or (disable_others and "default" or _OPTIONS["jln-rtti"]),
      ["sanitizers"] = values["sanitizers"] or values["jln-sanitizers"] or (disable_others and "default" or _OPTIONS["jln-sanitizers"]),
      ["shadow_warnings"] = values["shadow_warnings"] or values["jln-shadow-warnings"] or (disable_others and "default" or _OPTIONS["jln-shadow-warnings"]),
      ["stl_fix"] = values["stl_fix"] or values["jln-stl-fix"] or (disable_others and "default" or _OPTIONS["jln-stl-fix"]),
      ["stl_hardening"] = values["stl_hardening"] or values["jln-stl-hardening"] or (disable_others and "default" or _OPTIONS["jln-stl-hardening"]),
      ["suggest_attributes"] = values["suggest_attributes"] or values["jln-suggest-attributes"] or (disable_others and "default" or _OPTIONS["jln-suggest-attributes"]),
      ["switch_warnings"] = values["switch_warnings"] or values["jln-switch-warnings"] or (disable_others and "default" or _OPTIONS["jln-switch-warnings"]),
      ["symbols"] = values["symbols"] or values["jln-symbols"] or (disable_others and "default" or _OPTIONS["jln-symbols"]),
      ["unsafe_buffer_usage_warnings"] = values["unsafe_buffer_usage_warnings"] or values["jln-unsafe-buffer-usage-warnings"] or (disable_others and "default" or _OPTIONS["jln-unsafe-buffer-usage-warnings"]),
      ["var_init"] = values["var_init"] or values["jln-var-init"] or (disable_others and "default" or _OPTIONS["jln-var-init"]),
      ["warnings"] = values["warnings"] or values["jln-warnings"] or (disable_others and "default" or _OPTIONS["jln-warnings"]),
      ["warnings_as_error"] = values["warnings_as_error"] or values["jln-warnings-as-error"] or (disable_others and "default" or _OPTIONS["jln-warnings-as-error"]),
      ["windows_abi_compatibility_warnings"] = values["windows_abi_compatibility_warnings"] or values["jln-windows-abi-compatibility-warnings"] or (disable_others and "default" or _OPTIONS["jln-windows-abi-compatibility-warnings"]),
      ["windows_bigobj"] = values["windows_bigobj"] or values["jln-windows-bigobj"] or (disable_others and "default" or _OPTIONS["jln-windows-bigobj"]),
      ["cxx"] = values["cxx"] or values["jln-cxx"] or (not disable_others and _get_extra("jln-cxx")) or nil,
      ["cxx_version"] = values["cxx_version"] or values["jln-cxx-version"] or (not disable_others and _get_extra("jln-cxx-version")) or nil,
      ["ld"] = values["ld"] or values["jln-ld"] or (not disable_others and _get_extra("jln-ld")) or nil,
}
  else
    return {
      ["analyzer"] = _OPTIONS["jln-analyzer"],
      ["analyzer_too_complex_warning"] = _OPTIONS["jln-analyzer-too-complex-warning"],
      ["analyzer_verbosity"] = _OPTIONS["jln-analyzer-verbosity"],
      ["color"] = _OPTIONS["jln-color"],
      ["conversion_warnings"] = _OPTIONS["jln-conversion-warnings"],
      ["coverage"] = _OPTIONS["jln-coverage"],
      ["covered_switch_default_warnings"] = _OPTIONS["jln-covered-switch-default-warnings"],
      ["cpu"] = _OPTIONS["jln-cpu"],
      ["diagnostics_format"] = _OPTIONS["jln-diagnostics-format"],
      ["diagnostics_show_template"] = _OPTIONS["jln-diagnostics-show-template"],
      ["emcc_debug"] = _OPTIONS["jln-emcc-debug"],
      ["exceptions"] = _OPTIONS["jln-exceptions"],
      ["hardened"] = _OPTIONS["jln-hardened"],
      ["linker"] = _OPTIONS["jln-linker"],
      ["lto"] = _OPTIONS["jln-lto"],
      ["msvc_crt_secure_no_warnings"] = _OPTIONS["jln-msvc-crt-secure-no-warnings"],
      ["msvc_diagnostics_format"] = _OPTIONS["jln-msvc-diagnostics-format"],
      ["msvc_isystem"] = _OPTIONS["jln-msvc-isystem"],
      ["msvc_isystem_with_template_instantiations_treated_as_non_external"] = _OPTIONS["jln-msvc-isystem-with-template-instantiations-treated-as-non-external"],
      ["ndebug"] = _OPTIONS["jln-ndebug"],
      ["noexcept_warnings"] = _OPTIONS["jln-noexcept-warnings"],
      ["optimization"] = _OPTIONS["jln-optimization"],
      ["optimization_warnings"] = _OPTIONS["jln-optimization-warnings"],
      ["pedantic"] = _OPTIONS["jln-pedantic"],
      ["reproducible_build_warnings"] = _OPTIONS["jln-reproducible-build-warnings"],
      ["rtti"] = _OPTIONS["jln-rtti"],
      ["sanitizers"] = _OPTIONS["jln-sanitizers"],
      ["shadow_warnings"] = _OPTIONS["jln-shadow-warnings"],
      ["stl_fix"] = _OPTIONS["jln-stl-fix"],
      ["stl_hardening"] = _OPTIONS["jln-stl-hardening"],
      ["suggest_attributes"] = _OPTIONS["jln-suggest-attributes"],
      ["switch_warnings"] = _OPTIONS["jln-switch-warnings"],
      ["symbols"] = _OPTIONS["jln-symbols"],
      ["unsafe_buffer_usage_warnings"] = _OPTIONS["jln-unsafe-buffer-usage-warnings"],
      ["var_init"] = _OPTIONS["jln-var-init"],
      ["warnings"] = _OPTIONS["jln-warnings"],
      ["warnings_as_error"] = _OPTIONS["jln-warnings-as-error"],
      ["windows_abi_compatibility_warnings"] = _OPTIONS["jln-windows-abi-compatibility-warnings"],
      ["windows_bigobj"] = _OPTIONS["jln-windows-bigobj"],
      ["cxx"] = _get_extra("jln-cxx"),
      ["cxx_version"] = _get_extra("jln-cxx-version"),
      ["ld"] = _get_extra("jln-ld"),
}
  end
end

-- jln_getoptions(values = {}, disable_others = false, print_compiler = false)
-- `values`: same as jln_tovalue()
-- `disable_others`: boolean
-- `print_compiler`: boolean
-- return {buildoptions={}, linkoptions={}}
function jln_getoptions(values, disable_others, print_compiler)
  values = jln_tovalues(values, disable_others)
  local compiler = values.cxx  local version = values.cxx_version
  local linker = values.ld or (not disable_others and _OPTIONS['ld']) or nil

  local cache = _jln_comp_cache
  local original_compiler = compiler or ''
  local compcache = cache[original_compiler]

  local table_insert = table.insert

  if compcache then
    compiler = compcache[1]
    version = compcache[2]
    if not compiler then
      -- printf("WARNING: unknown compiler")
      return {buildoptions={}, linkoptions={}}
    end
  else
    cache[original_compiler] = {}

    if not compiler then
      compiler = _OPTIONS['jln-compiler']
              or _OPTIONS['cc']
              or _jln_compiler_by_os[os.target()]
              or _jln_default_compiler
      version = _OPTIONS['jln-compiler-version'] or nil
    end

    local compiler_path = compiler
    if compiler then
      compiler = (compiler:find('clang-cl', 1, true) and 'clang-cl') or
                 (compiler:find('clang', 1, true) and 'clang') or
                 ((compiler:find('msvc', 1, true) or
                   compiler:find('MSVC', 1, true) or
                   compiler:find('^vs%d') or
                   compiler:find('^VS%d')
                  ) and 'msvc') or
                 ((compiler:find('g++', 1, true) or
                   compiler:find('gcc', 1, true) or
                   compiler:find('GCC', 1, true) or
                   compiler:find('MinGW', 1, true) or
                   compiler:find('mingw', 1, true)
                  ) and 'gcc') or
                 (compiler:find('icp?c', 1, true) and 'icc') or
                 (compiler:find('icl', 1, true) and 'icl') or
                 ((compiler:find('ico?x', 1, true) or
                   compiler:find('dpcpp', 1, true)
                  ) and 'icx') or
                 (compiler:find('emcc', 1, true) and 'clang-emcc') or
                 nil
    end

    if not compiler then
      -- printf("WARNING: unknown compiler")
      return {buildoptions={}, linkoptions={}}
    end

    if not version then
      local output = os.outputof(compiler_path .. " --version")
      if output then
        output = output:sub(0, output:find('\n') or #output)
        version = output:match("%d+%.%d+%.%d+")
      else
        printf("WARNING: `%s --version` failed", compiler)
        output = original_compiler:match("%d+%.?%d*%.?%d*$")
        if output then
          version = output
          printf("Extract version %s of the compiler name", version)
        end
      end

      if not version then
        version = tostring(tonumber(os.date("%y")) - (compiler:sub(0, 5) == 'clang' and 14 or 12))
      end
    end

    local versparts = {}
    for i in version:gmatch("%d+") do
      table_insert(versparts, tonumber(i))
    end

    if versparts[1] then
      version = versparts[1] * 100000 + (versparts[2] or 0)
    else
      wprint("Wrong version format: %s", version)
      version = 0
    end

    cache[original_compiler] = {compiler, version}
  end

  if print_compiler then
    printf("jln_getoptions: compiler: %s, version: %s", compiler, version)
  end

  local is_clang_like = compiler:find('^clang') and not compiler:find('^clang-cl')

  local jln_buildoptions, jln_linkoptions = {}, {}

  if values['ndebug'] ~= 'default' then
    if ( compiler == 'msvc' or compiler == 'icl' ) then
      if values['ndebug'] == 'off' then
        table_insert(jln_buildoptions, "/UNDEBUG")
      else
        if values['ndebug'] == 'on' then
          table_insert(jln_buildoptions, "/DNDEBUG")
        else
          if values['optimization'] ~= 'default' and not ( values['optimization'] == '0' or values['optimization'] == 'g' ) then
            table_insert(jln_buildoptions, "/DNDEBUG")
          end
        end
      end
    else
      if values['ndebug'] == 'off' then
        table_insert(jln_buildoptions, "-UNDEBUG")
      else
        if values['ndebug'] == 'on' then
          table_insert(jln_buildoptions, "-DNDEBUG")
        else
          if values['optimization'] ~= 'default' and not ( values['optimization'] == '0' or values['optimization'] == 'g' ) then
            table_insert(jln_buildoptions, "-DNDEBUG")
          end
        end
      end
    end
  end
  if ( compiler == 'gcc' or is_clang_like or compiler == 'clang-cl' ) then
    if values['warnings'] ~= 'default' then
      if values['warnings'] == 'off' then
        table_insert(jln_buildoptions, "-w")
      else
        if values['warnings'] == 'essential' then
          table_insert(jln_buildoptions, "-Wall")
          table_insert(jln_buildoptions, "-Wextra")
        else
          if compiler == 'gcc' then
            table_insert(jln_buildoptions, "-Wall")
            table_insert(jln_buildoptions, "-Wextra")
            if version < 800000 then
              table_insert(jln_buildoptions, "-Wcast-align")
            end
            table_insert(jln_buildoptions, "-Wcast-qual")
            table_insert(jln_buildoptions, "-Wdisabled-optimization")
            table_insert(jln_buildoptions, "-Wfloat-equal")
            table_insert(jln_buildoptions, "-Wformat-security")
            table_insert(jln_buildoptions, "-Wformat=2")
            table_insert(jln_buildoptions, "-Winvalid-pch")
            table_insert(jln_buildoptions, "-Wmissing-declarations")
            table_insert(jln_buildoptions, "-Wmissing-include-dirs")
            table_insert(jln_buildoptions, "-Wpacked")
            table_insert(jln_buildoptions, "-Wredundant-decls")
            table_insert(jln_buildoptions, "-Wundef")
            table_insert(jln_buildoptions, "-Wunused-macros")
            table_insert(jln_buildoptions, "-Wpointer-arith")
            table_insert(jln_buildoptions, "-Wnon-virtual-dtor")
            table_insert(jln_buildoptions, "-Wold-style-cast")
            table_insert(jln_buildoptions, "-Woverloaded-virtual")
            if version >= 400007 then
              table_insert(jln_buildoptions, "-Wsuggest-attribute=noreturn")
              table_insert(jln_buildoptions, "-Wzero-as-null-pointer-constant")
              table_insert(jln_buildoptions, "-Wlogical-op")
              table_insert(jln_buildoptions, "-Wvector-operation-performance")
              table_insert(jln_buildoptions, "-Wdouble-promotion")
              table_insert(jln_buildoptions, "-Wtrampolines")
              if version >= 400008 then
                table_insert(jln_buildoptions, "-Wuseless-cast")
                if version >= 400009 then
                  table_insert(jln_buildoptions, "-Wconditionally-supported")
                  if version >= 500001 then
                    table_insert(jln_buildoptions, "-Wformat-signedness")
                    table_insert(jln_buildoptions, "-Warray-bounds=2")
                    table_insert(jln_buildoptions, "-Wstrict-null-sentinel")
                    table_insert(jln_buildoptions, "-Wsuggest-override")
                    if version >= 600001 then
                      table_insert(jln_buildoptions, "-Wduplicated-cond")
                      table_insert(jln_buildoptions, "-Wnull-dereference")
                      if version >= 700000 then
                        table_insert(jln_buildoptions, "-Waligned-new")
                        if version >= 700001 then
                          table_insert(jln_buildoptions, "-Walloc-zero")
                          table_insert(jln_buildoptions, "-Walloca")
                          table_insert(jln_buildoptions, "-Wformat-overflow=2")
                          table_insert(jln_buildoptions, "-Wduplicated-branches")
                          if version >= 800000 then
                            table_insert(jln_buildoptions, "-Wcast-align=strict")
                            table_insert(jln_buildoptions, "-Wformat-truncation=2")
                            table_insert(jln_buildoptions, "-Wshift-overflow=2")
                            table_insert(jln_buildoptions, "-Wclass-memaccess")
                            if version >= 1400000 then
                              table_insert(jln_buildoptions, "-Walloc-size")
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
            if values['warnings'] == 'extensive' then
              if version >= 800000 then
                table_insert(jln_buildoptions, "-Wstringop-overflow=4")
                if version >= 1200000 then
                  table_insert(jln_buildoptions, "-Wuse-after-free=3")
                end
              end
            end
          else
            table_insert(jln_buildoptions, "-Weverything")
            table_insert(jln_buildoptions, "-Wno-documentation")
            table_insert(jln_buildoptions, "-Wno-documentation-unknown-command")
            table_insert(jln_buildoptions, "-Wno-newline-eof")
            table_insert(jln_buildoptions, "-Wno-c++98-compat")
            table_insert(jln_buildoptions, "-Wno-c++98-compat-pedantic")
            table_insert(jln_buildoptions, "-Wno-padded")
            table_insert(jln_buildoptions, "-Wno-global-constructors")
            table_insert(jln_buildoptions, "-Wno-weak-vtables")
            table_insert(jln_buildoptions, "-Wno-exit-time-destructors")
            if  not ( ( values['switch_warnings'] == 'off' or values['switch_warnings'] == 'exhaustive_enum' or values['switch_warnings'] == 'exhaustive_enum_and_mandatory_default' ) ) then
              table_insert(jln_buildoptions, "-Wno-switch-enum")
            end
            if values['covered_switch_default_warnings'] == 'default' then
              table_insert(jln_buildoptions, "-Wno-covered-switch-default")
            end
            if values['suggest_attributes'] == 'default' then
              table_insert(jln_buildoptions, "-Wno-missing-noreturn")
            end
            if values['conversion_warnings'] ~= 'default' then
              if values['conversion_warnings'] == 'conversion' then
                table_insert(jln_buildoptions, "-Wno-sign-compare")
                table_insert(jln_buildoptions, "-Wno-sign-conversion")
              else
                if ( values['conversion_warnings'] == 'float' or values['conversion_warnings'] == 'sign' ) then
                  table_insert(jln_buildoptions, "-Wno-conversion")
                end
              end
            end
            if version >= 300009 then
              table_insert(jln_buildoptions, "-Wno-undefined-var-template")
              if version >= 500000 then
                table_insert(jln_buildoptions, "-Wno-inconsistent-missing-destructor-override")
                if version >= 900000 then
                  table_insert(jln_buildoptions, "-Wno-ctad-maybe-unsupported")
                  if version >= 1000000 then
                    table_insert(jln_buildoptions, "-Wno-c++20-compat")
                    if version >= 1100000 then
                      table_insert(jln_buildoptions, "-Wno-suggest-destructor-override")
                      if version >= 1600000 then
                        if values['unsafe_buffer_usage_warnings'] == 'default' then
                          table_insert(jln_buildoptions, "-Wno-unsafe-buffer-usage")
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if values['optimization_warnings'] ~= 'default' then
      if compiler == 'gcc' then
        if version >= 900000 then
          table_insert(jln_buildoptions, "-Wpessimizing-move")
          table_insert(jln_buildoptions, "-Wredundant-move")
          if version >= 1100000 then
            table_insert(jln_buildoptions, "-Wrange-loop-construct")
            if version >= 1300000 then
              table_insert(jln_buildoptions, "-Wself-move")
              if version >= 1400000 then
                table_insert(jln_buildoptions, "-Wnrvo")
              end
            end
          end
        end
      else
        if version >= 300006 then
          table_insert(jln_buildoptions, "-Wself-move")
          if version >= 300007 then
            table_insert(jln_buildoptions, "-Wpessimizing-move")
            table_insert(jln_buildoptions, "-Wredundant-move")
            if version >= 1000000 then
              table_insert(jln_buildoptions, "-Wrange-loop-construct")
            end
          end
        end
      end
    end
    if compiler == 'gcc' then
      if values['switch_warnings'] ~= 'default' then
        if values['switch_warnings'] == 'on' then
          table_insert(jln_buildoptions, "-Wswitch")
        else
          if values['switch_warnings'] == 'exhaustive_enum' then
            table_insert(jln_buildoptions, "-Wswitch-enum")
          else
            if values['switch_warnings'] == 'mandatory_default' then
              table_insert(jln_buildoptions, "-Wswitch-default")
            else
              if values['switch_warnings'] == 'exhaustive_enum_and_mandatory_default' then
                table_insert(jln_buildoptions, "-Wswitch-default")
                table_insert(jln_buildoptions, "-Wswitch-enum")
              else
                table_insert(jln_buildoptions, "-Wno-switch")
                table_insert(jln_buildoptions, "-Wno-switch-enum")
                table_insert(jln_buildoptions, "-Wno-switch-default")
              end
            end
          end
        end
      end
    else
      if values['switch_warnings'] ~= 'default' then
        if values['switch_warnings'] == 'on' then
          table_insert(jln_buildoptions, "-Wswitch")
          table_insert(jln_buildoptions, "-Wno-switch-default")
        else
          if values['switch_warnings'] == 'mandatory_default' then
            table_insert(jln_buildoptions, "-Wswitch")
            table_insert(jln_buildoptions, "-Wswitch-default")
          else
            if values['switch_warnings'] == 'exhaustive_enum' then
              table_insert(jln_buildoptions, "-Wswitch")
              table_insert(jln_buildoptions, "-Wswitch-enum")
              table_insert(jln_buildoptions, "-Wno-switch-default")
            else
              if values['switch_warnings'] == 'exhaustive_enum_and_mandatory_default' then
                table_insert(jln_buildoptions, "-Wswitch")
                table_insert(jln_buildoptions, "-Wswitch-enum")
                table_insert(jln_buildoptions, "-Wswitch-default")
              else
                table_insert(jln_buildoptions, "-Wno-switch")
                table_insert(jln_buildoptions, "-Wno-switch-enum")
                table_insert(jln_buildoptions, "-Wno-switch-default")
              end
            end
          end
        end
      end
      if values['covered_switch_default_warnings'] ~= 'default' then
        if values['covered_switch_default_warnings'] == 'off' then
          table_insert(jln_buildoptions, "-Wno-covered-switch-default")
        else
          table_insert(jln_buildoptions, "-Wcovered-switch-default")
        end
      end
    end
    if values['unsafe_buffer_usage_warnings'] ~= 'default' then
      if ( ( is_clang_like and version >= 1600000 ) or ( compiler == 'clang-cl' and version >= 1600000 ) ) then
        if values['unsafe_buffer_usage_warnings'] == 'off' then
          table_insert(jln_buildoptions, "-Wno-unsafe-buffer-usage")
        else
          table_insert(jln_buildoptions, "-Wunsafe-buffer-usage")
        end
      end
    end
    if values['shadow_warnings'] ~= 'default' then
      if values['shadow_warnings'] == 'off' then
        table_insert(jln_buildoptions, "-Wno-shadow")
        if ( ( is_clang_like and version >= 800000 ) or ( compiler == 'clang-cl' and version >= 800000 ) ) then
          table_insert(jln_buildoptions, "-Wno-shadow-field")
        end
      else
        if values['shadow_warnings'] == 'on' then
          table_insert(jln_buildoptions, "-Wshadow")
        else
          if values['shadow_warnings'] == 'all' then
            if compiler == 'gcc' then
              table_insert(jln_buildoptions, "-Wshadow")
            else
              table_insert(jln_buildoptions, "-Wshadow-all")
            end
          else
            if ( compiler == 'gcc' and version >= 700001 ) then
              if values['shadow_warnings'] == 'local' then
                table_insert(jln_buildoptions, "-Wshadow=local")
              else
                table_insert(jln_buildoptions, "-Wshadow=compatible-local")
              end
            end
          end
        end
      end
    end
    if values['suggest_attributes'] ~= 'default' then
      if values['suggest_attributes'] == 'on' then
        table_insert(jln_buildoptions, "-Wmissing-noreturn")
      else
        if values['suggest_attributes'] == 'common' then
          table_insert(jln_buildoptions, "-Wmissing-noreturn")
          table_insert(jln_buildoptions, "-Wmissing-format-attribute")
        else
          if ( values['suggest_attributes'] == 'analysis' or values['suggest_attributes'] == 'all' ) then
            table_insert(jln_buildoptions, "-Wmissing-noreturn")
            table_insert(jln_buildoptions, "-Wmissing-format-attribute")
            if compiler == 'gcc' then
              if version >= 800000 then
                table_insert(jln_buildoptions, "-Wsuggest-attribute=malloc")
                if version >= 1400000 then
                  table_insert(jln_buildoptions, "-Wsuggest-attribute=returns_nonnull")
                end
              end
              if ( values['suggest_attributes'] == 'all' or values['suggest_attributes'] == 'unity' ) then
                if version >= 500000 then
                  table_insert(jln_buildoptions, "-Wsuggest-final-types")
                  table_insert(jln_buildoptions, "-Wsuggest-final-methods")
                end
                if values['suggest_attributes'] == 'all' then
                  table_insert(jln_buildoptions, "-Wsuggest-attribute=pure")
                  table_insert(jln_buildoptions, "-Wsuggest-attribute=const")
                  if version >= 500001 then
                    table_insert(jln_buildoptions, "-Wnoexcept")
                    if version >= 800000 then
                      table_insert(jln_buildoptions, "-Wsuggest-attribute=cold")
                    end
                  end
                end
              end
            end
          else
            table_insert(jln_buildoptions, "-Wno-missing-noreturn")
            table_insert(jln_buildoptions, "-Wno-missing-format-attribute")
            if compiler == 'gcc' then
              table_insert(jln_buildoptions, "-Wno-suggest-attribute=pure")
              table_insert(jln_buildoptions, "-Wno-suggest-attribute=const")
              if version >= 500000 then
                table_insert(jln_buildoptions, "-Wno-suggest-final-types")
                table_insert(jln_buildoptions, "-Wno-suggest-final-methods")
                if version >= 500001 then
                  table_insert(jln_buildoptions, "-Wno-noexcept")
                  if version >= 800000 then
                    table_insert(jln_buildoptions, "-Wno-suggest-attribute=malloc")
                    if version >= 1400000 then
                      table_insert(jln_buildoptions, "-Wno-suggest-attribute=returns_nonnull")
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if values['var_init'] ~= 'default' then
      if ( ( compiler == 'gcc' and version >= 1200000 ) or ( is_clang_like and version >= 800000 ) or ( compiler == 'clang-cl' and version >= 800000 ) ) then
        if values['var_init'] == 'pattern' then
          table_insert(jln_buildoptions, "-ftrivial-auto-var-init=pattern")
          if compiler == 'gcc' then
            table_insert(jln_buildoptions, "-Wtrivial-auto-var-init")
          end
        else
          if values['var_init'] == 'zero' then
            if ( ( is_clang_like and version <= 1500000 ) or ( compiler == 'clang-cl' and version <= 1500000 ) ) then
              if values['var_init'] == 'zero' then
                table_insert(jln_buildoptions, "-enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang")
              end
            else
              table_insert(jln_buildoptions, "-ftrivial-auto-var-init=zero")
              if compiler == 'gcc' then
                table_insert(jln_buildoptions, "-Wtrivial-auto-var-init")
              end
            end
          else
            table_insert(jln_buildoptions, "-ftrivial-auto-var-init=uninitialized")
          end
        end
      end
    end
    if values['windows_abi_compatibility_warnings'] ~= 'default' then
      if ( ( compiler == 'gcc' and version >= 1000000 ) or compiler ~= 'gcc' ) then
        if values['windows_abi_compatibility_warnings'] == 'on' then
          table_insert(jln_buildoptions, "-Wmismatched-tags")
        else
          table_insert(jln_buildoptions, "-Wno-mismatched-tags")
        end
      end
    end
    if values['reproducible_build_warnings'] ~= 'default' then
      if ( compiler == 'gcc' and version >= 400009 ) then
        if values['reproducible_build_warnings'] == 'on' then
          table_insert(jln_buildoptions, "-Wdate-time")
        else
          table_insert(jln_buildoptions, "-Wno-date-time")
        end
      end
    end
    if values['warnings_as_error'] ~= 'default' then
      if values['warnings_as_error'] == 'on' then
        table_insert(jln_buildoptions, "-Werror")
      else
        if values['warnings_as_error'] == 'basic' then
          table_insert(jln_buildoptions, "-Werror=return-type")
          table_insert(jln_buildoptions, "-Werror=init-self")
          if compiler == 'gcc' then
            table_insert(jln_buildoptions, "-Werror=div-by-zero")
            if version >= 500001 then
              table_insert(jln_buildoptions, "-Werror=array-bounds")
              table_insert(jln_buildoptions, "-Werror=logical-op")
              table_insert(jln_buildoptions, "-Werror=logical-not-parentheses")
              if version >= 700000 then
                table_insert(jln_buildoptions, "-Werror=literal-suffix")
              end
            end
          else
            table_insert(jln_buildoptions, "-Werror=array-bounds")
            table_insert(jln_buildoptions, "-Werror=division-by-zero")
            if version >= 300004 then
              table_insert(jln_buildoptions, "-Werror=logical-not-parentheses")
              if version >= 300006 then
                table_insert(jln_buildoptions, "-Werror=delete-incomplete")
                if version >= 600000 then
                  table_insert(jln_buildoptions, "-Werror=user-defined-literals")
                  if version >= 700000 then
                    table_insert(jln_buildoptions, "-Werror=dynamic-class-memaccess")
                  end
                end
              end
            end
          end
        else
          table_insert(jln_buildoptions, "-Wno-error")
        end
      end
    end
    if values['color'] ~= 'default' then
      if ( version >= 400009 or compiler ~= 'gcc' ) then
        if values['color'] == 'auto' then
          table_insert(jln_buildoptions, "-fdiagnostics-color=auto")
        else
          if values['color'] == 'never' then
            table_insert(jln_buildoptions, "-fdiagnostics-color=never")
          else
            table_insert(jln_buildoptions, "-fdiagnostics-color=always")
          end
        end
      end
    end
    if values['lto'] ~= 'default' then
      if values['lto'] == 'off' then
        table_insert(jln_buildoptions, "-fno-lto")
        table_insert(jln_linkoptions, "-fno-lto")
        if compiler == 'gcc' then
          table_insert(jln_buildoptions, "-fno-whole-program")
        end
      else
        if compiler == 'gcc' then
          if values['lto'] ~= 'thin_or_nothing' then
            if ( values['lto'] == 'whole_program' or values['lto'] == 'whole_program_and_full_lto' ) then
              table_insert(jln_buildoptions, "-fwhole-program")
            end
            if version >= 1000000 then
              table_insert(jln_buildoptions, "-flto=auto")
              table_insert(jln_linkoptions, "-flto=auto")
            else
              table_insert(jln_buildoptions, "-flto")
              table_insert(jln_linkoptions, "-flto")
            end
          end
        else
          if ( ( values['lto'] == 'on' or values['lto'] == 'thin_or_nothing' or values['lto'] == 'whole_program' ) and version >= 400000 ) then
            table_insert(jln_buildoptions, "-flto=thin")
            table_insert(jln_linkoptions, "-flto=thin")
          else
            table_insert(jln_buildoptions, "-flto")
            table_insert(jln_linkoptions, "-flto")
            if version >= 1000000 then
              table_insert(jln_buildoptions, "-fvirtual-function-elimination")
              table_insert(jln_linkoptions, "-fvirtual-function-elimination")
            end
          end
          if version >= 300009 then
            if ( values['lto'] == 'whole_program' or values['lto'] == 'whole_program_and_full_lto' ) then
              table_insert(jln_buildoptions, "-fwhole-program-vtables")
              table_insert(jln_linkoptions, "-fwhole-program-vtables")
            end
            if version >= 700000 then
              table_insert(jln_buildoptions, "-fforce-emit-vtables")
              table_insert(jln_linkoptions, "-fforce-emit-vtables")
            end
          end
        end
      end
    end
    if values['stl_hardening'] ~= 'default' then
      if values['stl_hardening'] ~= 'off' then
        if values['stl_hardening'] == 'fast' then
          if compiler ~= 'clang-cl' then
            table_insert(jln_buildoptions, "-D_GLIBCXX_ASSERTIONS")
          end
          table_insert(jln_buildoptions, "-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_FAST")
        else
          if values['stl_hardening'] == 'extensive' then
            if compiler ~= 'clang-cl' then
              table_insert(jln_buildoptions, "-D_GLIBCXX_ASSERTIONS")
            end
            table_insert(jln_buildoptions, "-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_EXTENSIVE")
          else
            if values['stl_hardening'] == 'debug' then
              if compiler ~= 'clang-cl' then
                table_insert(jln_buildoptions, "-D_GLIBCXX_ASSERTIONS")
              end
              table_insert(jln_buildoptions, "-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_DEBUG")
            else
              if compiler ~= 'clang-cl' then
                table_insert(jln_buildoptions, "-D_GLIBCXX_DEBUG")
                if values['pedantic'] ~= 'default' and not ( values['pedantic'] == 'off' ) then
                  table_insert(jln_buildoptions, "-D_GLIBCXX_DEBUG_PEDANTIC")
                end
              end
              if ( is_clang_like and version < 1800000 ) then
                if version >= 800000 then
                  table_insert(jln_buildoptions, "-D_LIBCPP_DEBUG=1")
                end
              else
                table_insert(jln_buildoptions, "-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_DEBUG")
                table_insert(jln_buildoptions, "-D_LIBCPP_ABI_BOUNDED_ITERATORS")
                table_insert(jln_buildoptions, "-D_LIBCPP_ABI_BOUNDED_ITERATORS_IN_STRING")
                table_insert(jln_buildoptions, "-D_LIBCPP_ABI_BOUNDED_ITERATORS_IN_VECTOR")
                table_insert(jln_buildoptions, "-D_LIBCPP_ABI_BOUNDED_UNIQUE_PTR")
                table_insert(jln_buildoptions, "-D_LIBCPP_ABI_BOUNDED_ITERATORS_IN_STD_ARRAY")
              end
            end
          end
        end
      end
    end
    if values['sanitizers'] ~= 'default' then
      if ( ( compiler == 'gcc' and version >= 400008 ) or ( is_clang_like and version >= 300002 ) or ( compiler == 'clang-cl' and version >= 400000 ) ) then
        if values['sanitizers'] == 'off' then
          table_insert(jln_buildoptions, "-fno-sanitize=all")
          table_insert(jln_linkoptions, "-fno-sanitize=all")
        else
          if values['sanitizers'] == 'thread' then
            table_insert(jln_buildoptions, "-fsanitize=thread")
            table_insert(jln_linkoptions, "-fsanitize=thread")
          else
            if values['sanitizers'] == 'undefined' then
              table_insert(jln_buildoptions, "-fsanitize=undefined")
              table_insert(jln_linkoptions, "-fsanitize=undefined")
            else
              if values['sanitizers'] == 'undefined_minimal_runtime' then
                table_insert(jln_buildoptions, "-fsanitize=undefined")
                table_insert(jln_linkoptions, "-fsanitize=undefined")
                if ( ( is_clang_like or compiler == 'clang-cl' ) and version >= 600000 ) then
                  table_insert(jln_buildoptions, "-fsanitize-minimal-runtime")
                  table_insert(jln_linkoptions, "-fsanitize-minimal-runtime")
                end
              else
                if values['sanitizers'] == 'scudo_hardened_allocator' then
                  if ( compiler == 'clang' and version >= 1300000 ) then
                    table_insert(jln_buildoptions, "-fsanitize=scudo")
                    table_insert(jln_linkoptions, "-fsanitize=scudo")
                  end
                else
                  table_insert(jln_buildoptions, "-fno-omit-frame-pointer")
                  table_insert(jln_buildoptions, "-fno-optimize-sibling-calls")
                  table_insert(jln_buildoptions, "-fsanitize=address")
                  table_insert(jln_linkoptions, "-fsanitize=address")
                  if ( values['sanitizers'] == 'on' or values['sanitizers'] == 'with_minimal_code_size' or values['sanitizers'] == 'extra' or values['sanitizers'] == 'extra_with_minimal_code_size' ) then
                    if ( ( compiler == 'gcc' and version >= 400009 ) or is_clang_like or compiler == 'clang-cl' ) then
                      table_insert(jln_buildoptions, "-fsanitize=undefined")
                      table_insert(jln_linkoptions, "-fsanitize=undefined")
                    end
                    if ( values['sanitizers'] == 'with_minimal_code_size' or values['sanitizers'] == 'extra_with_minimal_code_size' ) then
                      if ( ( is_clang_like and version >= 1300000 ) or ( compiler == 'clang-cl' and version >= 1300000 ) ) then
                        table_insert(jln_buildoptions, "-fsanitize-address-use-after-return=always")
                        table_insert(jln_linkoptions, "-fsanitize-address-use-after-return=always")
                      end
                    end
                    if ( values['sanitizers'] == 'extra' or values['sanitizers'] == 'extra_with_minimal_code_size' ) then
                      if ( ( compiler == 'gcc' and version >= 800000 ) or ( compiler == 'clang' and version >= 900000 ) or ( compiler == 'clang-cl' and version >= 900000 ) ) then
                        table_insert(jln_buildoptions, "-fsanitize=pointer-compare")
                        table_insert(jln_buildoptions, "-fsanitize=pointer-subtract")
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if values['emcc_debug'] ~= 'default' then
      if compiler == 'clang-emcc' then
        if values['emcc_debug'] == 'off' then
          table_insert(jln_linkoptions, "-sASSERTIONS=0")
          table_insert(jln_linkoptions, "-sSAFE_HEAP=0")
          table_insert(jln_linkoptions, "-sSTACK_OVERFLOW_CHECK=0")
        else
          if values['emcc_debug'] == 'slow' then
            table_insert(jln_linkoptions, "-sASSERTIONS=2")
          else
            table_insert(jln_linkoptions, "-sASSERTIONS=1")
          end
          table_insert(jln_linkoptions, "-sSTACK_OVERFLOW_CHECK=2")
          if  not ( ( values['sanitizers'] == 'on' or values['sanitizers'] == 'with_minimal_code_size' or values['sanitizers'] == 'extra' or values['sanitizers'] == 'extra_with_minimal_code_size' or values['sanitizers'] == 'address' or values['sanitizers'] == 'address_with_minimal_code_size' ) ) then
            table_insert(jln_linkoptions, "-sSAFE_HEAP=1")
          end
        end
      end
    end
  end
  if values['conversion_warnings'] ~= 'default' then
    if ( compiler == 'gcc' or is_clang_like or compiler == 'clang-cl' or compiler == 'icc' ) then
      if values['conversion_warnings'] == 'on' then
        table_insert(jln_buildoptions, "-Wconversion")
        table_insert(jln_buildoptions, "-Wsign-compare")
        table_insert(jln_buildoptions, "-Wsign-conversion")
      else
        if values['conversion_warnings'] == 'conversion' then
          table_insert(jln_buildoptions, "-Wconversion")
        else
          if values['conversion_warnings'] == 'float' then
            if compiler == 'gcc' then
              if version >= 400009 then
                table_insert(jln_buildoptions, "-Wfloat-conversion")
              end
            else
              table_insert(jln_buildoptions, "-Wfloat-conversion")
            end
          else
            if values['conversion_warnings'] == 'sign' then
              table_insert(jln_buildoptions, "-Wsign-compare")
              table_insert(jln_buildoptions, "-Wsign-conversion")
            else
              if values['conversion_warnings'] == 'all' then
                table_insert(jln_buildoptions, "-Wconversion")
                if compiler == 'gcc' then
                  table_insert(jln_buildoptions, "-Warith-conversion")
                end
              else
                table_insert(jln_buildoptions, "-Wno-conversion")
                table_insert(jln_buildoptions, "-Wno-sign-compare")
                table_insert(jln_buildoptions, "-Wno-sign-conversion")
              end
            end
          end
        end
      end
    end
  end
  if ( compiler == 'gcc' or is_clang_like ) then
    if values['diagnostics_show_template'] ~= 'default' then
      if ( values['diagnostics_show_template'] == 'tree_without_elided_types' or values['diagnostics_show_template'] == 'tree' ) then
        if ( ( compiler == 'gcc' and version >= 800000 ) or is_clang_like ) then
          table_insert(jln_buildoptions, "-fdiagnostics-show-template-tree")
        end
      end
      if ( values['diagnostics_show_template'] == 'tree_without_elided_types' or values['diagnostics_show_template'] == 'without_elided_types' ) then
        if ( ( compiler == 'gcc' and version >= 800000 ) or ( is_clang_like and version >= 300004 ) ) then
          table_insert(jln_buildoptions, "-fno-elide-type")
        end
      end
    end
    if values['exceptions'] ~= 'default' then
      if values['exceptions'] == 'on' then
        table_insert(jln_buildoptions, "-fexceptions")
        if compiler == 'clang-emcc' then
          table_insert(jln_buildoptions, "-sDISABLE_EXCEPTION_CATCHING=0")
        end
      else
        table_insert(jln_buildoptions, "-fno-exceptions")
      end
    end
    if values['hardened'] ~= 'default' then
      if ( values['hardened'] == 'on' or values['hardened'] == 'all' ) then
        if ( compiler == 'gcc' and version >= 1400000 ) then
          table_insert(jln_buildoptions, "-fhardened")
          table_insert(jln_buildoptions, "-Whardened")
          if values['hardened'] == 'all' then
            table_insert(jln_buildoptions, "-fstack-protector-all")
          end
          table_insert(jln_buildoptions, "-Wtrampolines")
          table_insert(jln_linkoptions, "-Wl,-z,noexecstack")
        else
          if values['hardened'] == 'all' then
            table_insert(jln_buildoptions, "-fstack-protector-all")
          else
            table_insert(jln_buildoptions, "-fstack-protector-strong")
          end
          if ( ( compiler == 'gcc' and version >= 1200000 ) or ( is_clang_like and version >= 1400000 ) ) then
            table_insert(jln_buildoptions, "-D_FORTIFY_SOURCE=3")
            if ( ( compiler == 'gcc' and version >= 1300000 ) or ( is_clang_like and version >= 1600000 ) ) then
              table_insert(jln_buildoptions, "-fstrict-flex-arrays=3")
            end
          else
            table_insert(jln_buildoptions, "-D_FORTIFY_SOURCE=2")
          end
          if values['var_init'] == 'default' then
            if ( ( compiler == 'gcc' and version >= 1200000 ) or ( is_clang_like and version >= 800000 ) ) then
              if ( is_clang_like and version <= 1500000 ) then
                table_insert(jln_buildoptions, "-enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang")
              else
                table_insert(jln_buildoptions, "-ftrivial-auto-var-init=zero")
                if compiler == 'gcc' then
                  table_insert(jln_buildoptions, "-Wtrivial-auto-var-init")
                end
              end
            end
          end
          table_insert(jln_buildoptions, "-fPIE")
          table_insert(jln_linkoptions, "-fPIE")
          if compiler ~= 'clang-emcc' then
            table_insert(jln_buildoptions, "-pie")
            table_insert(jln_linkoptions, "-pie")
            table_insert(jln_linkoptions, "-Wl,-z,relro,-z,now")
            table_insert(jln_linkoptions, "-Wl,-z,noexecstack")
          end
          if compiler == 'gcc' then
            if version >= 400006 then
              table_insert(jln_buildoptions, "-Wtrampolines")
              if version >= 800000 then
                table_insert(jln_buildoptions, "-fstack-clash-protection")
                table_insert(jln_buildoptions, "-fcf-protection=full")
              end
            end
          else
            if compiler ~= 'clang-emcc' then
              if version >= 700000 then
                table_insert(jln_buildoptions, "-fcf-protection=full")
                if version >= 1100000 then
                  table_insert(jln_buildoptions, "-fstack-clash-protection")
                end
              end
            end
          end
        end
      end
    end
    if values['rtti'] ~= 'default' then
      if values['rtti'] == 'on' then
        table_insert(jln_buildoptions, "-frtti")
      else
        table_insert(jln_buildoptions, "-fno-rtti")
      end
    end
    if values['diagnostics_format'] ~= 'default' then
      if values['diagnostics_format'] == 'fixits' then
        if ( ( compiler == 'gcc' and version >= 700000 ) or ( compiler ~= 'gcc' and version >= 500000 ) ) then
          table_insert(jln_buildoptions, "-fdiagnostics-parseable-fixits")
        end
      else
        if values['diagnostics_format'] == 'patch' then
          if ( compiler == 'gcc' and version >= 700000 ) then
            table_insert(jln_buildoptions, "-fdiagnostics-generate-patch")
          end
        else
          if is_clang_like then
            table_insert(jln_buildoptions, "-fdiagnostics-print-source-range-info")
          end
        end
      end
    end
    if values['pedantic'] ~= 'default' then
      if values['pedantic'] ~= 'off' then
        table_insert(jln_buildoptions, "-pedantic")
        if values['pedantic'] == 'as_error' then
          table_insert(jln_buildoptions, "-pedantic-errors")
          table_insert(jln_buildoptions, "-Werror=write-strings")
          if compiler == 'gcc' then
            if version >= 400007 then
              table_insert(jln_buildoptions, "-Werror=narrowing")
              if version >= 700001 then
                table_insert(jln_buildoptions, "-Werror=literal-suffix")
              end
            end
          end
        end
      end
    end
    if values['symbols'] ~= 'default' then
      if values['symbols'] == 'hidden' then
        table_insert(jln_buildoptions, "-fvisibility=hidden")
      else
        if values['symbols'] == 'strip_all' then
          table_insert(jln_linkoptions, "-s")
        else
          if values['symbols'] == 'gc_sections' then
            if linker == 'ld64' then
              table_insert(jln_linkoptions, "-Wl,-S")
              table_insert(jln_linkoptions, "-Wl,-dead_strip")
            end
            table_insert(jln_linkoptions, "-s")
            table_insert(jln_linkoptions, "-Wl,--gc-sections")
          else
            if values['symbols'] == 'nodebug' then
              table_insert(jln_buildoptions, "-g0")
            else
              if values['symbols'] == 'debug' then
                table_insert(jln_buildoptions, "-g")
              else
                if values['symbols'] == 'minimal_debug' then
                  table_insert(jln_buildoptions, "-g1")
                else
                  if values['symbols'] == 'full_debug' then
                    table_insert(jln_buildoptions, "-g3")
                  else
                    if compiler == 'clang' then
                      if values['symbols'] == 'dwarf' then
                        table_insert(jln_buildoptions, "-g")
                      end
                      if values['symbols'] == 'lldb' then
                        table_insert(jln_buildoptions, "-glldb")
                      end
                      if values['symbols'] == 'sce' then
                        table_insert(jln_buildoptions, "-gsce")
                      end
                      if values['symbols'] == 'dbx' then
                        table_insert(jln_buildoptions, "-gdbx")
                      end
                    else
                      if compiler == 'gcc' then
                        if values['symbols'] == 'dwarf' then
                          table_insert(jln_buildoptions, "-g")
                        end
                        if values['symbols'] == 'codeview' then
                          table_insert(jln_buildoptions, "-gcodeview")
                        end
                        if values['symbols'] == 'btf' then
                          table_insert(jln_buildoptions, "-gbtf")
                        end
                        if values['symbols'] == 'ctf' then
                          table_insert(jln_buildoptions, "-gctf")
                        end
                        if values['symbols'] == 'ctf1' then
                          table_insert(jln_buildoptions, "-gctf1")
                        end
                        if values['symbols'] == 'ctf2' then
                          table_insert(jln_buildoptions, "-gctf2")
                        end
                        if values['symbols'] == 'vms' then
                          table_insert(jln_buildoptions, "-gvms")
                        end
                        if values['symbols'] == 'vms1' then
                          table_insert(jln_buildoptions, "-gvms1")
                        end
                        if values['symbols'] == 'vms2' then
                          table_insert(jln_buildoptions, "-gvms2")
                        end
                        if values['symbols'] == 'vms3' then
                          table_insert(jln_buildoptions, "-gvms3")
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if compiler == 'clang-emcc' then
      if values['optimization'] ~= 'default' then
        if values['optimization'] == '0' then
          table_insert(jln_buildoptions, "-O0")
          table_insert(jln_linkoptions, "-O0")
        else
          if values['optimization'] == 'g' then
            table_insert(jln_buildoptions, "-Og")
            table_insert(jln_linkoptions, "-Og")
          else
            if values['optimization'] == '1' then
              table_insert(jln_buildoptions, "-O1")
              table_insert(jln_linkoptions, "-O1")
            else
              if values['optimization'] == '2' then
                table_insert(jln_buildoptions, "-O2")
                table_insert(jln_linkoptions, "-O2")
              else
                if values['optimization'] == '3' then
                  table_insert(jln_buildoptions, "-O3")
                  table_insert(jln_linkoptions, "-O3")
                else
                  if values['optimization'] == 'fast' then
                    table_insert(jln_buildoptions, "-O3")
                    table_insert(jln_buildoptions, "-mnontrapping-fptoint")
                    table_insert(jln_linkoptions, "-O3")
                    table_insert(jln_linkoptions, "-mnontrapping-fptoint")
                  else
                    if values['optimization'] == 'size' then
                      table_insert(jln_buildoptions, "-Os")
                      table_insert(jln_linkoptions, "-Os")
                    else
                      table_insert(jln_buildoptions, "-Oz")
                      table_insert(jln_linkoptions, "-Oz")
                    end
                  end
                end
              end
            end
          end
        end
      end
    else
      if ( compiler == 'gcc' and version >= 1200000 ) then
        table_insert(jln_buildoptions, "-ffold-simple-inlines")
      end
      if values['coverage'] ~= 'default' then
        if values['coverage'] == 'on' then
          table_insert(jln_buildoptions, "--coverage")
          table_insert(jln_linkoptions, "--coverage")
          if compiler == 'clang' then
            table_insert(jln_linkoptions, "-lprofile_rt")
          end
        end
      end
      if values['optimization'] ~= 'default' then
        if values['optimization'] == '0' then
          table_insert(jln_buildoptions, "-O0")
        else
          if values['optimization'] == 'g' then
            table_insert(jln_buildoptions, "-Og")
          else
            table_insert(jln_linkoptions, "-Wl,-O1")
            if values['optimization'] == '1' then
              table_insert(jln_buildoptions, "-O1")
            else
              if values['optimization'] == '2' then
                table_insert(jln_buildoptions, "-O2")
              else
                if values['optimization'] == '3' then
                  table_insert(jln_buildoptions, "-O3")
                else
                  if values['optimization'] == 'size' then
                    table_insert(jln_buildoptions, "-Os")
                  else
                    if values['optimization'] == 'z' then
                      if ( compiler == 'clang' or ( compiler == 'gcc' and version >= 1200000 ) ) then
                        table_insert(jln_buildoptions, "-Oz")
                      else
                        table_insert(jln_buildoptions, "-Os")
                      end
                    else
                      if compiler == 'clang' then
                        table_insert(jln_buildoptions, "-O3")
                        table_insert(jln_buildoptions, "-ffast-math")
                      else
                        table_insert(jln_buildoptions, "-Ofast")
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      if values['cpu'] ~= 'default' then
        if values['cpu'] == 'generic' then
          table_insert(jln_buildoptions, "-mtune=generic")
          table_insert(jln_linkoptions, "-mtune=generic")
        else
          table_insert(jln_buildoptions, "-march=native")
          table_insert(jln_buildoptions, "-mtune=native")
          table_insert(jln_linkoptions, "-march=native")
          table_insert(jln_linkoptions, "-mtune=native")
        end
      end
      if values['linker'] ~= 'default' then
        if values['linker'] == 'mold' then
          table_insert(jln_linkoptions, "-fuse-ld=mold")
        else
          if values['linker'] == 'native' then
            if compiler == 'gcc' then
              table_insert(jln_linkoptions, "-fuse-ld=gold")
            else
              table_insert(jln_linkoptions, "-fuse-ld=lld")
            end
          else
            if values['linker'] == 'bfd' then
              table_insert(jln_linkoptions, "-fuse-ld=bfd")
            else
              if ( values['linker'] == 'gold' or ( compiler == 'gcc' and version < 900000 ) ) then
                table_insert(jln_linkoptions, "-fuse-ld=gold")
              else
                table_insert(jln_linkoptions, "-fuse-ld=lld")
              end
            end
          end
        end
      end
      if values['noexcept_warnings'] ~= 'default' then
        if ( compiler == 'gcc' and version >= 400006 ) then
          if values['noexcept_warnings'] == 'on' then
            table_insert(jln_buildoptions, "-Wnoexcept")
          else
            table_insert(jln_buildoptions, "-Wno-noexcept")
          end
        end
      end
      if values['analyzer'] ~= 'default' then
        if ( compiler == 'gcc' and version >= 1000000 ) then
          if values['analyzer'] == 'off' then
            table_insert(jln_buildoptions, "-fno-analyzer")
          else
            table_insert(jln_buildoptions, "-fanalyzer")
            if values['analyzer_too_complex_warning'] ~= 'default' then
              if values['analyzer_too_complex_warning'] == 'on' then
                table_insert(jln_buildoptions, "-Wanalyzer-too-complex")
              else
                table_insert(jln_buildoptions, "-Wno-analyzer-too-complex")
              end
            end
            if values['analyzer_verbosity'] ~= 'default' then
              if values['analyzer_verbosity'] == '0' then
                table_insert(jln_buildoptions, "-fanalyzer-verbosity=0")
              else
                if values['analyzer_verbosity'] == '1' then
                  table_insert(jln_buildoptions, "-fanalyzer-verbosity=1")
                else
                  if values['analyzer_verbosity'] == '2' then
                    table_insert(jln_buildoptions, "-fanalyzer-verbosity=2")
                  else
                    table_insert(jln_buildoptions, "-fanalyzer-verbosity=3")
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  if ( compiler == 'msvc' or compiler == 'clang-cl' or compiler == 'icl' ) then
    if values['exceptions'] ~= 'default' then
      if values['exceptions'] == 'on' then
        table_insert(jln_buildoptions, "/EHsc")
      else
        table_insert(jln_buildoptions, "/EHs-c-")
      end
    end
    if values['rtti'] ~= 'default' then
      if values['rtti'] == 'on' then
        table_insert(jln_buildoptions, "/GR")
      else
        table_insert(jln_buildoptions, "/GR-")
      end
    end
    if values['stl_hardening'] ~= 'default' then
      if values['stl_hardening'] == 'off' then
        table_insert(jln_buildoptions, "/D_MSVC_STL_HARDENING=0")
        table_insert(jln_buildoptions, "/D_MSVC_STL_DESTRUCTOR_TOMBSTONES=0")
        table_insert(jln_buildoptions, "/D_ITERATOR_DEBUG_LEVEL=0")
        table_insert(jln_buildoptions, "/D_HAS_ITERATOR_DEBUGGING=0")
        table_insert(jln_buildoptions, "/D_SECURE_SCL=0")
      else
        if ( values['stl_hardening'] == 'fast' or values['stl_hardening'] == 'extensive' ) then
          table_insert(jln_buildoptions, "/D_MSVC_STL_HARDENING=1")
        else
          if values['stl_hardening'] == 'debug' then
            table_insert(jln_buildoptions, "/D_MSVC_STL_HARDENING=1")
            table_insert(jln_buildoptions, "/D_MSVC_STL_DESTRUCTOR_TOMBSTONES=1")
          else
            table_insert(jln_buildoptions, "/D_DEBUG")
            table_insert(jln_buildoptions, "/D_MSVC_STL_HARDENING=1")
            table_insert(jln_buildoptions, "/D_MSVC_STL_DESTRUCTOR_TOMBSTONES=1")
          end
        end
      end
    end
    if values['stl_fix'] ~= 'default' then
      if values['stl_fix'] == 'on' then
        table_insert(jln_buildoptions, "/DNOMINMAX")
      end
    end
    if compiler ~= 'icl' then
      if values['symbols'] ~= 'default' then
        if values['symbols'] == 'nodebug' then
          table_insert(jln_linkoptions, "/DEBUG:NONE")
        else
          if ( values['symbols'] == 'debug' or values['symbols'] == 'minimal_debug' or values['symbols'] == 'full_debug' or values['symbols'] == 'codeview' ) then
            table_insert(jln_buildoptions, "/Zi")
            table_insert(jln_linkoptions, "/DEBUG:FULL")
          else
            if compiler == 'clang-cl' then
              if values['symbols'] == 'dwarf' then
                table_insert(jln_linkoptions, "-gdwarf")
              end
            end
          end
        end
      end
      if values['optimization'] ~= 'default' then
        if values['optimization'] == '0' then
          table_insert(jln_buildoptions, "/Od")
        else
          if values['optimization'] == 'g' then
            table_insert(jln_buildoptions, "/Ob1")
          else
            if values['optimization'] == '2' then
              table_insert(jln_buildoptions, "/O2")
            else
              if ( values['optimization'] == '1' or values['optimization'] == 'size' ) then
                table_insert(jln_buildoptions, "/O1")
              else
                if values['optimization'] == 'z' then
                  table_insert(jln_buildoptions, "/O1")
                  table_insert(jln_buildoptions, "/Gw")
                else
                  if values['optimization'] == 'fast' then
                    table_insert(jln_buildoptions, "/fp:fast")
                  end
                  table_insert(jln_buildoptions, "/O2")
                  if ( ( compiler == 'msvc' and version >= 1900020 ) or compiler == 'clang-cl' ) then
                    table_insert(jln_buildoptions, "/Ob3")
                  end
                  table_insert(jln_buildoptions, "/Gw")
                end
              end
            end
          end
        end
      end
      if values['hardened'] ~= 'default' then
        if values['hardened'] == 'off' then
          table_insert(jln_buildoptions, "/GS-")
        else
          table_insert(jln_buildoptions, "/sdl")
          table_insert(jln_buildoptions, "/guard:cf")
          if ( ( compiler == 'msvc' and version >= 1900027 ) or ( compiler == 'clang-cl' and version >= 1000000 ) ) then
            table_insert(jln_buildoptions, "/guard:ehcont")
            table_insert(jln_linkoptions, "/CETCOMPAT")
          end
        end
      end
    end
  end
  if compiler == 'msvc' then
    if values['analyzer'] ~= 'default' then
      if version >= 1900000 then
        if values['analyzer'] == 'off' then
          table_insert(jln_buildoptions, "/analyze-")
        else
          table_insert(jln_buildoptions, "/analyze")
          if values['analyzer'] ~= 'with_external_headers' then
            if version >= 1600010 then
              table_insert(jln_buildoptions, "/analyze:external-")
            end
          end
        end
      end
    end
    if values['windows_bigobj'] ~= 'default' then
      table_insert(jln_buildoptions, "/bigobj")
    end
    if values['msvc_crt_secure_no_warnings'] ~= 'default' then
      if values['msvc_crt_secure_no_warnings'] == 'on' then
        table_insert(jln_buildoptions, "/D_CRT_SECURE_NO_WARNINGS=1")
      else
        if values['msvc_crt_secure_no_warnings'] == 'off' then
          table_insert(jln_buildoptions, "/U_CRT_SECURE_NO_WARNINGS")
        end
      end
    end
    if values['msvc_diagnostics_format'] ~= 'default' then
      if version >= 1900010 then
        if values['msvc_diagnostics_format'] == 'classic' then
          table_insert(jln_buildoptions, "/diagnostics:classic")
        else
          if values['msvc_diagnostics_format'] == 'column' then
            table_insert(jln_buildoptions, "/diagnostics:column")
          else
            table_insert(jln_buildoptions, "/diagnostics:caret")
          end
        end
      end
    end
    if version < 1900013 then
      values['msvc_isystem'] = 'default'
    end
    if values['msvc_isystem'] ~= 'default' then
      if values['msvc_isystem'] == 'external_as_include_system_flag' then
        if version < 1900029 then
          -- unimplementable
        else
          -- unimplementable
        end
      else
        if values['msvc_isystem'] ~= 'assumed' then
          if version < 1900029 then
            table_insert(jln_buildoptions, "/experimental:external")
          end
          table_insert(jln_buildoptions, "/external:W0")
          if values['msvc_isystem'] == 'anglebrackets' then
            table_insert(jln_buildoptions, "/external:anglebrackets")
          else
            table_insert(jln_buildoptions, "/external:env:INCLUDE")
            table_insert(jln_buildoptions, "/external:env:CAExcludePath")
          end
        end
      end
      if values['msvc_isystem_with_template_instantiations_treated_as_non_external'] ~= 'default' then
        if values['msvc_isystem_with_template_instantiations_treated_as_non_external'] == 'off' then
          table_insert(jln_buildoptions, "/external:templates")
        else
          table_insert(jln_buildoptions, "/external:templates-")
        end
      end
    end
    if values['warnings'] ~= 'default' then
      if values['warnings'] == 'off' then
        table_insert(jln_buildoptions, "/W0")
      else
        if values['warnings'] == 'essential' then
          table_insert(jln_buildoptions, "/W4")
          table_insert(jln_buildoptions, "/wd4711")
        else
          if values['warnings'] == 'on' then
            table_insert(jln_buildoptions, "/W4")
            table_insert(jln_buildoptions, "/wd4711")
            if values['msvc_isystem'] == 'default' then
              table_insert(jln_buildoptions, "/w14263")
              table_insert(jln_buildoptions, "/w14264")
            end
            table_insert(jln_buildoptions, "/w14265")
            table_insert(jln_buildoptions, "/w14296")
            table_insert(jln_buildoptions, "/w14444")
            table_insert(jln_buildoptions, "/w14555")
            table_insert(jln_buildoptions, "/w14557")
            table_insert(jln_buildoptions, "/w14608")
            table_insert(jln_buildoptions, "/w14905")
            table_insert(jln_buildoptions, "/w14906")
            table_insert(jln_buildoptions, "/w14917")
            table_insert(jln_buildoptions, "/w14928")
            table_insert(jln_buildoptions, "/w14545")
            table_insert(jln_buildoptions, "/w14546")
            table_insert(jln_buildoptions, "/w14547")
            table_insert(jln_buildoptions, "/w14548")
            table_insert(jln_buildoptions, "/w14549")
            table_insert(jln_buildoptions, "/w14822")
            table_insert(jln_buildoptions, "/w14692")
            if version >= 1900000 then
              table_insert(jln_buildoptions, "/w14426")
              table_insert(jln_buildoptions, "/w14596")
              if values['msvc_isystem'] == 'default' then
                table_insert(jln_buildoptions, "/w14654")
              end
              table_insert(jln_buildoptions, "/w15031")
              table_insert(jln_buildoptions, "/w15032")
              if version >= 1900011 then
                table_insert(jln_buildoptions, "/w15038")
                if version >= 1900015 then
                  table_insert(jln_buildoptions, "/w14643")
                  if version >= 1900022 then
                    table_insert(jln_buildoptions, "/w14855")
                    if version >= 1900025 then
                      if values['msvc_isystem'] == 'default' then
                        table_insert(jln_buildoptions, "/w15204")
                      end
                      if version >= 1900029 then
                        table_insert(jln_buildoptions, "/w15233")
                        table_insert(jln_buildoptions, "/w15240")
                        if version >= 1900030 then
                          if values['msvc_isystem'] == 'default' then
                            table_insert(jln_buildoptions, "/w15246")
                          end
                          table_insert(jln_buildoptions, "/w15249")
                          if version >= 1900032 then
                            table_insert(jln_buildoptions, "/w15258")
                            if version >= 1900034 then
                              table_insert(jln_buildoptions, "/w15263")
                              if values['msvc_isystem'] == 'default' then
                                table_insert(jln_buildoptions, "/w15262")
                              end
                              if version >= 1900037 then
                                table_insert(jln_buildoptions, "/w15267")
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          else
            table_insert(jln_buildoptions, "/Wall")
            table_insert(jln_buildoptions, "/wd4342")
            table_insert(jln_buildoptions, "/wd4350")
            table_insert(jln_buildoptions, "/wd4355")
            table_insert(jln_buildoptions, "/wd4370")
            table_insert(jln_buildoptions, "/wd4371")
            table_insert(jln_buildoptions, "/wd4514")
            table_insert(jln_buildoptions, "/wd4571")
            table_insert(jln_buildoptions, "/wd4577")
            table_insert(jln_buildoptions, "/wd4582")
            table_insert(jln_buildoptions, "/wd4583")
            table_insert(jln_buildoptions, "/wd4587")
            table_insert(jln_buildoptions, "/wd4588")
            table_insert(jln_buildoptions, "/wd4686")
            table_insert(jln_buildoptions, "/wd4710")
            table_insert(jln_buildoptions, "/wd4711")
            table_insert(jln_buildoptions, "/wd4820")
            table_insert(jln_buildoptions, "/wd4866")
            table_insert(jln_buildoptions, "/wd4868")
            table_insert(jln_buildoptions, "/wd5024")
            table_insert(jln_buildoptions, "/wd5025")
            table_insert(jln_buildoptions, "/wd5026")
            table_insert(jln_buildoptions, "/wd5027")
            table_insert(jln_buildoptions, "/wd5243")
            if values['msvc_isystem'] == 'default' then
              table_insert(jln_buildoptions, "/wd4464")
              table_insert(jln_buildoptions, "/wd4548")
              table_insert(jln_buildoptions, "/wd4623")
              table_insert(jln_buildoptions, "/wd4625")
              table_insert(jln_buildoptions, "/wd4626")
              table_insert(jln_buildoptions, "/wd4668")
              table_insert(jln_buildoptions, "/wd5204")
              if version >= 1900000 then
                table_insert(jln_buildoptions, "/wd4582")
                table_insert(jln_buildoptions, "/wd4583")
                if version >= 1900034 then
                  table_insert(jln_buildoptions, "/wd5262")
                  if version >= 1900000 then
                    table_insert(jln_buildoptions, "/wd4774")
                  end
                end
              end
            end
            if version >= 1600000 then
              table_insert(jln_buildoptions, "/wd4800")
              if version >= 1900039 then
                table_insert(jln_buildoptions, "/wd4975")
                if version >= 1900040 then
                  table_insert(jln_buildoptions, "/wd4860")
                  table_insert(jln_buildoptions, "/wd4861")
                  table_insert(jln_buildoptions, "/wd5273")
                  table_insert(jln_buildoptions, "/wd5274")
                  if version >= 1900041 then
                    table_insert(jln_buildoptions, "/wd5306")
                    if version >= 1900043 then
                      table_insert(jln_buildoptions, "/wd5277")
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if values['conversion_warnings'] ~= 'default' then
      if ( values['conversion_warnings'] == 'off' or values['conversion_warnings'] == 'sign' ) then
        table_insert(jln_buildoptions, "/wd4244")
        table_insert(jln_buildoptions, "/wd4245")
        table_insert(jln_buildoptions, "/wd4365")
      else
        table_insert(jln_buildoptions, "/w14244")
        table_insert(jln_buildoptions, "/w14245")
        table_insert(jln_buildoptions, "/w14365")
      end
      if ( values['conversion_warnings'] == 'on' or values['conversion_warnings'] == 'all' or values['conversion_warnings'] == 'sign' ) then
        table_insert(jln_buildoptions, "/w14018")
        table_insert(jln_buildoptions, "/w14388")
        table_insert(jln_buildoptions, "/w14289")
      else
        table_insert(jln_buildoptions, "/wd4018")
        table_insert(jln_buildoptions, "/wd4388")
        table_insert(jln_buildoptions, "/wd4289")
      end
    end
    if values['optimization_warnings'] ~= 'default' then
      table_insert(jln_buildoptions, "/w15263")
    end
    if values['switch_warnings'] ~= 'default' then
      if ( values['switch_warnings'] == 'on' or values['switch_warnings'] == 'mandatory_default' ) then
        table_insert(jln_buildoptions, "/wd4061")
        table_insert(jln_buildoptions, "/w14062")
      else
        if ( values['switch_warnings'] == 'exhaustive_enum' or values['switch_warnings'] == 'exhaustive_enum_and_mandatory_default' ) then
          table_insert(jln_buildoptions, "/w14061")
          table_insert(jln_buildoptions, "/w14062")
        else
          table_insert(jln_buildoptions, "/wd4061")
          table_insert(jln_buildoptions, "/wd4062")
        end
      end
    end
    if values['shadow_warnings'] ~= 'default' then
      if version >= 1900000 then
        if values['shadow_warnings'] == 'off' then
          table_insert(jln_buildoptions, "/wd4456")
          table_insert(jln_buildoptions, "/wd4459")
        else
          if ( values['shadow_warnings'] == 'on' or values['shadow_warnings'] == 'all' ) then
            table_insert(jln_buildoptions, "/w14456")
            table_insert(jln_buildoptions, "/w14459")
          else
            if values['shadow_warnings'] == 'local' then
              table_insert(jln_buildoptions, "/w4456")
              table_insert(jln_buildoptions, "/wd4459")
            end
          end
        end
      end
    end
    if values['warnings_as_error'] ~= 'default' then
      if values['warnings_as_error'] == 'on' then
        table_insert(jln_buildoptions, "/WX")
      else
        if values['warnings_as_error'] == 'off' then
          table_insert(jln_buildoptions, "/WX-")
        else
          table_insert(jln_buildoptions, "/we4455")
          table_insert(jln_buildoptions, "/we4150")
          table_insert(jln_buildoptions, "/we4716")
          table_insert(jln_buildoptions, "/we2124")
        end
      end
    end
    if values['pedantic'] ~= 'default' then
      if values['pedantic'] ~= 'off' then
        table_insert(jln_buildoptions, "/permissive-")
        table_insert(jln_buildoptions, "/Zc:inline")
        table_insert(jln_buildoptions, "/Zc:referenceBinding")
        table_insert(jln_buildoptions, "/Zc:throwingNew")
        if version >= 1900013 then
          table_insert(jln_buildoptions, "/Zc:externConstexpr")
          if version >= 1900014 then
            table_insert(jln_buildoptions, "/Zc:__cplusplus")
            if version >= 1900025 then
              table_insert(jln_buildoptions, "/Zc:preprocessor")
              if version >= 1900028 then
                table_insert(jln_buildoptions, "/Zc:lambda")
                if version >= 1900034 then
                  table_insert(jln_buildoptions, "/Zc:enumTypes")
                  if version >= 1900035 then
                    table_insert(jln_buildoptions, "/Zc:templateScope")
                  end
                end
              end
            end
          end
        end
        if values['pedantic'] == 'as_error' then
          table_insert(jln_buildoptions, "/we4608")
          table_insert(jln_buildoptions, "/we4928")
          if version >= 1900031 then
            table_insert(jln_buildoptions, "/we5254")
            if version >= 1900038 then
              table_insert(jln_buildoptions, "/we5110")
            end
          end
        else
          table_insert(jln_buildoptions, "/w14608")
          table_insert(jln_buildoptions, "/w14928")
          if version >= 1900031 then
            table_insert(jln_buildoptions, "/w15254")
            if version >= 1900038 then
              table_insert(jln_buildoptions, "/w15110")
            end
          end
        end
        if values['msvc_isystem'] ~= 'default' then
          if version >= 1700000 then
            table_insert(jln_buildoptions, "/we4471")
            if version >= 1900021 then
              table_insert(jln_buildoptions, "/we5052")
            end
          end
        else
          if version >= 1700000 then
            table_insert(jln_buildoptions, "/w14471")
          end
        end
      end
    end
    if values['lto'] ~= 'default' then
      if values['lto'] == 'off' then
        table_insert(jln_buildoptions, "/GL-")
      else
        if values['lto'] ~= 'thin_or_nothing' then
          table_insert(jln_buildoptions, "/GL")
          table_insert(jln_buildoptions, "/Gw")
          table_insert(jln_linkoptions, "/LTCG")
        end
      end
    end
    if values['sanitizers'] ~= 'default' then
      if version >= 1900028 then
        if ( values['sanitizers'] == 'on' or values['sanitizers'] == 'with_minimal_code_size' or values['sanitizers'] == 'extra' or values['sanitizers'] == 'extra_with_minimal_code_size' or values['sanitizers'] == 'address' or values['sanitizers'] == 'address_with_minimal_code_size' ) then
          table_insert(jln_buildoptions, "/fsanitize=address")
          table_insert(jln_linkoptions, "/fsanitize=address")
          if ( values['sanitizers'] == 'extra' or values['sanitizers'] == 'extra_with_minimal_code_size' ) then
            table_insert(jln_buildoptions, "/fsanitize-address-use-after-return")
          end
        end
      else
        if ( values['sanitizers'] == 'on' or values['sanitizers'] == 'with_minimal_code_size' or values['sanitizers'] == 'extra' or values['sanitizers'] == 'extra_with_minimal_code_size' or values['sanitizers'] == 'address' or values['sanitizers'] == 'address_with_minimal_code_size' ) then
          table_insert(jln_buildoptions, "/sdl")
          if ( values['optimization'] == '0' ) then
            table_insert(jln_buildoptions, "/RTCsu")
          end
        else
          if values['sanitizers'] == 'off' then
            if values['hardened'] == 'default' then
              table_insert(jln_buildoptions, "/sdl-")
            end
          end
        end
      end
    end
  else
    if compiler == 'clang-cl' then
      if values['pedantic'] ~= 'default' then
        if values['pedantic'] ~= 'off' then
          table_insert(jln_buildoptions, "/Zc:twoPhase")
          if values['pedantic'] == 'as_error' then
            table_insert(jln_buildoptions, "-Werror=write-strings")
          end
        end
      end
      if values['color'] ~= 'default' then
        if values['color'] == 'never' then
          table_insert(jln_buildoptions, "-fno-color-diagnostics")
        else
          if values['color'] == 'always' then
            table_insert(jln_buildoptions, "-fcolor-diagnostics")
          end
        end
      end
      if values['diagnostics_format'] ~= 'default' then
        if values['diagnostics_format'] == 'fixits' then
          table_insert(jln_buildoptions, "-fdiagnostics-parseable-fixits")
        end
      end
      if values['cpu'] ~= 'default' then
        if values['cpu'] == 'generic' then
          table_insert(jln_buildoptions, "-mtune=generic")
          table_insert(jln_linkoptions, "-mtune=generic")
        else
          table_insert(jln_buildoptions, "-march=native")
          table_insert(jln_buildoptions, "-mtune=native")
          table_insert(jln_linkoptions, "-march=native")
          table_insert(jln_linkoptions, "-mtune=native")
        end
      end
      if values['linker'] ~= 'default' then
        if ( values['linker'] == 'lld' or values['linker'] == 'native' ) then
          table_insert(jln_linkoptions, "-fuse-ld=lld")
        else
          if values['linker'] == 'mold' then
            table_insert(jln_linkoptions, "-fuse-ld=mold")
          end
        end
      end
    else
      if compiler == 'icl' then
        if values['warnings'] ~= 'default' then
          if values['warnings'] == 'off' then
            table_insert(jln_buildoptions, "/w")
          else
            table_insert(jln_buildoptions, "/W2")
            table_insert(jln_buildoptions, "/Qdiag-disable:1418,2259")
          end
        end
        if values['warnings_as_error'] ~= 'default' then
          if values['warnings_as_error'] == 'on' then
            table_insert(jln_buildoptions, "/WX")
          else
            if values['warnings_as_error'] == 'basic' then
              table_insert(jln_buildoptions, "/Qdiag-error:1079,39,109")
            end
          end
        end
        if values['windows_bigobj'] ~= 'default' then
          table_insert(jln_buildoptions, "/bigobj")
        end
        if values['symbols'] ~= 'default' then
          if values['symbols'] == 'nodebug' then
            table_insert(jln_buildoptions, "/debug:none")
          else
            if values['symbols'] == 'minimal_debug' then
              table_insert(jln_buildoptions, "/debug:minimal")
            else
              if ( values['symbols'] == 'debug' or values['symbols'] == 'full_debug' or values['symbols'] == 'codeview' ) then
                table_insert(jln_buildoptions, "/debug:full")
              end
            end
          end
        end
        if values['optimization'] ~= 'default' then
          if values['optimization'] == '0' then
            table_insert(jln_buildoptions, "/Ob0")
          else
            if values['optimization'] == 'g' then
              table_insert(jln_buildoptions, "/Ob1")
            else
              table_insert(jln_buildoptions, "/GF")
              if values['optimization'] == '1' then
                table_insert(jln_buildoptions, "/O1")
              else
                if values['optimization'] == '2' then
                  table_insert(jln_buildoptions, "/O2")
                else
                  if values['optimization'] == '3' then
                    table_insert(jln_buildoptions, "/O2")
                  else
                    if values['optimization'] == 'z' then
                      table_insert(jln_buildoptions, "/O3")
                    else
                      if values['optimization'] == 'size' then
                        table_insert(jln_buildoptions, "/Os")
                      else
                        table_insert(jln_buildoptions, "/fast")
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if values['hardened'] ~= 'default' then
          if values['hardened'] == 'off' then
            table_insert(jln_buildoptions, "/GS-")
          else
            table_insert(jln_buildoptions, "/GS")
            table_insert(jln_buildoptions, "/guard:cf")
            table_insert(jln_buildoptions, "/mconditional-branch:all-fix")
            table_insert(jln_buildoptions, "/Qcf-protection:full")
          end
        end
        if values['sanitizers'] ~= 'default' then
          if ( values['sanitizers'] == 'on' or values['sanitizers'] == 'with_minimal_code_size' or values['sanitizers'] == 'extra' or values['sanitizers'] == 'extra_with_minimal_code_size' or values['sanitizers'] == 'address' or values['sanitizers'] == 'address_with_minimal_code_size' ) then
            table_insert(jln_buildoptions, "/Qtrapuv")
            table_insert(jln_buildoptions, "/RTCsu")
            if ( values['sanitizers'] == 'on' or values['sanitizers'] == 'with_minimal_code_size' or values['sanitizers'] == 'extra' or values['sanitizers'] == 'extra_with_minimal_code_size' ) then
              table_insert(jln_buildoptions, "/Qfp-stack-check")
              table_insert(jln_buildoptions, "/Qfp-trap:common")
            end
          end
        end
        if values['cpu'] ~= 'default' then
          if values['cpu'] == 'generic' then
            table_insert(jln_buildoptions, "/Qtune:generic")
            table_insert(jln_linkoptions, "/Qtune:generic")
          else
            table_insert(jln_buildoptions, "/QxHost")
            table_insert(jln_linkoptions, "/QxHost")
          end
        end
      else
        if compiler == 'icc' then
          if values['warnings'] ~= 'default' then
            if values['warnings'] == 'off' then
              table_insert(jln_buildoptions, "-w")
            else
              if values['warnings'] == 'essential' then
                table_insert(jln_buildoptions, "-Wall")
              else
                table_insert(jln_buildoptions, "-Wall")
                table_insert(jln_buildoptions, "-Warray-bounds")
                table_insert(jln_buildoptions, "-Wcast-qual")
                table_insert(jln_buildoptions, "-Wchar-subscripts")
                table_insert(jln_buildoptions, "-Wdisabled-optimization")
                table_insert(jln_buildoptions, "-Wenum-compare")
                table_insert(jln_buildoptions, "-Wextra")
                table_insert(jln_buildoptions, "-Wfloat-equal")
                table_insert(jln_buildoptions, "-Wformat-security")
                table_insert(jln_buildoptions, "-Wformat=2")
                table_insert(jln_buildoptions, "-Winit-self")
                table_insert(jln_buildoptions, "-Winvalid-pch")
                table_insert(jln_buildoptions, "-Wmaybe-uninitialized")
                table_insert(jln_buildoptions, "-Wmissing-include-dirs")
                table_insert(jln_buildoptions, "-Wnarrowing")
                table_insert(jln_buildoptions, "-Wnonnull")
                table_insert(jln_buildoptions, "-Wpointer-sign")
                table_insert(jln_buildoptions, "-Wreorder")
                table_insert(jln_buildoptions, "-Wsequence-point")
                table_insert(jln_buildoptions, "-Wtrigraphs")
                table_insert(jln_buildoptions, "-Wundef")
                table_insert(jln_buildoptions, "-Wunused-function")
                table_insert(jln_buildoptions, "-Wunused-but-set-variable")
                table_insert(jln_buildoptions, "-Wunused-variable")
                table_insert(jln_buildoptions, "-Wpointer-arith")
                table_insert(jln_buildoptions, "-Wdeprecated")
                table_insert(jln_buildoptions, "-Wnon-virtual-dtor")
                table_insert(jln_buildoptions, "-Woverloaded-virtual")
              end
            end
          end
          if values['switch_warnings'] ~= 'default' then
            if ( values['switch_warnings'] == 'on' or values['switch_warnings'] == 'exhaustive_enum' ) then
              table_insert(jln_buildoptions, "-Wswitch-enum")
            else
              if values['switch_warnings'] == 'mandatory_default' then
                table_insert(jln_buildoptions, "-Wswitch-default")
              else
                if values['switch_warnings'] == 'exhaustive_enum_and_mandatory_default' then
                  table_insert(jln_buildoptions, "-Wswitch")
                else
                  table_insert(jln_buildoptions, "-Wno-switch")
                end
              end
            end
          end
          if values['warnings_as_error'] ~= 'default' then
            if values['warnings_as_error'] == 'on' then
              table_insert(jln_buildoptions, "-Werror")
            else
              if values['warnings_as_error'] == 'basic' then
                table_insert(jln_buildoptions, "-diag-error=1079,39,109")
              end
            end
          end
          if values['pedantic'] ~= 'default' then
            if values['pedantic'] == 'off' then
              table_insert(jln_buildoptions, "-fgnu-keywords")
            else
              table_insert(jln_buildoptions, "-fno-gnu-keywords")
              table_insert(jln_buildoptions, "/Zc:inline")
              table_insert(jln_buildoptions, "/Zc:strictStrings")
              table_insert(jln_buildoptions, "/Zc:throwingNew")
            end
          end
          if values['shadow_warnings'] ~= 'default' then
            if values['shadow_warnings'] == 'off' then
              table_insert(jln_buildoptions, "-Wno-shadow")
            else
              if ( values['shadow_warnings'] == 'on' or values['shadow_warnings'] == 'all' ) then
                table_insert(jln_buildoptions, "-Wshadow")
              end
            end
          end
          if values['stl_hardening'] ~= 'default' then
            if values['stl_hardening'] == 'debug_with_broken_abi' then
              table_insert(jln_buildoptions, "-D_GLIBCXX_DEBUG")
              if values['pedantic'] ~= 'default' and not ( values['pedantic'] == 'off' ) then
                table_insert(jln_buildoptions, "-D_GLIBCXX_DEBUG_PEDANTIC")
              end
            else
              if values['stl_hardening'] ~= 'off' then
                table_insert(jln_buildoptions, "-D_GLIBCXX_ASSERTIONS")
              end
            end
          end
          if values['symbols'] ~= 'default' then
            if values['symbols'] == 'nodebug' then
              table_insert(jln_buildoptions, "-g0")
            else
              if values['symbols'] == 'hidden' then
                table_insert(jln_buildoptions, "-fvisibility=hidden")
              else
                if values['symbols'] == 'debug' then
                  table_insert(jln_buildoptions, "-g")
                else
                  if values['symbols'] == 'minimal_debug' then
                    table_insert(jln_buildoptions, "-g1")
                  else
                    if values['symbols'] == 'full_debug' then
                      table_insert(jln_buildoptions, "-g3")
                    end
                  end
                end
              end
            end
          end
          if values['optimization'] ~= 'default' then
            if values['optimization'] == '0' then
              table_insert(jln_buildoptions, "-O0")
            else
              if values['optimization'] == 'g' then
                table_insert(jln_buildoptions, "-O1")
              else
                if values['optimization'] == '1' then
                  table_insert(jln_buildoptions, "-O1")
                else
                  if values['optimization'] == '2' then
                    table_insert(jln_buildoptions, "-O2")
                  else
                    if values['optimization'] == '3' then
                      table_insert(jln_buildoptions, "-O3")
                    else
                      if values['optimization'] == 'z' then
                        table_insert(jln_buildoptions, "-fast")
                      else
                        if values['optimization'] == 'size' then
                          table_insert(jln_buildoptions, "-Os")
                        else
                          table_insert(jln_buildoptions, "-Ofast")
                        end
                      end
                    end
                  end
                end
              end
            end
          end
          if values['hardened'] ~= 'default' then
            if ( values['hardened'] == 'on' or values['hardened'] == 'all' ) then
              table_insert(jln_buildoptions, "-D_FORTIFY_SOURCE=2")
              if values['hardened'] == 'all' then
                table_insert(jln_buildoptions, "-fstack-protector-all")
              else
                table_insert(jln_buildoptions, "-fstack-protector-strong")
              end
              table_insert(jln_buildoptions, "-fcf-protection=full")
              table_insert(jln_linkoptions, "-Xlinker-zrelro")
              table_insert(jln_linkoptions, "-Xlinker-znow")
              table_insert(jln_linkoptions, "-Xlinker-znoexecstack")
            end
          end
          if values['sanitizers'] ~= 'default' then
            if ( values['sanitizers'] == 'on' or values['sanitizers'] == 'with_minimal_code_size' or values['sanitizers'] == 'extra' or values['sanitizers'] == 'extra_with_minimal_code_size' or values['sanitizers'] == 'address' or values['sanitizers'] == 'address_with_minimal_code_size' ) then
              table_insert(jln_buildoptions, "-ftrapuv")
              if ( values['sanitizers'] == 'on' or values['sanitizers'] == 'with_minimal_code_size' or values['sanitizers'] == 'extra' or values['sanitizers'] == 'extra_with_minimal_code_size' ) then
                table_insert(jln_buildoptions, "-fp-stack-check")
                table_insert(jln_buildoptions, "-fp-trap=common")
              end
            end
          end
          if values['linker'] ~= 'default' then
            if values['linker'] == 'bfd' then
              table_insert(jln_linkoptions, "-fuse-ld=bfd")
            else
              if values['linker'] == 'gold' then
                table_insert(jln_linkoptions, "-fuse-ld=gold")
              else
                if values['linker'] == 'mold' then
                  table_insert(jln_linkoptions, "-fuse-ld=mold")
                else
                  table_insert(jln_linkoptions, "-fuse-ld=lld")
                end
              end
            end
          end
          if values['lto'] ~= 'default' then
            if values['lto'] == 'off' then
              table_insert(jln_buildoptions, "-no-ipo")
              table_insert(jln_linkoptions, "-no-ipo")
            else
              if values['lto'] ~= 'thin_or_nothing' then
                table_insert(jln_buildoptions, "-ipo")
                table_insert(jln_linkoptions, "-ipo")
              end
            end
          end
          if values['exceptions'] ~= 'default' then
            if values['exceptions'] == 'on' then
              table_insert(jln_buildoptions, "-fexceptions")
            else
              table_insert(jln_buildoptions, "-fno-exceptions")
            end
          end
          if values['rtti'] ~= 'default' then
            if values['rtti'] == 'on' then
              table_insert(jln_buildoptions, "-frtti")
            else
              table_insert(jln_buildoptions, "-fno-rtti")
            end
          end
          if values['cpu'] ~= 'default' then
            if values['cpu'] == 'generic' then
              table_insert(jln_buildoptions, "-mtune=generic")
              table_insert(jln_linkoptions, "-mtune=generic")
            else
              table_insert(jln_buildoptions, "-xHost")
              table_insert(jln_linkoptions, "-xHost")
            end
          end
        else
          if os.target() == 'mingw' then
            if values['windows_bigobj'] ~= 'default' then
              table_insert(jln_buildoptions, "-Wa,-mbig-obj")
            end
          end
        end
      end
    end
  end
  return {buildoptions=jln_buildoptions, linkoptions=jln_linkoptions}
end

