# File generated with https://github.com/jonathanpoelen/cpp-compiler-options

if get_variable('jln_use_profile_buildtype', false)
  ___jln_options_by_modes = {
    'debug': {
      'emcc_debug': 'on',
      'sanitizers': 'on',
      'stl_hardening': 'debug',
      'symbols': 'debug',
    },
    'debugoptimized': {
      'optimization': 'g',
      'symbols': 'debug',
    },
    'minsize': {
      'lto': 'on',
      'optimization': 'size',
    },
    'release': {
      'lto': 'on',
      'optimization': '3',
    },
  }
else
  ___jln_options_by_modes = {}
endif

___jln_default_flags = get_variable('jln_default_flags', {}) + get_variable('jln_buildtype_flags', ___jln_options_by_modes).get(get_option('buildtype'), {})
if get_option('warning_level') == '0'
  ___jln_warnings = 'off'
else
  ___jln_warnings = ___jln_default_flags.get('warnings', get_option('jln_warnings'))
endif
___jln_flags = {
  'analyzer': ___jln_default_flags.get('analyzer', get_option('jln_analyzer')),
  'analyzer_too_complex_warning': ___jln_default_flags.get('analyzer_too_complex_warning', get_option('jln_analyzer_too_complex_warning')),
  'analyzer_verbosity': ___jln_default_flags.get('analyzer_verbosity', get_option('jln_analyzer_verbosity')),
  'color': ___jln_default_flags.get('color', get_option('jln_color')),
  'conversion_warnings': ___jln_default_flags.get('conversion_warnings', get_option('jln_conversion_warnings')),
  'coverage': ___jln_default_flags.get('coverage', get_option('jln_coverage')),
  'covered_switch_default_warnings': ___jln_default_flags.get('covered_switch_default_warnings', get_option('jln_covered_switch_default_warnings')),
  'cpu': ___jln_default_flags.get('cpu', get_option('jln_cpu')),
  'diagnostics_format': ___jln_default_flags.get('diagnostics_format', get_option('jln_diagnostics_format')),
  'diagnostics_show_template': ___jln_default_flags.get('diagnostics_show_template', get_option('jln_diagnostics_show_template')),
  'emcc_debug': ___jln_default_flags.get('emcc_debug', get_option('jln_emcc_debug')),
  'exceptions': ___jln_default_flags.get('exceptions', get_option('jln_exceptions')),
  'hardened': ___jln_default_flags.get('hardened', get_option('jln_hardened')),
  'linker': ___jln_default_flags.get('linker', get_option('jln_linker')),
  'lto': ___jln_default_flags.get('lto', get_option('jln_lto')),
  'msvc_crt_secure_no_warnings': ___jln_default_flags.get('msvc_crt_secure_no_warnings', get_option('jln_msvc_crt_secure_no_warnings')),
  'msvc_diagnostics_format': ___jln_default_flags.get('msvc_diagnostics_format', get_option('jln_msvc_diagnostics_format')),
  'msvc_isystem': ___jln_default_flags.get('msvc_isystem', get_option('jln_msvc_isystem')),
  'msvc_isystem_with_template_instantiations_treated_as_non_external': ___jln_default_flags.get('msvc_isystem_with_template_instantiations_treated_as_non_external', get_option('jln_msvc_isystem_with_template_instantiations_treated_as_non_external')),
  'ndebug': ___jln_default_flags.get('ndebug', get_option('jln_ndebug')),
  'noexcept_warnings': ___jln_default_flags.get('noexcept_warnings', get_option('jln_noexcept_warnings')),
  'optimization': ___jln_default_flags.get('optimization', get_option('jln_optimization')),
  'optimization_warnings': ___jln_default_flags.get('optimization_warnings', get_option('jln_optimization_warnings')),
  'pedantic': ___jln_default_flags.get('pedantic', get_option('jln_pedantic')),
  'reproducible_build_warnings': ___jln_default_flags.get('reproducible_build_warnings', get_option('jln_reproducible_build_warnings')),
  'rtti': ___jln_default_flags.get('rtti', get_option('jln_rtti')),
  'sanitizers': ___jln_default_flags.get('sanitizers', get_option('jln_sanitizers')),
  'shadow_warnings': ___jln_default_flags.get('shadow_warnings', get_option('jln_shadow_warnings')),
  'stl_fix': ___jln_default_flags.get('stl_fix', get_option('jln_stl_fix')),
  'stl_hardening': ___jln_default_flags.get('stl_hardening', get_option('jln_stl_hardening')),
  'suggest_attributes': ___jln_default_flags.get('suggest_attributes', get_option('jln_suggest_attributes')),
  'switch_warnings': ___jln_default_flags.get('switch_warnings', get_option('jln_switch_warnings')),
  'symbols': ___jln_default_flags.get('symbols', get_option('jln_symbols')),
  'unsafe_buffer_usage_warnings': ___jln_default_flags.get('unsafe_buffer_usage_warnings', get_option('jln_unsafe_buffer_usage_warnings')),
  'var_init': ___jln_default_flags.get('var_init', get_option('jln_var_init')),
  'warnings': ___jln_warnings,
  'warnings_as_error': ___jln_default_flags.get('warnings_as_error', get_option('jln_warnings_as_error')),
  'windows_abi_compatibility_warnings': ___jln_default_flags.get('windows_abi_compatibility_warnings', get_option('jln_windows_abi_compatibility_warnings')),
  'windows_bigobj': ___jln_default_flags.get('windows_bigobj', get_option('jln_windows_bigobj')),
}

jln_custom_cpp_flags = []
jln_custom_link_flags = []

___jln_compiler = meson.get_compiler('cpp')
___jln_compiler_id = ___jln_compiler.get_id()
if ___jln_compiler_id == 'emscripten'
  ___jln_compiler_version = ___jln_compiler.get_define('__clang_major__.__clang_minor__').replace(' ', '')
  ___jln_is_clang_like = true
else
  ___jln_compiler_version = ___jln_compiler.version()
  ___jln_is_clang_like = ['clang', 'emscripten', 'icx', 'icx-cl'].contains(___jln_compiler_id)
endif
___jln_linker_id = ___jln_compiler.get_linker_id()

___jln_custom_flags = get_variable('jln_custom_flags', []) + [___jln_flags]

foreach ___jln_flags : ___jln_custom_flags
  jln_cpp_flags = []
  jln_link_flags = []


  if (  ___jln_flags.get('ndebug', 'default') != 'default' )
    if (  ( ___jln_compiler_id == 'msvc' or ___jln_compiler_id == 'intel-cl' ) )
      if (  ___jln_flags.get('ndebug', 'default') == 'off' )
        jln_cpp_flags += ['/UNDEBUG', ]
      else
        if (  ___jln_flags.get('ndebug', 'default') == 'on' )
          jln_cpp_flags += ['/DNDEBUG', ]
        else
          if (  ___jln_flags.get('optimization', 'default') != 'default' and not ( ___jln_flags.get('optimization', 'default') == '0' or ___jln_flags.get('optimization', 'default') == 'g' ) )
            jln_cpp_flags += ['/DNDEBUG', ]
          endif
        endif
      endif
    else
      if (  ___jln_flags.get('ndebug', 'default') == 'off' )
        jln_cpp_flags += ['-UNDEBUG', ]
      else
        if (  ___jln_flags.get('ndebug', 'default') == 'on' )
          jln_cpp_flags += ['-DNDEBUG', ]
        else
          if (  ___jln_flags.get('optimization', 'default') != 'default' and not ( ___jln_flags.get('optimization', 'default') == '0' or ___jln_flags.get('optimization', 'default') == 'g' ) )
            jln_cpp_flags += ['-DNDEBUG', ]
          endif
        endif
      endif
    endif
  endif
  if (  ( ___jln_compiler_id == 'gcc' or ___jln_is_clang_like or ___jln_compiler_id == 'clang-cl' ) )
    if (  ___jln_flags.get('warnings', 'default') != 'default' )
      if (  ___jln_flags.get('warnings', 'default') == 'off' )
        jln_cpp_flags += ['-w', ]
      else
        if (  ___jln_flags.get('warnings', 'default') == 'essential' )
          jln_cpp_flags += ['-Wall', '-Wextra', ]
        else
          if (  ___jln_compiler_id == 'gcc' )
            jln_cpp_flags += ['-Wall', '-Wextra', ]
            if (  ___jln_compiler_version.version_compare('<8.0') )
              jln_cpp_flags += ['-Wcast-align', ]
            endif
            jln_cpp_flags += ['-Wcast-qual', '-Wdisabled-optimization', '-Wfloat-equal', '-Wformat-security', '-Wformat=2', '-Winvalid-pch', '-Wmissing-declarations', '-Wmissing-include-dirs', '-Wpacked', '-Wredundant-decls', '-Wundef', '-Wunused-macros', '-Wpointer-arith', '-Wnon-virtual-dtor', '-Wold-style-cast', '-Woverloaded-virtual', ]
            if (  ___jln_compiler_version.version_compare('>=4.7') )
              jln_cpp_flags += ['-Wsuggest-attribute=noreturn', '-Wzero-as-null-pointer-constant', '-Wlogical-op', '-Wvector-operation-performance', '-Wdouble-promotion', '-Wtrampolines', ]
              if (  ___jln_compiler_version.version_compare('>=4.8') )
                jln_cpp_flags += ['-Wuseless-cast', ]
                if (  ___jln_compiler_version.version_compare('>=4.9') )
                  jln_cpp_flags += ['-Wconditionally-supported', ]
                  if (  ___jln_compiler_version.version_compare('>=5.1') )
                    jln_cpp_flags += ['-Wformat-signedness', '-Warray-bounds=2', '-Wstrict-null-sentinel', '-Wsuggest-override', ]
                    if (  ___jln_compiler_version.version_compare('>=6.1') )
                      jln_cpp_flags += ['-Wduplicated-cond', '-Wnull-dereference', ]
                      if (  ___jln_compiler_version.version_compare('>=7.0') )
                        jln_cpp_flags += ['-Waligned-new', ]
                        if (  ___jln_compiler_version.version_compare('>=7.1') )
                          jln_cpp_flags += ['-Walloc-zero', '-Walloca', '-Wformat-overflow=2', '-Wduplicated-branches', ]
                          if (  ___jln_compiler_version.version_compare('>=8.0') )
                            jln_cpp_flags += ['-Wcast-align=strict', '-Wformat-truncation=2', '-Wshift-overflow=2', '-Wclass-memaccess', ]
                            if (  ___jln_compiler_version.version_compare('>=14.0') )
                              jln_cpp_flags += ['-Walloc-size', ]
                            endif
                          endif
                        endif
                      endif
                    endif
                  endif
                endif
              endif
            endif
            if (  ___jln_flags.get('warnings', 'default') == 'extensive' )
              if (  ___jln_compiler_version.version_compare('>=8.0') )
                jln_cpp_flags += ['-Wstringop-overflow=4', ]
                if (  ___jln_compiler_version.version_compare('>=12.0') )
                  jln_cpp_flags += ['-Wuse-after-free=3', ]
                endif
              endif
            endif
          else
            jln_cpp_flags += ['-Weverything', '-Wno-documentation', '-Wno-documentation-unknown-command', '-Wno-newline-eof', '-Wno-c++98-compat', '-Wno-c++98-compat-pedantic', '-Wno-padded', '-Wno-global-constructors', '-Wno-weak-vtables', '-Wno-exit-time-destructors', ]
            if (   not ( ( ___jln_flags.get('switch_warnings', 'default') == 'off' or ___jln_flags.get('switch_warnings', 'default') == 'exhaustive_enum' or ___jln_flags.get('switch_warnings', 'default') == 'exhaustive_enum_and_mandatory_default' ) ) )
              jln_cpp_flags += ['-Wno-switch-enum', ]
            endif
            if (  ___jln_flags.get('covered_switch_default_warnings', 'default') == 'default' )
              jln_cpp_flags += ['-Wno-covered-switch-default', ]
            endif
            if (  ___jln_flags.get('suggest_attributes', 'default') == 'default' )
              jln_cpp_flags += ['-Wno-missing-noreturn', ]
            endif
            if (  ___jln_flags.get('conversion_warnings', 'default') != 'default' )
              if (  ___jln_flags.get('conversion_warnings', 'default') == 'conversion' )
                jln_cpp_flags += ['-Wno-sign-compare', '-Wno-sign-conversion', ]
              else
                if (  ( ___jln_flags.get('conversion_warnings', 'default') == 'float' or ___jln_flags.get('conversion_warnings', 'default') == 'sign' ) )
                  jln_cpp_flags += ['-Wno-conversion', ]
                endif
              endif
            endif
            if (  ___jln_compiler_version.version_compare('>=3.9') )
              jln_cpp_flags += ['-Wno-undefined-var-template', ]
              if (  ___jln_compiler_version.version_compare('>=5.0') )
                jln_cpp_flags += ['-Wno-inconsistent-missing-destructor-override', ]
                if (  ___jln_compiler_version.version_compare('>=9.0') )
                  jln_cpp_flags += ['-Wno-ctad-maybe-unsupported', ]
                  if (  ___jln_compiler_version.version_compare('>=10.0') )
                    jln_cpp_flags += ['-Wno-c++20-compat', ]
                    if (  ___jln_compiler_version.version_compare('>=11.0') )
                      jln_cpp_flags += ['-Wno-suggest-destructor-override', ]
                      if (  ___jln_compiler_version.version_compare('>=16.0') )
                        if (  ___jln_flags.get('unsafe_buffer_usage_warnings', 'default') == 'default' )
                          jln_cpp_flags += ['-Wno-unsafe-buffer-usage', ]
                        endif
                      endif
                    endif
                  endif
                endif
              endif
            endif
          endif
        endif
      endif
    endif
    if (  ___jln_flags.get('optimization_warnings', 'default') != 'default' )
      if (  ___jln_compiler_id == 'gcc' )
        if (  ___jln_compiler_version.version_compare('>=9.0') )
          jln_cpp_flags += ['-Wpessimizing-move', '-Wredundant-move', ]
          if (  ___jln_compiler_version.version_compare('>=11.0') )
            jln_cpp_flags += ['-Wrange-loop-construct', ]
            if (  ___jln_compiler_version.version_compare('>=13.0') )
              jln_cpp_flags += ['-Wself-move', ]
              if (  ___jln_compiler_version.version_compare('>=14.0') )
                jln_cpp_flags += ['-Wnrvo', ]
              endif
            endif
          endif
        endif
      else
        if (  ___jln_compiler_version.version_compare('>=3.6') )
          jln_cpp_flags += ['-Wself-move', ]
          if (  ___jln_compiler_version.version_compare('>=3.7') )
            jln_cpp_flags += ['-Wpessimizing-move', '-Wredundant-move', ]
            if (  ___jln_compiler_version.version_compare('>=10.0') )
              jln_cpp_flags += ['-Wrange-loop-construct', ]
            endif
          endif
        endif
      endif
    endif
    if (  ___jln_compiler_id == 'gcc' )
      if (  ___jln_flags.get('switch_warnings', 'default') != 'default' )
        if (  ___jln_flags.get('switch_warnings', 'default') == 'on' )
          jln_cpp_flags += ['-Wswitch', ]
        else
          if (  ___jln_flags.get('switch_warnings', 'default') == 'exhaustive_enum' )
            jln_cpp_flags += ['-Wswitch-enum', ]
          else
            if (  ___jln_flags.get('switch_warnings', 'default') == 'mandatory_default' )
              jln_cpp_flags += ['-Wswitch-default', ]
            else
              if (  ___jln_flags.get('switch_warnings', 'default') == 'exhaustive_enum_and_mandatory_default' )
                jln_cpp_flags += ['-Wswitch-default', '-Wswitch-enum', ]
              else
                jln_cpp_flags += ['-Wno-switch', '-Wno-switch-enum', '-Wno-switch-default', ]
              endif
            endif
          endif
        endif
      endif
    else
      if (  ___jln_flags.get('switch_warnings', 'default') != 'default' )
        if (  ___jln_flags.get('switch_warnings', 'default') == 'on' )
          jln_cpp_flags += ['-Wswitch', '-Wno-switch-default', ]
        else
          if (  ___jln_flags.get('switch_warnings', 'default') == 'mandatory_default' )
            jln_cpp_flags += ['-Wswitch', '-Wswitch-default', ]
          else
            if (  ___jln_flags.get('switch_warnings', 'default') == 'exhaustive_enum' )
              jln_cpp_flags += ['-Wswitch', '-Wswitch-enum', '-Wno-switch-default', ]
            else
              if (  ___jln_flags.get('switch_warnings', 'default') == 'exhaustive_enum_and_mandatory_default' )
                jln_cpp_flags += ['-Wswitch', '-Wswitch-enum', '-Wswitch-default', ]
              else
                jln_cpp_flags += ['-Wno-switch', '-Wno-switch-enum', '-Wno-switch-default', ]
              endif
            endif
          endif
        endif
      endif
      if (  ___jln_flags.get('covered_switch_default_warnings', 'default') != 'default' )
        if (  ___jln_flags.get('covered_switch_default_warnings', 'default') == 'off' )
          jln_cpp_flags += ['-Wno-covered-switch-default', ]
        else
          jln_cpp_flags += ['-Wcovered-switch-default', ]
        endif
      endif
    endif
    if (  ___jln_flags.get('unsafe_buffer_usage_warnings', 'default') != 'default' )
      if (  ( ( ___jln_is_clang_like and ___jln_compiler_version.version_compare('>=16.0') ) or ( ___jln_compiler_id == 'clang-cl' and ___jln_compiler_version.version_compare('>=16.0') ) ) )
        if (  ___jln_flags.get('unsafe_buffer_usage_warnings', 'default') == 'off' )
          jln_cpp_flags += ['-Wno-unsafe-buffer-usage', ]
        else
          jln_cpp_flags += ['-Wunsafe-buffer-usage', ]
        endif
      endif
    endif
    if (  ___jln_flags.get('shadow_warnings', 'default') != 'default' )
      if (  ___jln_flags.get('shadow_warnings', 'default') == 'off' )
        jln_cpp_flags += ['-Wno-shadow', ]
        if (  ( ( ___jln_is_clang_like and ___jln_compiler_version.version_compare('>=8.0') ) or ( ___jln_compiler_id == 'clang-cl' and ___jln_compiler_version.version_compare('>=8.0') ) ) )
          jln_cpp_flags += ['-Wno-shadow-field', ]
        endif
      else
        if (  ___jln_flags.get('shadow_warnings', 'default') == 'on' )
          jln_cpp_flags += ['-Wshadow', ]
        else
          if (  ___jln_flags.get('shadow_warnings', 'default') == 'all' )
            if (  ___jln_compiler_id == 'gcc' )
              jln_cpp_flags += ['-Wshadow', ]
            else
              jln_cpp_flags += ['-Wshadow-all', ]
            endif
          else
            if (  ( ___jln_compiler_id == 'gcc' and ___jln_compiler_version.version_compare('>=7.1') ) )
              if (  ___jln_flags.get('shadow_warnings', 'default') == 'local' )
                jln_cpp_flags += ['-Wshadow=local', ]
              else
                jln_cpp_flags += ['-Wshadow=compatible-local', ]
              endif
            endif
          endif
        endif
      endif
    endif
    if (  ___jln_flags.get('suggest_attributes', 'default') != 'default' )
      if (  ___jln_flags.get('suggest_attributes', 'default') == 'on' )
        jln_cpp_flags += ['-Wmissing-noreturn', ]
      else
        if (  ___jln_flags.get('suggest_attributes', 'default') == 'common' )
          jln_cpp_flags += ['-Wmissing-noreturn', '-Wmissing-format-attribute', ]
        else
          if (  ( ___jln_flags.get('suggest_attributes', 'default') == 'analysis' or ___jln_flags.get('suggest_attributes', 'default') == 'all' ) )
            jln_cpp_flags += ['-Wmissing-noreturn', '-Wmissing-format-attribute', ]
            if (  ___jln_compiler_id == 'gcc' )
              if (  ___jln_compiler_version.version_compare('>=8.0') )
                jln_cpp_flags += ['-Wsuggest-attribute=malloc', ]
                if (  ___jln_compiler_version.version_compare('>=14.0') )
                  jln_cpp_flags += ['-Wsuggest-attribute=returns_nonnull', ]
                endif
              endif
              if (  ( ___jln_flags.get('suggest_attributes', 'default') == 'all' or ___jln_flags.get('suggest_attributes', 'default') == 'unity' ) )
                if (  ___jln_compiler_version.version_compare('>=5.0') )
                  jln_cpp_flags += ['-Wsuggest-final-types', '-Wsuggest-final-methods', ]
                endif
                if (  ___jln_flags.get('suggest_attributes', 'default') == 'all' )
                  jln_cpp_flags += ['-Wsuggest-attribute=pure', '-Wsuggest-attribute=const', ]
                  if (  ___jln_compiler_version.version_compare('>=5.1') )
                    jln_cpp_flags += ['-Wnoexcept', ]
                    if (  ___jln_compiler_version.version_compare('>=8.0') )
                      jln_cpp_flags += ['-Wsuggest-attribute=cold', ]
                    endif
                  endif
                endif
              endif
            endif
          else
            jln_cpp_flags += ['-Wno-missing-noreturn', '-Wno-missing-format-attribute', ]
            if (  ___jln_compiler_id == 'gcc' )
              jln_cpp_flags += ['-Wno-suggest-attribute=pure', '-Wno-suggest-attribute=const', ]
              if (  ___jln_compiler_version.version_compare('>=5.0') )
                jln_cpp_flags += ['-Wno-suggest-final-types', '-Wno-suggest-final-methods', ]
                if (  ___jln_compiler_version.version_compare('>=5.1') )
                  jln_cpp_flags += ['-Wno-noexcept', ]
                  if (  ___jln_compiler_version.version_compare('>=8.0') )
                    jln_cpp_flags += ['-Wno-suggest-attribute=malloc', ]
                    if (  ___jln_compiler_version.version_compare('>=14.0') )
                      jln_cpp_flags += ['-Wno-suggest-attribute=returns_nonnull', ]
                    endif
                  endif
                endif
              endif
            endif
          endif
        endif
      endif
    endif
    if (  ___jln_flags.get('var_init', 'default') != 'default' )
      if (  ( ( ___jln_compiler_id == 'gcc' and ___jln_compiler_version.version_compare('>=12.0') ) or ( ___jln_is_clang_like and ___jln_compiler_version.version_compare('>=8.0') ) or ( ___jln_compiler_id == 'clang-cl' and ___jln_compiler_version.version_compare('>=8.0') ) ) )
        if (  ___jln_flags.get('var_init', 'default') == 'pattern' )
          jln_cpp_flags += ['-ftrivial-auto-var-init=pattern', ]
          if (  ___jln_compiler_id == 'gcc' )
            jln_cpp_flags += ['-Wtrivial-auto-var-init', ]
          endif
        else
          if (  ___jln_flags.get('var_init', 'default') == 'zero' )
            if (  ( ( ___jln_is_clang_like and ___jln_compiler_version.version_compare('<=15.0') ) or ( ___jln_compiler_id == 'clang-cl' and ___jln_compiler_version.version_compare('<=15.0') ) ) )
              if (  ___jln_flags.get('var_init', 'default') == 'zero' )
                jln_cpp_flags += ['-enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang', ]
              endif
            else
              jln_cpp_flags += ['-ftrivial-auto-var-init=zero', ]
              if (  ___jln_compiler_id == 'gcc' )
                jln_cpp_flags += ['-Wtrivial-auto-var-init', ]
              endif
            endif
          else
            jln_cpp_flags += ['-ftrivial-auto-var-init=uninitialized', ]
          endif
        endif
      endif
    endif
    if (  ___jln_flags.get('windows_abi_compatibility_warnings', 'default') != 'default' )
      if (  ( ( ___jln_compiler_id == 'gcc' and ___jln_compiler_version.version_compare('>=10.0') ) or ___jln_compiler_id != 'gcc' ) )
        if (  ___jln_flags.get('windows_abi_compatibility_warnings', 'default') == 'on' )
          jln_cpp_flags += ['-Wmismatched-tags', ]
        else
          jln_cpp_flags += ['-Wno-mismatched-tags', ]
        endif
      endif
    endif
    if (  ___jln_flags.get('reproducible_build_warnings', 'default') != 'default' )
      if (  ( ___jln_compiler_id == 'gcc' and ___jln_compiler_version.version_compare('>=4.9') ) )
        if (  ___jln_flags.get('reproducible_build_warnings', 'default') == 'on' )
          jln_cpp_flags += ['-Wdate-time', ]
        else
          jln_cpp_flags += ['-Wno-date-time', ]
        endif
      endif
    endif
    if (  ___jln_flags.get('warnings_as_error', 'default') != 'default' )
      if (  ___jln_flags.get('warnings_as_error', 'default') == 'on' )
        jln_cpp_flags += ['-Werror', ]
      else
        if (  ___jln_flags.get('warnings_as_error', 'default') == 'basic' )
          jln_cpp_flags += ['-Werror=return-type', '-Werror=init-self', ]
          if (  ___jln_compiler_id == 'gcc' )
            jln_cpp_flags += ['-Werror=div-by-zero', ]
            if (  ___jln_compiler_version.version_compare('>=5.1') )
              jln_cpp_flags += ['-Werror=array-bounds', '-Werror=logical-op', '-Werror=logical-not-parentheses', ]
              if (  ___jln_compiler_version.version_compare('>=7.0') )
                jln_cpp_flags += ['-Werror=literal-suffix', ]
              endif
            endif
          else
            jln_cpp_flags += ['-Werror=array-bounds', '-Werror=division-by-zero', ]
            if (  ___jln_compiler_version.version_compare('>=3.4') )
              jln_cpp_flags += ['-Werror=logical-not-parentheses', ]
              if (  ___jln_compiler_version.version_compare('>=3.6') )
                jln_cpp_flags += ['-Werror=delete-incomplete', ]
                if (  ___jln_compiler_version.version_compare('>=6.0') )
                  jln_cpp_flags += ['-Werror=user-defined-literals', ]
                  if (  ___jln_compiler_version.version_compare('>=7.0') )
                    jln_cpp_flags += ['-Werror=dynamic-class-memaccess', ]
                  endif
                endif
              endif
            endif
          endif
        else
          jln_cpp_flags += ['-Wno-error', ]
        endif
      endif
    endif
    if (  ___jln_flags.get('color', 'default') != 'default' )
      if (  ( ___jln_compiler_version.version_compare('>=4.9') or ___jln_compiler_id != 'gcc' ) )
        if (  ___jln_flags.get('color', 'default') == 'auto' )
          jln_cpp_flags += ['-fdiagnostics-color=auto', ]
        else
          if (  ___jln_flags.get('color', 'default') == 'never' )
            jln_cpp_flags += ['-fdiagnostics-color=never', ]
          else
            jln_cpp_flags += ['-fdiagnostics-color=always', ]
          endif
        endif
      endif
    endif
    if (  ___jln_flags.get('lto', 'default') != 'default' )
      if (  ___jln_flags.get('lto', 'default') == 'off' )
        jln_cpp_flags += ['-fno-lto', ]
        jln_link_flags += ['-fno-lto', ]
        if (  ___jln_compiler_id == 'gcc' )
          jln_cpp_flags += ['-fno-whole-program', ]
        endif
      else
        if (  ___jln_compiler_id == 'gcc' )
          if (  ___jln_flags.get('lto', 'default') != 'thin_or_nothing' )
            if (  ( ___jln_flags.get('lto', 'default') == 'whole_program' or ___jln_flags.get('lto', 'default') == 'whole_program_and_full_lto' ) )
              jln_cpp_flags += ['-fwhole-program', ]
            endif
            if (  ___jln_compiler_version.version_compare('>=10.0') )
              jln_cpp_flags += ['-flto=auto', ]
              jln_link_flags += ['-flto=auto', ]
            else
              jln_cpp_flags += ['-flto', ]
              jln_link_flags += ['-flto', ]
            endif
          endif
        else
          if (  ( ( ___jln_flags.get('lto', 'default') == 'on' or ___jln_flags.get('lto', 'default') == 'thin_or_nothing' or ___jln_flags.get('lto', 'default') == 'whole_program' ) and ___jln_compiler_version.version_compare('>=4.0') ) )
            jln_cpp_flags += ['-flto=thin', ]
            jln_link_flags += ['-flto=thin', ]
          else
            jln_cpp_flags += ['-flto', ]
            jln_link_flags += ['-flto', ]
            if (  ___jln_compiler_version.version_compare('>=10.0') )
              jln_cpp_flags += ['-fvirtual-function-elimination', ]
              jln_link_flags += ['-fvirtual-function-elimination', ]
            endif
          endif
          if (  ___jln_compiler_version.version_compare('>=3.9') )
            if (  ( ___jln_flags.get('lto', 'default') == 'whole_program' or ___jln_flags.get('lto', 'default') == 'whole_program_and_full_lto' ) )
              jln_cpp_flags += ['-fwhole-program-vtables', ]
              jln_link_flags += ['-fwhole-program-vtables', ]
            endif
            if (  ___jln_compiler_version.version_compare('>=7.0') )
              jln_cpp_flags += ['-fforce-emit-vtables', ]
              jln_link_flags += ['-fforce-emit-vtables', ]
            endif
          endif
        endif
      endif
    endif
    if (  ___jln_flags.get('stl_hardening', 'default') != 'default' )
      if (  ___jln_flags.get('stl_hardening', 'default') != 'off' )
        if (  ___jln_flags.get('stl_hardening', 'default') == 'fast' )
          if (  ___jln_compiler_id != 'clang-cl' )
            jln_cpp_flags += ['-D_GLIBCXX_ASSERTIONS', ]
          endif
          jln_cpp_flags += ['-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_FAST', ]
        else
          if (  ___jln_flags.get('stl_hardening', 'default') == 'extensive' )
            if (  ___jln_compiler_id != 'clang-cl' )
              jln_cpp_flags += ['-D_GLIBCXX_ASSERTIONS', ]
            endif
            jln_cpp_flags += ['-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_EXTENSIVE', ]
          else
            if (  ___jln_flags.get('stl_hardening', 'default') == 'debug' )
              if (  ___jln_compiler_id != 'clang-cl' )
                jln_cpp_flags += ['-D_GLIBCXX_ASSERTIONS', ]
              endif
              jln_cpp_flags += ['-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_DEBUG', ]
            else
              if (  ___jln_compiler_id != 'clang-cl' )
                jln_cpp_flags += ['-D_GLIBCXX_DEBUG', ]
                if (  ___jln_flags.get('pedantic', 'default') != 'default' and not ( ___jln_flags.get('pedantic', 'default') == 'off' ) )
                  jln_cpp_flags += ['-D_GLIBCXX_DEBUG_PEDANTIC', ]
                endif
              endif
              if (  ( ___jln_is_clang_like and ___jln_compiler_version.version_compare('<18.0') ) )
                if (  ___jln_compiler_version.version_compare('>=8.0') )
                  jln_cpp_flags += ['-D_LIBCPP_DEBUG=1', ]
                endif
              else
                jln_cpp_flags += ['-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_DEBUG', '-D_LIBCPP_ABI_BOUNDED_ITERATORS', '-D_LIBCPP_ABI_BOUNDED_ITERATORS_IN_STRING', '-D_LIBCPP_ABI_BOUNDED_ITERATORS_IN_VECTOR', '-D_LIBCPP_ABI_BOUNDED_UNIQUE_PTR', '-D_LIBCPP_ABI_BOUNDED_ITERATORS_IN_STD_ARRAY', ]
              endif
            endif
          endif
        endif
      endif
    endif
    if (  ___jln_flags.get('sanitizers', 'default') != 'default' )
      if (  ( ( ___jln_compiler_id == 'gcc' and ___jln_compiler_version.version_compare('>=4.8') ) or ( ___jln_is_clang_like and ___jln_compiler_version.version_compare('>=3.2') ) or ( ___jln_compiler_id == 'clang-cl' and ___jln_compiler_version.version_compare('>=4.0') ) ) )
        if (  ___jln_flags.get('sanitizers', 'default') == 'off' )
          jln_cpp_flags += ['-fno-sanitize=all', ]
          jln_link_flags += ['-fno-sanitize=all', ]
        else
          if (  ___jln_flags.get('sanitizers', 'default') == 'thread' )
            jln_cpp_flags += ['-fsanitize=thread', ]
            jln_link_flags += ['-fsanitize=thread', ]
          else
            if (  ___jln_flags.get('sanitizers', 'default') == 'undefined' )
              jln_cpp_flags += ['-fsanitize=undefined', ]
              jln_link_flags += ['-fsanitize=undefined', ]
            else
              if (  ___jln_flags.get('sanitizers', 'default') == 'undefined_minimal_runtime' )
                jln_cpp_flags += ['-fsanitize=undefined', ]
                jln_link_flags += ['-fsanitize=undefined', ]
                if (  ( ( ___jln_is_clang_like or ___jln_compiler_id == 'clang-cl' ) and ___jln_compiler_version.version_compare('>=6.0') ) )
                  jln_cpp_flags += ['-fsanitize-minimal-runtime', ]
                  jln_link_flags += ['-fsanitize-minimal-runtime', ]
                endif
              else
                if (  ___jln_flags.get('sanitizers', 'default') == 'scudo_hardened_allocator' )
                  if (  ( ___jln_compiler_id == 'clang' and ___jln_compiler_version.version_compare('>=13.0') ) )
                    jln_cpp_flags += ['-fsanitize=scudo', ]
                    jln_link_flags += ['-fsanitize=scudo', ]
                  endif
                else
                  jln_cpp_flags += ['-fno-omit-frame-pointer', '-fno-optimize-sibling-calls', '-fsanitize=address', ]
                  jln_link_flags += ['-fsanitize=address', ]
                  if (  ( ___jln_flags.get('sanitizers', 'default') == 'on' or ___jln_flags.get('sanitizers', 'default') == 'with_minimal_code_size' or ___jln_flags.get('sanitizers', 'default') == 'extra' or ___jln_flags.get('sanitizers', 'default') == 'extra_with_minimal_code_size' ) )
                    if (  ( ( ___jln_compiler_id == 'gcc' and ___jln_compiler_version.version_compare('>=4.9') ) or ___jln_is_clang_like or ___jln_compiler_id == 'clang-cl' ) )
                      jln_cpp_flags += ['-fsanitize=undefined', ]
                      jln_link_flags += ['-fsanitize=undefined', ]
                    endif
                    if (  ( ___jln_flags.get('sanitizers', 'default') == 'with_minimal_code_size' or ___jln_flags.get('sanitizers', 'default') == 'extra_with_minimal_code_size' ) )
                      if (  ( ( ___jln_is_clang_like and ___jln_compiler_version.version_compare('>=13.0') ) or ( ___jln_compiler_id == 'clang-cl' and ___jln_compiler_version.version_compare('>=13.0') ) ) )
                        jln_cpp_flags += ['-fsanitize-address-use-after-return=always', ]
                        jln_link_flags += ['-fsanitize-address-use-after-return=always', ]
                      endif
                    endif
                    if (  ( ___jln_flags.get('sanitizers', 'default') == 'extra' or ___jln_flags.get('sanitizers', 'default') == 'extra_with_minimal_code_size' ) )
                      if (  ( ( ___jln_compiler_id == 'gcc' and ___jln_compiler_version.version_compare('>=8.0') ) or ( ___jln_compiler_id == 'clang' and ___jln_compiler_version.version_compare('>=9.0') ) or ( ___jln_compiler_id == 'clang-cl' and ___jln_compiler_version.version_compare('>=9.0') ) ) )
                        jln_cpp_flags += ['-fsanitize=pointer-compare', '-fsanitize=pointer-subtract', ]
                      endif
                    endif
                  endif
                endif
              endif
            endif
          endif
        endif
      endif
    endif
    if (  ___jln_flags.get('emcc_debug', 'default') != 'default' )
      if (  ___jln_compiler_id == 'emscripten' )
        if (  ___jln_flags.get('emcc_debug', 'default') == 'off' )
          jln_link_flags += ['-sASSERTIONS=0', '-sSAFE_HEAP=0', '-sSTACK_OVERFLOW_CHECK=0', ]
        else
          if (  ___jln_flags.get('emcc_debug', 'default') == 'slow' )
            jln_link_flags += ['-sASSERTIONS=2', ]
          else
            jln_link_flags += ['-sASSERTIONS=1', ]
          endif
          jln_link_flags += ['-sSTACK_OVERFLOW_CHECK=2', ]
          if (   not ( ( ___jln_flags.get('sanitizers', 'default') == 'on' or ___jln_flags.get('sanitizers', 'default') == 'with_minimal_code_size' or ___jln_flags.get('sanitizers', 'default') == 'extra' or ___jln_flags.get('sanitizers', 'default') == 'extra_with_minimal_code_size' or ___jln_flags.get('sanitizers', 'default') == 'address' or ___jln_flags.get('sanitizers', 'default') == 'address_with_minimal_code_size' ) ) )
            jln_link_flags += ['-sSAFE_HEAP=1', ]
          endif
        endif
      endif
    endif
  endif
  if (  ___jln_flags.get('conversion_warnings', 'default') != 'default' )
    if (  ( ___jln_compiler_id == 'gcc' or ___jln_is_clang_like or ___jln_compiler_id == 'clang-cl' or ___jln_compiler_id == 'intel' ) )
      if (  ___jln_flags.get('conversion_warnings', 'default') == 'on' )
        jln_cpp_flags += ['-Wconversion', '-Wsign-compare', '-Wsign-conversion', ]
      else
        if (  ___jln_flags.get('conversion_warnings', 'default') == 'conversion' )
          jln_cpp_flags += ['-Wconversion', ]
        else
          if (  ___jln_flags.get('conversion_warnings', 'default') == 'float' )
            if (  ___jln_compiler_id == 'gcc' )
              if (  ___jln_compiler_version.version_compare('>=4.9') )
                jln_cpp_flags += ['-Wfloat-conversion', ]
              endif
            else
              jln_cpp_flags += ['-Wfloat-conversion', ]
            endif
          else
            if (  ___jln_flags.get('conversion_warnings', 'default') == 'sign' )
              jln_cpp_flags += ['-Wsign-compare', '-Wsign-conversion', ]
            else
              if (  ___jln_flags.get('conversion_warnings', 'default') == 'all' )
                jln_cpp_flags += ['-Wconversion', ]
                if (  ___jln_compiler_id == 'gcc' )
                  jln_cpp_flags += ['-Warith-conversion', ]
                endif
              else
                jln_cpp_flags += ['-Wno-conversion', '-Wno-sign-compare', '-Wno-sign-conversion', ]
              endif
            endif
          endif
        endif
      endif
    endif
  endif
  if (  ( ___jln_compiler_id == 'gcc' or ___jln_is_clang_like ) )
    if (  ___jln_flags.get('diagnostics_show_template', 'default') != 'default' )
      if (  ( ___jln_flags.get('diagnostics_show_template', 'default') == 'tree_without_elided_types' or ___jln_flags.get('diagnostics_show_template', 'default') == 'tree' ) )
        if (  ( ( ___jln_compiler_id == 'gcc' and ___jln_compiler_version.version_compare('>=8.0') ) or ___jln_is_clang_like ) )
          jln_cpp_flags += ['-fdiagnostics-show-template-tree', ]
        endif
      endif
      if (  ( ___jln_flags.get('diagnostics_show_template', 'default') == 'tree_without_elided_types' or ___jln_flags.get('diagnostics_show_template', 'default') == 'without_elided_types' ) )
        if (  ( ( ___jln_compiler_id == 'gcc' and ___jln_compiler_version.version_compare('>=8.0') ) or ( ___jln_is_clang_like and ___jln_compiler_version.version_compare('>=3.4') ) ) )
          jln_cpp_flags += ['-fno-elide-type', ]
        endif
      endif
    endif
    if (  ___jln_flags.get('exceptions', 'default') != 'default' )
      if (  ___jln_flags.get('exceptions', 'default') == 'on' )
        jln_cpp_flags += ['-fexceptions', ]
        if (  ___jln_compiler_id == 'emscripten' )
          jln_cpp_flags += ['-sDISABLE_EXCEPTION_CATCHING=0', ]
        endif
      else
        jln_cpp_flags += ['-fno-exceptions', ]
      endif
    endif
    if (  ___jln_flags.get('hardened', 'default') != 'default' )
      if (  ( ___jln_flags.get('hardened', 'default') == 'on' or ___jln_flags.get('hardened', 'default') == 'all' ) )
        if (  ( ___jln_compiler_id == 'gcc' and ___jln_compiler_version.version_compare('>=14.0') ) )
          jln_cpp_flags += ['-fhardened', '-Whardened', ]
          if (  ___jln_flags.get('hardened', 'default') == 'all' )
            jln_cpp_flags += ['-fstack-protector-all', ]
          endif
          jln_cpp_flags += ['-Wtrampolines', ]
          jln_link_flags += ['-Wl,-z,noexecstack', ]
        else
          if (  ___jln_flags.get('hardened', 'default') == 'all' )
            jln_cpp_flags += ['-fstack-protector-all', ]
          else
            jln_cpp_flags += ['-fstack-protector-strong', ]
          endif
          if (  ( ( ___jln_compiler_id == 'gcc' and ___jln_compiler_version.version_compare('>=12.0') ) or ( ___jln_is_clang_like and ___jln_compiler_version.version_compare('>=14.0') ) ) )
            jln_cpp_flags += ['-D_FORTIFY_SOURCE=3', ]
            if (  ( ( ___jln_compiler_id == 'gcc' and ___jln_compiler_version.version_compare('>=13.0') ) or ( ___jln_is_clang_like and ___jln_compiler_version.version_compare('>=16.0') ) ) )
              jln_cpp_flags += ['-fstrict-flex-arrays=3', ]
            endif
          else
            jln_cpp_flags += ['-D_FORTIFY_SOURCE=2', ]
          endif
          if (  ___jln_flags.get('var_init', 'default') == 'default' )
            if (  ( ( ___jln_compiler_id == 'gcc' and ___jln_compiler_version.version_compare('>=12.0') ) or ( ___jln_is_clang_like and ___jln_compiler_version.version_compare('>=8.0') ) ) )
              if (  ( ___jln_is_clang_like and ___jln_compiler_version.version_compare('<=15.0') ) )
                jln_cpp_flags += ['-enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang', ]
              else
                jln_cpp_flags += ['-ftrivial-auto-var-init=zero', ]
                if (  ___jln_compiler_id == 'gcc' )
                  jln_cpp_flags += ['-Wtrivial-auto-var-init', ]
                endif
              endif
            endif
          endif
          jln_cpp_flags += ['-fPIE', ]
          jln_link_flags += ['-fPIE', ]
          if (  ___jln_compiler_id != 'emscripten' )
            jln_cpp_flags += ['-pie', ]
            jln_link_flags += ['-pie', '-Wl,-z,relro,-z,now', '-Wl,-z,noexecstack', ]
          endif
          if (  ___jln_compiler_id == 'gcc' )
            if (  ___jln_compiler_version.version_compare('>=4.6') )
              jln_cpp_flags += ['-Wtrampolines', ]
              if (  ___jln_compiler_version.version_compare('>=8.0') )
                jln_cpp_flags += ['-fstack-clash-protection', '-fcf-protection=full', ]
              endif
            endif
          else
            if (  ___jln_compiler_id != 'emscripten' )
              if (  ___jln_compiler_version.version_compare('>=7.0') )
                jln_cpp_flags += ['-fcf-protection=full', ]
                if (  ___jln_compiler_version.version_compare('>=11.0') )
                  jln_cpp_flags += ['-fstack-clash-protection', ]
                endif
              endif
            endif
          endif
        endif
      endif
    endif
    if (  ___jln_flags.get('rtti', 'default') != 'default' )
      if (  ___jln_flags.get('rtti', 'default') == 'on' )
        jln_cpp_flags += ['-frtti', ]
      else
        jln_cpp_flags += ['-fno-rtti', ]
      endif
    endif
    if (  ___jln_flags.get('diagnostics_format', 'default') != 'default' )
      if (  ___jln_flags.get('diagnostics_format', 'default') == 'fixits' )
        if (  ( ( ___jln_compiler_id == 'gcc' and ___jln_compiler_version.version_compare('>=7.0') ) or ( ___jln_compiler_id != 'gcc' and ___jln_compiler_version.version_compare('>=5.0') ) ) )
          jln_cpp_flags += ['-fdiagnostics-parseable-fixits', ]
        endif
      else
        if (  ___jln_flags.get('diagnostics_format', 'default') == 'patch' )
          if (  ( ___jln_compiler_id == 'gcc' and ___jln_compiler_version.version_compare('>=7.0') ) )
            jln_cpp_flags += ['-fdiagnostics-generate-patch', ]
          endif
        else
          if (  ___jln_is_clang_like )
            jln_cpp_flags += ['-fdiagnostics-print-source-range-info', ]
          endif
        endif
      endif
    endif
    if (  ___jln_flags.get('pedantic', 'default') != 'default' )
      if (  ___jln_flags.get('pedantic', 'default') != 'off' )
        jln_cpp_flags += ['-pedantic', ]
        if (  ___jln_flags.get('pedantic', 'default') == 'as_error' )
          jln_cpp_flags += ['-pedantic-errors', '-Werror=write-strings', ]
          if (  ___jln_compiler_id == 'gcc' )
            if (  ___jln_compiler_version.version_compare('>=4.7') )
              jln_cpp_flags += ['-Werror=narrowing', ]
              if (  ___jln_compiler_version.version_compare('>=7.1') )
                jln_cpp_flags += ['-Werror=literal-suffix', ]
              endif
            endif
          endif
        endif
      endif
    endif
    if (  ___jln_flags.get('symbols', 'default') != 'default' )
      if (  ___jln_flags.get('symbols', 'default') == 'hidden' )
        jln_cpp_flags += ['-fvisibility=hidden', ]
      else
        if (  ___jln_flags.get('symbols', 'default') == 'strip_all' )
          jln_link_flags += ['-s', ]
        else
          if (  ___jln_flags.get('symbols', 'default') == 'gc_sections' )
            if (  ___jln_linker_id == 'ld64' )
              jln_link_flags += ['-Wl,-S', '-Wl,-dead_strip', ]
            endif
            jln_link_flags += ['-s', '-Wl,--gc-sections', ]
          else
            if (  ___jln_flags.get('symbols', 'default') == 'nodebug' )
              jln_cpp_flags += ['-g0', ]
            else
              if (  ___jln_flags.get('symbols', 'default') == 'debug' )
                jln_cpp_flags += ['-g', ]
              else
                if (  ___jln_flags.get('symbols', 'default') == 'minimal_debug' )
                  jln_cpp_flags += ['-g1', ]
                else
                  if (  ___jln_flags.get('symbols', 'default') == 'full_debug' )
                    jln_cpp_flags += ['-g3', ]
                  else
                    if (  ___jln_compiler_id == 'clang' )
                      if (  ___jln_flags.get('symbols', 'default') == 'dwarf' )
                        jln_cpp_flags += ['-g', ]
                      endif
                      if (  ___jln_flags.get('symbols', 'default') == 'lldb' )
                        jln_cpp_flags += ['-glldb', ]
                      endif
                      if (  ___jln_flags.get('symbols', 'default') == 'sce' )
                        jln_cpp_flags += ['-gsce', ]
                      endif
                      if (  ___jln_flags.get('symbols', 'default') == 'dbx' )
                        jln_cpp_flags += ['-gdbx', ]
                      endif
                    else
                      if (  ___jln_compiler_id == 'gcc' )
                        if (  ___jln_flags.get('symbols', 'default') == 'dwarf' )
                          jln_cpp_flags += ['-g', ]
                        endif
                        if (  ___jln_flags.get('symbols', 'default') == 'codeview' )
                          jln_cpp_flags += ['-gcodeview', ]
                        endif
                        if (  ___jln_flags.get('symbols', 'default') == 'btf' )
                          jln_cpp_flags += ['-gbtf', ]
                        endif
                        if (  ___jln_flags.get('symbols', 'default') == 'ctf' )
                          jln_cpp_flags += ['-gctf', ]
                        endif
                        if (  ___jln_flags.get('symbols', 'default') == 'ctf1' )
                          jln_cpp_flags += ['-gctf1', ]
                        endif
                        if (  ___jln_flags.get('symbols', 'default') == 'ctf2' )
                          jln_cpp_flags += ['-gctf2', ]
                        endif
                        if (  ___jln_flags.get('symbols', 'default') == 'vms' )
                          jln_cpp_flags += ['-gvms', ]
                        endif
                        if (  ___jln_flags.get('symbols', 'default') == 'vms1' )
                          jln_cpp_flags += ['-gvms1', ]
                        endif
                        if (  ___jln_flags.get('symbols', 'default') == 'vms2' )
                          jln_cpp_flags += ['-gvms2', ]
                        endif
                        if (  ___jln_flags.get('symbols', 'default') == 'vms3' )
                          jln_cpp_flags += ['-gvms3', ]
                        endif
                      endif
                    endif
                  endif
                endif
              endif
            endif
          endif
        endif
      endif
    endif
    if (  ___jln_compiler_id == 'emscripten' )
      if (  ___jln_flags.get('optimization', 'default') != 'default' )
        if (  ___jln_flags.get('optimization', 'default') == '0' )
          jln_cpp_flags += ['-O0', ]
          jln_link_flags += ['-O0', ]
        else
          if (  ___jln_flags.get('optimization', 'default') == 'g' )
            jln_cpp_flags += ['-Og', ]
            jln_link_flags += ['-Og', ]
          else
            if (  ___jln_flags.get('optimization', 'default') == '1' )
              jln_cpp_flags += ['-O1', ]
              jln_link_flags += ['-O1', ]
            else
              if (  ___jln_flags.get('optimization', 'default') == '2' )
                jln_cpp_flags += ['-O2', ]
                jln_link_flags += ['-O2', ]
              else
                if (  ___jln_flags.get('optimization', 'default') == '3' )
                  jln_cpp_flags += ['-O3', ]
                  jln_link_flags += ['-O3', ]
                else
                  if (  ___jln_flags.get('optimization', 'default') == 'fast' )
                    jln_cpp_flags += ['-O3', '-mnontrapping-fptoint', ]
                    jln_link_flags += ['-O3', '-mnontrapping-fptoint', ]
                  else
                    if (  ___jln_flags.get('optimization', 'default') == 'size' )
                      jln_cpp_flags += ['-Os', ]
                      jln_link_flags += ['-Os', ]
                    else
                      jln_cpp_flags += ['-Oz', ]
                      jln_link_flags += ['-Oz', ]
                    endif
                  endif
                endif
              endif
            endif
          endif
        endif
      endif
    else
      if (  ( ___jln_compiler_id == 'gcc' and ___jln_compiler_version.version_compare('>=12.0') ) )
        jln_cpp_flags += ['-ffold-simple-inlines', ]
      endif
      if (  ___jln_flags.get('coverage', 'default') != 'default' )
        if (  ___jln_flags.get('coverage', 'default') == 'on' )
          jln_cpp_flags += ['--coverage', ]
          jln_link_flags += ['--coverage', ]
          if (  ___jln_compiler_id == 'clang' )
            jln_link_flags += ['-lprofile_rt', ]
          endif
        endif
      endif
      if (  ___jln_flags.get('optimization', 'default') != 'default' )
        if (  ___jln_flags.get('optimization', 'default') == '0' )
          jln_cpp_flags += ['-O0', ]
        else
          if (  ___jln_flags.get('optimization', 'default') == 'g' )
            jln_cpp_flags += ['-Og', ]
          else
            jln_link_flags += ['-Wl,-O1', ]
            if (  ___jln_flags.get('optimization', 'default') == '1' )
              jln_cpp_flags += ['-O1', ]
            else
              if (  ___jln_flags.get('optimization', 'default') == '2' )
                jln_cpp_flags += ['-O2', ]
              else
                if (  ___jln_flags.get('optimization', 'default') == '3' )
                  jln_cpp_flags += ['-O3', ]
                else
                  if (  ___jln_flags.get('optimization', 'default') == 'size' )
                    jln_cpp_flags += ['-Os', ]
                  else
                    if (  ___jln_flags.get('optimization', 'default') == 'z' )
                      if (  ( ___jln_compiler_id == 'clang' or ( ___jln_compiler_id == 'gcc' and ___jln_compiler_version.version_compare('>=12.0') ) ) )
                        jln_cpp_flags += ['-Oz', ]
                      else
                        jln_cpp_flags += ['-Os', ]
                      endif
                    else
                      if (  ___jln_compiler_id == 'clang' )
                        jln_cpp_flags += ['-O3', '-ffast-math', ]
                      else
                        jln_cpp_flags += ['-Ofast', ]
                      endif
                    endif
                  endif
                endif
              endif
            endif
          endif
        endif
      endif
      if (  ___jln_flags.get('cpu', 'default') != 'default' )
        if (  ___jln_flags.get('cpu', 'default') == 'generic' )
          jln_cpp_flags += ['-mtune=generic', ]
          jln_link_flags += ['-mtune=generic', ]
        else
          jln_cpp_flags += ['-march=native', '-mtune=native', ]
          jln_link_flags += ['-march=native', '-mtune=native', ]
        endif
      endif
      if (  ___jln_flags.get('linker', 'default') != 'default' )
        if (  ___jln_flags.get('linker', 'default') == 'mold' )
          jln_link_flags += ['-fuse-ld=mold', ]
        else
          if (  ___jln_flags.get('linker', 'default') == 'native' )
            if (  ___jln_compiler_id == 'gcc' )
              jln_link_flags += ['-fuse-ld=gold', ]
            else
              jln_link_flags += ['-fuse-ld=lld', ]
            endif
          else
            if (  ___jln_flags.get('linker', 'default') == 'bfd' )
              jln_link_flags += ['-fuse-ld=bfd', ]
            else
              if (  ( ___jln_flags.get('linker', 'default') == 'gold' or ( ___jln_compiler_id == 'gcc' and ___jln_compiler_version.version_compare('<9.0') ) ) )
                jln_link_flags += ['-fuse-ld=gold', ]
              else
                jln_link_flags += ['-fuse-ld=lld', ]
              endif
            endif
          endif
        endif
      endif
      if (  ___jln_flags.get('noexcept_warnings', 'default') != 'default' )
        if (  ( ___jln_compiler_id == 'gcc' and ___jln_compiler_version.version_compare('>=4.6') ) )
          if (  ___jln_flags.get('noexcept_warnings', 'default') == 'on' )
            jln_cpp_flags += ['-Wnoexcept', ]
          else
            jln_cpp_flags += ['-Wno-noexcept', ]
          endif
        endif
      endif
      if (  ___jln_flags.get('analyzer', 'default') != 'default' )
        if (  ( ___jln_compiler_id == 'gcc' and ___jln_compiler_version.version_compare('>=10.0') ) )
          if (  ___jln_flags.get('analyzer', 'default') == 'off' )
            jln_cpp_flags += ['-fno-analyzer', ]
          else
            jln_cpp_flags += ['-fanalyzer', ]
            if (  ___jln_flags.get('analyzer_too_complex_warning', 'default') != 'default' )
              if (  ___jln_flags.get('analyzer_too_complex_warning', 'default') == 'on' )
                jln_cpp_flags += ['-Wanalyzer-too-complex', ]
              else
                jln_cpp_flags += ['-Wno-analyzer-too-complex', ]
              endif
            endif
            if (  ___jln_flags.get('analyzer_verbosity', 'default') != 'default' )
              if (  ___jln_flags.get('analyzer_verbosity', 'default') == '0' )
                jln_cpp_flags += ['-fanalyzer-verbosity=0', ]
              else
                if (  ___jln_flags.get('analyzer_verbosity', 'default') == '1' )
                  jln_cpp_flags += ['-fanalyzer-verbosity=1', ]
                else
                  if (  ___jln_flags.get('analyzer_verbosity', 'default') == '2' )
                    jln_cpp_flags += ['-fanalyzer-verbosity=2', ]
                  else
                    jln_cpp_flags += ['-fanalyzer-verbosity=3', ]
                  endif
                endif
              endif
            endif
          endif
        endif
      endif
    endif
  endif
  if (  ( ___jln_compiler_id == 'msvc' or ___jln_compiler_id == 'clang-cl' or ___jln_compiler_id == 'intel-cl' ) )
    if (  ___jln_flags.get('exceptions', 'default') != 'default' )
      if (  ___jln_flags.get('exceptions', 'default') == 'on' )
        jln_cpp_flags += ['/EHsc', ]
      else
        jln_cpp_flags += ['/EHs-c-', ]
      endif
    endif
    if (  ___jln_flags.get('rtti', 'default') != 'default' )
      if (  ___jln_flags.get('rtti', 'default') == 'on' )
        jln_cpp_flags += ['/GR', ]
      else
        jln_cpp_flags += ['/GR-', ]
      endif
    endif
    if (  ___jln_flags.get('stl_hardening', 'default') != 'default' )
      if (  ___jln_flags.get('stl_hardening', 'default') == 'off' )
        jln_cpp_flags += ['/D_MSVC_STL_HARDENING=0', '/D_MSVC_STL_DESTRUCTOR_TOMBSTONES=0', '/D_ITERATOR_DEBUG_LEVEL=0', '/D_HAS_ITERATOR_DEBUGGING=0', '/D_SECURE_SCL=0', ]
      else
        if (  ( ___jln_flags.get('stl_hardening', 'default') == 'fast' or ___jln_flags.get('stl_hardening', 'default') == 'extensive' ) )
          jln_cpp_flags += ['/D_MSVC_STL_HARDENING=1', ]
        else
          if (  ___jln_flags.get('stl_hardening', 'default') == 'debug' )
            jln_cpp_flags += ['/D_MSVC_STL_HARDENING=1', '/D_MSVC_STL_DESTRUCTOR_TOMBSTONES=1', ]
          else
            jln_cpp_flags += ['/D_DEBUG', '/D_MSVC_STL_HARDENING=1', '/D_MSVC_STL_DESTRUCTOR_TOMBSTONES=1', ]
          endif
        endif
      endif
    endif
    if (  ___jln_flags.get('stl_fix', 'default') != 'default' )
      if (  ___jln_flags.get('stl_fix', 'default') == 'on' )
        jln_cpp_flags += ['/DNOMINMAX', ]
      endif
    endif
    if (  ___jln_compiler_id != 'intel-cl' )
      if (  ___jln_flags.get('symbols', 'default') != 'default' )
        if (  ___jln_flags.get('symbols', 'default') == 'nodebug' )
          jln_link_flags += ['/DEBUG:NONE', ]
        else
          if (  ( ___jln_flags.get('symbols', 'default') == 'debug' or ___jln_flags.get('symbols', 'default') == 'minimal_debug' or ___jln_flags.get('symbols', 'default') == 'full_debug' or ___jln_flags.get('symbols', 'default') == 'codeview' ) )
            jln_cpp_flags += ['/Zi', ]
            jln_link_flags += ['/DEBUG:FULL', ]
          else
            if (  ___jln_compiler_id == 'clang-cl' )
              if (  ___jln_flags.get('symbols', 'default') == 'dwarf' )
                jln_link_flags += ['-gdwarf', ]
              endif
            endif
          endif
        endif
      endif
      if (  ___jln_flags.get('optimization', 'default') != 'default' )
        if (  ___jln_flags.get('optimization', 'default') == '0' )
          jln_cpp_flags += ['/Od', ]
        else
          if (  ___jln_flags.get('optimization', 'default') == 'g' )
            jln_cpp_flags += ['/Ob1', ]
          else
            if (  ___jln_flags.get('optimization', 'default') == '2' )
              jln_cpp_flags += ['/O2', ]
            else
              if (  ( ___jln_flags.get('optimization', 'default') == '1' or ___jln_flags.get('optimization', 'default') == 'size' ) )
                jln_cpp_flags += ['/O1', ]
              else
                if (  ___jln_flags.get('optimization', 'default') == 'z' )
                  jln_cpp_flags += ['/O1', '/Gw', ]
                else
                  if (  ___jln_flags.get('optimization', 'default') == 'fast' )
                    jln_cpp_flags += ['/fp:fast', ]
                  endif
                  jln_cpp_flags += ['/O2', ]
                  if (  ( ( ___jln_compiler_id == 'msvc' and ___jln_compiler_version.version_compare('>=19.20') ) or ___jln_compiler_id == 'clang-cl' ) )
                    jln_cpp_flags += ['/Ob3', ]
                  endif
                  jln_cpp_flags += ['/Gw', ]
                endif
              endif
            endif
          endif
        endif
      endif
      if (  ___jln_flags.get('hardened', 'default') != 'default' )
        if (  ___jln_flags.get('hardened', 'default') == 'off' )
          jln_cpp_flags += ['/GS-', ]
        else
          jln_cpp_flags += ['/sdl', '/guard:cf', ]
          if (  ( ( ___jln_compiler_id == 'msvc' and ___jln_compiler_version.version_compare('>=19.27') ) or ( ___jln_compiler_id == 'clang-cl' and ___jln_compiler_version.version_compare('>=10.0') ) ) )
            jln_cpp_flags += ['/guard:ehcont', ]
            jln_link_flags += ['/CETCOMPAT', ]
          endif
        endif
      endif
    endif
  endif
  if (  ___jln_compiler_id == 'msvc' )
    if (  ___jln_flags.get('analyzer', 'default') != 'default' )
      if (  ___jln_compiler_version.version_compare('>=19.0') )
        if (  ___jln_flags.get('analyzer', 'default') == 'off' )
          jln_cpp_flags += ['/analyze-', ]
        else
          jln_cpp_flags += ['/analyze', ]
          if (  ___jln_flags.get('analyzer', 'default') != 'with_external_headers' )
            if (  ___jln_compiler_version.version_compare('>=16.10') )
              jln_cpp_flags += ['/analyze:external-', ]
            endif
          endif
        endif
      endif
    endif
    if (  ___jln_flags.get('windows_bigobj', 'default') != 'default' )
      jln_cpp_flags += ['/bigobj', ]
    endif
    if (  ___jln_flags.get('msvc_crt_secure_no_warnings', 'default') != 'default' )
      if (  ___jln_flags.get('msvc_crt_secure_no_warnings', 'default') == 'on' )
        jln_cpp_flags += ['/D_CRT_SECURE_NO_WARNINGS=1', ]
      else
        if (  ___jln_flags.get('msvc_crt_secure_no_warnings', 'default') == 'off' )
          jln_cpp_flags += ['/U_CRT_SECURE_NO_WARNINGS', ]
        endif
      endif
    endif
    if (  ___jln_flags.get('msvc_diagnostics_format', 'default') != 'default' )
      if (  ___jln_compiler_version.version_compare('>=19.10') )
        if (  ___jln_flags.get('msvc_diagnostics_format', 'default') == 'classic' )
          jln_cpp_flags += ['/diagnostics:classic', ]
        else
          if (  ___jln_flags.get('msvc_diagnostics_format', 'default') == 'column' )
            jln_cpp_flags += ['/diagnostics:column', ]
          else
            jln_cpp_flags += ['/diagnostics:caret', ]
          endif
        endif
      endif
    endif
    if (  ___jln_compiler_version.version_compare('<19.13') )
      ___jln_flags += {'msvc_isystem': 'default'}
    endif
    if (  ___jln_flags.get('msvc_isystem', 'default') != 'default' )
      if (  ___jln_flags.get('msvc_isystem', 'default') == 'external_as_include_system_flag' )
        if (  ___jln_compiler_version.version_compare('<19.29') )
          # unimplementable
        else
          # unimplementable
        endif
      else
        if (  ___jln_flags.get('msvc_isystem', 'default') != 'assumed' )
          if (  ___jln_compiler_version.version_compare('<19.29') )
            jln_cpp_flags += ['/experimental:external', ]
          endif
          jln_cpp_flags += ['/external:W0', ]
          if (  ___jln_flags.get('msvc_isystem', 'default') == 'anglebrackets' )
            jln_cpp_flags += ['/external:anglebrackets', ]
          else
            jln_cpp_flags += ['/external:env:INCLUDE', '/external:env:CAExcludePath', ]
          endif
        endif
      endif
      if (  ___jln_flags.get('msvc_isystem_with_template_instantiations_treated_as_non_external', 'default') != 'default' )
        if (  ___jln_flags.get('msvc_isystem_with_template_instantiations_treated_as_non_external', 'default') == 'off' )
          jln_cpp_flags += ['/external:templates', ]
        else
          jln_cpp_flags += ['/external:templates-', ]
        endif
      endif
    endif
    if (  ___jln_flags.get('warnings', 'default') != 'default' )
      if (  ___jln_flags.get('warnings', 'default') == 'off' )
        jln_cpp_flags += ['/W0', ]
      else
        if (  ___jln_flags.get('warnings', 'default') == 'essential' )
          jln_cpp_flags += ['/W4', '/wd4711', ]
        else
          if (  ___jln_flags.get('warnings', 'default') == 'on' )
            jln_cpp_flags += ['/W4', '/wd4711', ]
            if (  ___jln_flags.get('msvc_isystem', 'default') == 'default' )
              jln_cpp_flags += ['/w14263', '/w14264', ]
            endif
            jln_cpp_flags += ['/w14265', '/w14296', '/w14444', '/w14555', '/w14557', '/w14608', '/w14905', '/w14906', '/w14917', '/w14928', '/w14545', '/w14546', '/w14547', '/w14548', '/w14549', '/w14822', '/w14692', ]
            if (  ___jln_compiler_version.version_compare('>=19.0') )
              jln_cpp_flags += ['/w14426', '/w14596', ]
              if (  ___jln_flags.get('msvc_isystem', 'default') == 'default' )
                jln_cpp_flags += ['/w14654', ]
              endif
              jln_cpp_flags += ['/w15031', '/w15032', ]
              if (  ___jln_compiler_version.version_compare('>=19.11') )
                jln_cpp_flags += ['/w15038', ]
                if (  ___jln_compiler_version.version_compare('>=19.15') )
                  jln_cpp_flags += ['/w14643', ]
                  if (  ___jln_compiler_version.version_compare('>=19.22') )
                    jln_cpp_flags += ['/w14855', ]
                    if (  ___jln_compiler_version.version_compare('>=19.25') )
                      if (  ___jln_flags.get('msvc_isystem', 'default') == 'default' )
                        jln_cpp_flags += ['/w15204', ]
                      endif
                      if (  ___jln_compiler_version.version_compare('>=19.29') )
                        jln_cpp_flags += ['/w15233', '/w15240', ]
                        if (  ___jln_compiler_version.version_compare('>=19.30') )
                          if (  ___jln_flags.get('msvc_isystem', 'default') == 'default' )
                            jln_cpp_flags += ['/w15246', ]
                          endif
                          jln_cpp_flags += ['/w15249', ]
                          if (  ___jln_compiler_version.version_compare('>=19.32') )
                            jln_cpp_flags += ['/w15258', ]
                            if (  ___jln_compiler_version.version_compare('>=19.34') )
                              jln_cpp_flags += ['/w15263', ]
                              if (  ___jln_flags.get('msvc_isystem', 'default') == 'default' )
                                jln_cpp_flags += ['/w15262', ]
                              endif
                              if (  ___jln_compiler_version.version_compare('>=19.37') )
                                jln_cpp_flags += ['/w15267', ]
                              endif
                            endif
                          endif
                        endif
                      endif
                    endif
                  endif
                endif
              endif
            endif
          else
            jln_cpp_flags += ['/Wall', '/wd4342', '/wd4350', '/wd4355', '/wd4370', '/wd4371', '/wd4514', '/wd4571', '/wd4577', '/wd4582', '/wd4583', '/wd4587', '/wd4588', '/wd4686', '/wd4710', '/wd4711', '/wd4820', '/wd4866', '/wd4868', '/wd5024', '/wd5025', '/wd5026', '/wd5027', '/wd5243', ]
            if (  ___jln_flags.get('msvc_isystem', 'default') == 'default' )
              jln_cpp_flags += ['/wd4464', '/wd4548', '/wd4623', '/wd4625', '/wd4626', '/wd4668', '/wd5204', ]
              if (  ___jln_compiler_version.version_compare('>=19.0') )
                jln_cpp_flags += ['/wd4582', '/wd4583', ]
                if (  ___jln_compiler_version.version_compare('>=19.34') )
                  jln_cpp_flags += ['/wd5262', ]
                  if (  ___jln_compiler_version.version_compare('>=19.0') )
                    jln_cpp_flags += ['/wd4774', ]
                  endif
                endif
              endif
            endif
            if (  ___jln_compiler_version.version_compare('>=16.0') )
              jln_cpp_flags += ['/wd4800', ]
              if (  ___jln_compiler_version.version_compare('>=19.39') )
                jln_cpp_flags += ['/wd4975', ]
                if (  ___jln_compiler_version.version_compare('>=19.40') )
                  jln_cpp_flags += ['/wd4860', '/wd4861', '/wd5273', '/wd5274', ]
                  if (  ___jln_compiler_version.version_compare('>=19.41') )
                    jln_cpp_flags += ['/wd5306', ]
                    if (  ___jln_compiler_version.version_compare('>=19.43') )
                      jln_cpp_flags += ['/wd5277', ]
                    endif
                  endif
                endif
              endif
            endif
          endif
        endif
      endif
    endif
    if (  ___jln_flags.get('conversion_warnings', 'default') != 'default' )
      if (  ( ___jln_flags.get('conversion_warnings', 'default') == 'off' or ___jln_flags.get('conversion_warnings', 'default') == 'sign' ) )
        jln_cpp_flags += ['/wd4244', '/wd4245', '/wd4365', ]
      else
        jln_cpp_flags += ['/w14244', '/w14245', '/w14365', ]
      endif
      if (  ( ___jln_flags.get('conversion_warnings', 'default') == 'on' or ___jln_flags.get('conversion_warnings', 'default') == 'all' or ___jln_flags.get('conversion_warnings', 'default') == 'sign' ) )
        jln_cpp_flags += ['/w14018', '/w14388', '/w14289', ]
      else
        jln_cpp_flags += ['/wd4018', '/wd4388', '/wd4289', ]
      endif
    endif
    if (  ___jln_flags.get('optimization_warnings', 'default') != 'default' )
      jln_cpp_flags += ['/w15263', ]
    endif
    if (  ___jln_flags.get('switch_warnings', 'default') != 'default' )
      if (  ( ___jln_flags.get('switch_warnings', 'default') == 'on' or ___jln_flags.get('switch_warnings', 'default') == 'mandatory_default' ) )
        jln_cpp_flags += ['/wd4061', '/w14062', ]
      else
        if (  ( ___jln_flags.get('switch_warnings', 'default') == 'exhaustive_enum' or ___jln_flags.get('switch_warnings', 'default') == 'exhaustive_enum_and_mandatory_default' ) )
          jln_cpp_flags += ['/w14061', '/w14062', ]
        else
          jln_cpp_flags += ['/wd4061', '/wd4062', ]
        endif
      endif
    endif
    if (  ___jln_flags.get('shadow_warnings', 'default') != 'default' )
      if (  ___jln_compiler_version.version_compare('>=19.0') )
        if (  ___jln_flags.get('shadow_warnings', 'default') == 'off' )
          jln_cpp_flags += ['/wd4456', '/wd4459', ]
        else
          if (  ( ___jln_flags.get('shadow_warnings', 'default') == 'on' or ___jln_flags.get('shadow_warnings', 'default') == 'all' ) )
            jln_cpp_flags += ['/w14456', '/w14459', ]
          else
            if (  ___jln_flags.get('shadow_warnings', 'default') == 'local' )
              jln_cpp_flags += ['/w4456', '/wd4459', ]
            endif
          endif
        endif
      endif
    endif
    if (  ___jln_flags.get('warnings_as_error', 'default') != 'default' )
      if (  ___jln_flags.get('warnings_as_error', 'default') == 'on' )
        jln_cpp_flags += ['/WX', ]
      else
        if (  ___jln_flags.get('warnings_as_error', 'default') == 'off' )
          jln_cpp_flags += ['/WX-', ]
        else
          jln_cpp_flags += ['/we4455', '/we4150', '/we4716', '/we2124', ]
        endif
      endif
    endif
    if (  ___jln_flags.get('pedantic', 'default') != 'default' )
      if (  ___jln_flags.get('pedantic', 'default') != 'off' )
        jln_cpp_flags += ['/permissive-', '/Zc:inline', '/Zc:referenceBinding', '/Zc:throwingNew', ]
        if (  ___jln_compiler_version.version_compare('>=19.13') )
          jln_cpp_flags += ['/Zc:externConstexpr', ]
          if (  ___jln_compiler_version.version_compare('>=19.14') )
            jln_cpp_flags += ['/Zc:__cplusplus', ]
            if (  ___jln_compiler_version.version_compare('>=19.25') )
              jln_cpp_flags += ['/Zc:preprocessor', ]
              if (  ___jln_compiler_version.version_compare('>=19.28') )
                jln_cpp_flags += ['/Zc:lambda', ]
                if (  ___jln_compiler_version.version_compare('>=19.34') )
                  jln_cpp_flags += ['/Zc:enumTypes', ]
                  if (  ___jln_compiler_version.version_compare('>=19.35') )
                    jln_cpp_flags += ['/Zc:templateScope', ]
                  endif
                endif
              endif
            endif
          endif
        endif
        if (  ___jln_flags.get('pedantic', 'default') == 'as_error' )
          jln_cpp_flags += ['/we4608', '/we4928', ]
          if (  ___jln_compiler_version.version_compare('>=19.31') )
            jln_cpp_flags += ['/we5254', ]
            if (  ___jln_compiler_version.version_compare('>=19.38') )
              jln_cpp_flags += ['/we5110', ]
            endif
          endif
        else
          jln_cpp_flags += ['/w14608', '/w14928', ]
          if (  ___jln_compiler_version.version_compare('>=19.31') )
            jln_cpp_flags += ['/w15254', ]
            if (  ___jln_compiler_version.version_compare('>=19.38') )
              jln_cpp_flags += ['/w15110', ]
            endif
          endif
        endif
        if (  ___jln_flags.get('msvc_isystem', 'default') != 'default' )
          if (  ___jln_compiler_version.version_compare('>=17.0') )
            jln_cpp_flags += ['/we4471', ]
            if (  ___jln_compiler_version.version_compare('>=19.21') )
              jln_cpp_flags += ['/we5052', ]
            endif
          endif
        else
          if (  ___jln_compiler_version.version_compare('>=17.0') )
            jln_cpp_flags += ['/w14471', ]
          endif
        endif
      endif
    endif
    if (  ___jln_flags.get('lto', 'default') != 'default' )
      if (  ___jln_flags.get('lto', 'default') == 'off' )
        jln_cpp_flags += ['/GL-', ]
      else
        if (  ___jln_flags.get('lto', 'default') != 'thin_or_nothing' )
          jln_cpp_flags += ['/GL', '/Gw', ]
          jln_link_flags += ['/LTCG', ]
        endif
      endif
    endif
    if (  ___jln_flags.get('sanitizers', 'default') != 'default' )
      if (  ___jln_compiler_version.version_compare('>=19.28') )
        if (  ( ___jln_flags.get('sanitizers', 'default') == 'on' or ___jln_flags.get('sanitizers', 'default') == 'with_minimal_code_size' or ___jln_flags.get('sanitizers', 'default') == 'extra' or ___jln_flags.get('sanitizers', 'default') == 'extra_with_minimal_code_size' or ___jln_flags.get('sanitizers', 'default') == 'address' or ___jln_flags.get('sanitizers', 'default') == 'address_with_minimal_code_size' ) )
          jln_cpp_flags += ['/fsanitize=address', ]
          jln_link_flags += ['/fsanitize=address', ]
          if (  ( ___jln_flags.get('sanitizers', 'default') == 'extra' or ___jln_flags.get('sanitizers', 'default') == 'extra_with_minimal_code_size' ) )
            jln_cpp_flags += ['/fsanitize-address-use-after-return', ]
          endif
        endif
      else
        if (  ( ___jln_flags.get('sanitizers', 'default') == 'on' or ___jln_flags.get('sanitizers', 'default') == 'with_minimal_code_size' or ___jln_flags.get('sanitizers', 'default') == 'extra' or ___jln_flags.get('sanitizers', 'default') == 'extra_with_minimal_code_size' or ___jln_flags.get('sanitizers', 'default') == 'address' or ___jln_flags.get('sanitizers', 'default') == 'address_with_minimal_code_size' ) )
          jln_cpp_flags += ['/sdl', ]
          if (  ( ___jln_flags.get('optimization', 'default') == '0' ) )
            jln_cpp_flags += ['/RTCsu', ]
          endif
        else
          if (  ___jln_flags.get('sanitizers', 'default') == 'off' )
            if (  ___jln_flags.get('hardened', 'default') == 'default' )
              jln_cpp_flags += ['/sdl-', ]
            endif
          endif
        endif
      endif
    endif
  else
    if (  ___jln_compiler_id == 'clang-cl' )
      if (  ___jln_flags.get('pedantic', 'default') != 'default' )
        if (  ___jln_flags.get('pedantic', 'default') != 'off' )
          jln_cpp_flags += ['/Zc:twoPhase', ]
          if (  ___jln_flags.get('pedantic', 'default') == 'as_error' )
            jln_cpp_flags += ['-Werror=write-strings', ]
          endif
        endif
      endif
      if (  ___jln_flags.get('color', 'default') != 'default' )
        if (  ___jln_flags.get('color', 'default') == 'never' )
          jln_cpp_flags += ['-fno-color-diagnostics', ]
        else
          if (  ___jln_flags.get('color', 'default') == 'always' )
            jln_cpp_flags += ['-fcolor-diagnostics', ]
          endif
        endif
      endif
      if (  ___jln_flags.get('diagnostics_format', 'default') != 'default' )
        if (  ___jln_flags.get('diagnostics_format', 'default') == 'fixits' )
          jln_cpp_flags += ['-fdiagnostics-parseable-fixits', ]
        endif
      endif
      if (  ___jln_flags.get('cpu', 'default') != 'default' )
        if (  ___jln_flags.get('cpu', 'default') == 'generic' )
          jln_cpp_flags += ['-mtune=generic', ]
          jln_link_flags += ['-mtune=generic', ]
        else
          jln_cpp_flags += ['-march=native', '-mtune=native', ]
          jln_link_flags += ['-march=native', '-mtune=native', ]
        endif
      endif
      if (  ___jln_flags.get('linker', 'default') != 'default' )
        if (  ( ___jln_flags.get('linker', 'default') == 'lld' or ___jln_flags.get('linker', 'default') == 'native' ) )
          jln_link_flags += ['-fuse-ld=lld', ]
        else
          if (  ___jln_flags.get('linker', 'default') == 'mold' )
            jln_link_flags += ['-fuse-ld=mold', ]
          endif
        endif
      endif
    else
      if (  ___jln_compiler_id == 'intel-cl' )
        if (  ___jln_flags.get('warnings', 'default') != 'default' )
          if (  ___jln_flags.get('warnings', 'default') == 'off' )
            jln_cpp_flags += ['/w', ]
          else
            jln_cpp_flags += ['/W2', '/Qdiag-disable:1418,2259', ]
          endif
        endif
        if (  ___jln_flags.get('warnings_as_error', 'default') != 'default' )
          if (  ___jln_flags.get('warnings_as_error', 'default') == 'on' )
            jln_cpp_flags += ['/WX', ]
          else
            if (  ___jln_flags.get('warnings_as_error', 'default') == 'basic' )
              jln_cpp_flags += ['/Qdiag-error:1079,39,109', ]
            endif
          endif
        endif
        if (  ___jln_flags.get('windows_bigobj', 'default') != 'default' )
          jln_cpp_flags += ['/bigobj', ]
        endif
        if (  ___jln_flags.get('symbols', 'default') != 'default' )
          if (  ___jln_flags.get('symbols', 'default') == 'nodebug' )
            jln_cpp_flags += ['/debug:none', ]
          else
            if (  ___jln_flags.get('symbols', 'default') == 'minimal_debug' )
              jln_cpp_flags += ['/debug:minimal', ]
            else
              if (  ( ___jln_flags.get('symbols', 'default') == 'debug' or ___jln_flags.get('symbols', 'default') == 'full_debug' or ___jln_flags.get('symbols', 'default') == 'codeview' ) )
                jln_cpp_flags += ['/debug:full', ]
              endif
            endif
          endif
        endif
        if (  ___jln_flags.get('optimization', 'default') != 'default' )
          if (  ___jln_flags.get('optimization', 'default') == '0' )
            jln_cpp_flags += ['/Ob0', ]
          else
            if (  ___jln_flags.get('optimization', 'default') == 'g' )
              jln_cpp_flags += ['/Ob1', ]
            else
              jln_cpp_flags += ['/GF', ]
              if (  ___jln_flags.get('optimization', 'default') == '1' )
                jln_cpp_flags += ['/O1', ]
              else
                if (  ___jln_flags.get('optimization', 'default') == '2' )
                  jln_cpp_flags += ['/O2', ]
                else
                  if (  ___jln_flags.get('optimization', 'default') == '3' )
                    jln_cpp_flags += ['/O2', ]
                  else
                    if (  ___jln_flags.get('optimization', 'default') == 'z' )
                      jln_cpp_flags += ['/O3', ]
                    else
                      if (  ___jln_flags.get('optimization', 'default') == 'size' )
                        jln_cpp_flags += ['/Os', ]
                      else
                        jln_cpp_flags += ['/fast', ]
                      endif
                    endif
                  endif
                endif
              endif
            endif
          endif
        endif
        if (  ___jln_flags.get('hardened', 'default') != 'default' )
          if (  ___jln_flags.get('hardened', 'default') == 'off' )
            jln_cpp_flags += ['/GS-', ]
          else
            jln_cpp_flags += ['/GS', '/guard:cf', '/mconditional-branch:all-fix', '/Qcf-protection:full', ]
          endif
        endif
        if (  ___jln_flags.get('sanitizers', 'default') != 'default' )
          if (  ( ___jln_flags.get('sanitizers', 'default') == 'on' or ___jln_flags.get('sanitizers', 'default') == 'with_minimal_code_size' or ___jln_flags.get('sanitizers', 'default') == 'extra' or ___jln_flags.get('sanitizers', 'default') == 'extra_with_minimal_code_size' or ___jln_flags.get('sanitizers', 'default') == 'address' or ___jln_flags.get('sanitizers', 'default') == 'address_with_minimal_code_size' ) )
            jln_cpp_flags += ['/Qtrapuv', '/RTCsu', ]
            if (  ( ___jln_flags.get('sanitizers', 'default') == 'on' or ___jln_flags.get('sanitizers', 'default') == 'with_minimal_code_size' or ___jln_flags.get('sanitizers', 'default') == 'extra' or ___jln_flags.get('sanitizers', 'default') == 'extra_with_minimal_code_size' ) )
              jln_cpp_flags += ['/Qfp-stack-check', '/Qfp-trap:common', ]
            endif
          endif
        endif
        if (  ___jln_flags.get('cpu', 'default') != 'default' )
          if (  ___jln_flags.get('cpu', 'default') == 'generic' )
            jln_cpp_flags += ['/Qtune:generic', ]
            jln_link_flags += ['/Qtune:generic', ]
          else
            jln_cpp_flags += ['/QxHost', ]
            jln_link_flags += ['/QxHost', ]
          endif
        endif
      else
        if (  ___jln_compiler_id == 'intel' )
          if (  ___jln_flags.get('warnings', 'default') != 'default' )
            if (  ___jln_flags.get('warnings', 'default') == 'off' )
              jln_cpp_flags += ['-w', ]
            else
              if (  ___jln_flags.get('warnings', 'default') == 'essential' )
                jln_cpp_flags += ['-Wall', ]
              else
                jln_cpp_flags += ['-Wall', '-Warray-bounds', '-Wcast-qual', '-Wchar-subscripts', '-Wdisabled-optimization', '-Wenum-compare', '-Wextra', '-Wfloat-equal', '-Wformat-security', '-Wformat=2', '-Winit-self', '-Winvalid-pch', '-Wmaybe-uninitialized', '-Wmissing-include-dirs', '-Wnarrowing', '-Wnonnull', '-Wpointer-sign', '-Wreorder', '-Wsequence-point', '-Wtrigraphs', '-Wundef', '-Wunused-function', '-Wunused-but-set-variable', '-Wunused-variable', '-Wpointer-arith', '-Wdeprecated', '-Wnon-virtual-dtor', '-Woverloaded-virtual', ]
              endif
            endif
          endif
          if (  ___jln_flags.get('switch_warnings', 'default') != 'default' )
            if (  ( ___jln_flags.get('switch_warnings', 'default') == 'on' or ___jln_flags.get('switch_warnings', 'default') == 'exhaustive_enum' ) )
              jln_cpp_flags += ['-Wswitch-enum', ]
            else
              if (  ___jln_flags.get('switch_warnings', 'default') == 'mandatory_default' )
                jln_cpp_flags += ['-Wswitch-default', ]
              else
                if (  ___jln_flags.get('switch_warnings', 'default') == 'exhaustive_enum_and_mandatory_default' )
                  jln_cpp_flags += ['-Wswitch', ]
                else
                  jln_cpp_flags += ['-Wno-switch', ]
                endif
              endif
            endif
          endif
          if (  ___jln_flags.get('warnings_as_error', 'default') != 'default' )
            if (  ___jln_flags.get('warnings_as_error', 'default') == 'on' )
              jln_cpp_flags += ['-Werror', ]
            else
              if (  ___jln_flags.get('warnings_as_error', 'default') == 'basic' )
                jln_cpp_flags += ['-diag-error=1079,39,109', ]
              endif
            endif
          endif
          if (  ___jln_flags.get('pedantic', 'default') != 'default' )
            if (  ___jln_flags.get('pedantic', 'default') == 'off' )
              jln_cpp_flags += ['-fgnu-keywords', ]
            else
              jln_cpp_flags += ['-fno-gnu-keywords', '/Zc:inline', '/Zc:strictStrings', '/Zc:throwingNew', ]
            endif
          endif
          if (  ___jln_flags.get('shadow_warnings', 'default') != 'default' )
            if (  ___jln_flags.get('shadow_warnings', 'default') == 'off' )
              jln_cpp_flags += ['-Wno-shadow', ]
            else
              if (  ( ___jln_flags.get('shadow_warnings', 'default') == 'on' or ___jln_flags.get('shadow_warnings', 'default') == 'all' ) )
                jln_cpp_flags += ['-Wshadow', ]
              endif
            endif
          endif
          if (  ___jln_flags.get('stl_hardening', 'default') != 'default' )
            if (  ___jln_flags.get('stl_hardening', 'default') == 'debug_with_broken_abi' )
              jln_cpp_flags += ['-D_GLIBCXX_DEBUG', ]
              if (  ___jln_flags.get('pedantic', 'default') != 'default' and not ( ___jln_flags.get('pedantic', 'default') == 'off' ) )
                jln_cpp_flags += ['-D_GLIBCXX_DEBUG_PEDANTIC', ]
              endif
            else
              if (  ___jln_flags.get('stl_hardening', 'default') != 'off' )
                jln_cpp_flags += ['-D_GLIBCXX_ASSERTIONS', ]
              endif
            endif
          endif
          if (  ___jln_flags.get('symbols', 'default') != 'default' )
            if (  ___jln_flags.get('symbols', 'default') == 'nodebug' )
              jln_cpp_flags += ['-g0', ]
            else
              if (  ___jln_flags.get('symbols', 'default') == 'hidden' )
                jln_cpp_flags += ['-fvisibility=hidden', ]
              else
                if (  ___jln_flags.get('symbols', 'default') == 'debug' )
                  jln_cpp_flags += ['-g', ]
                else
                  if (  ___jln_flags.get('symbols', 'default') == 'minimal_debug' )
                    jln_cpp_flags += ['-g1', ]
                  else
                    if (  ___jln_flags.get('symbols', 'default') == 'full_debug' )
                      jln_cpp_flags += ['-g3', ]
                    endif
                  endif
                endif
              endif
            endif
          endif
          if (  ___jln_flags.get('optimization', 'default') != 'default' )
            if (  ___jln_flags.get('optimization', 'default') == '0' )
              jln_cpp_flags += ['-O0', ]
            else
              if (  ___jln_flags.get('optimization', 'default') == 'g' )
                jln_cpp_flags += ['-O1', ]
              else
                if (  ___jln_flags.get('optimization', 'default') == '1' )
                  jln_cpp_flags += ['-O1', ]
                else
                  if (  ___jln_flags.get('optimization', 'default') == '2' )
                    jln_cpp_flags += ['-O2', ]
                  else
                    if (  ___jln_flags.get('optimization', 'default') == '3' )
                      jln_cpp_flags += ['-O3', ]
                    else
                      if (  ___jln_flags.get('optimization', 'default') == 'z' )
                        jln_cpp_flags += ['-fast', ]
                      else
                        if (  ___jln_flags.get('optimization', 'default') == 'size' )
                          jln_cpp_flags += ['-Os', ]
                        else
                          jln_cpp_flags += ['-Ofast', ]
                        endif
                      endif
                    endif
                  endif
                endif
              endif
            endif
          endif
          if (  ___jln_flags.get('hardened', 'default') != 'default' )
            if (  ( ___jln_flags.get('hardened', 'default') == 'on' or ___jln_flags.get('hardened', 'default') == 'all' ) )
              jln_cpp_flags += ['-D_FORTIFY_SOURCE=2', ]
              if (  ___jln_flags.get('hardened', 'default') == 'all' )
                jln_cpp_flags += ['-fstack-protector-all', ]
              else
                jln_cpp_flags += ['-fstack-protector-strong', ]
              endif
              jln_cpp_flags += ['-fcf-protection=full', ]
              jln_link_flags += ['-Xlinker-zrelro', '-Xlinker-znow', '-Xlinker-znoexecstack', ]
            endif
          endif
          if (  ___jln_flags.get('sanitizers', 'default') != 'default' )
            if (  ( ___jln_flags.get('sanitizers', 'default') == 'on' or ___jln_flags.get('sanitizers', 'default') == 'with_minimal_code_size' or ___jln_flags.get('sanitizers', 'default') == 'extra' or ___jln_flags.get('sanitizers', 'default') == 'extra_with_minimal_code_size' or ___jln_flags.get('sanitizers', 'default') == 'address' or ___jln_flags.get('sanitizers', 'default') == 'address_with_minimal_code_size' ) )
              jln_cpp_flags += ['-ftrapuv', ]
              if (  ( ___jln_flags.get('sanitizers', 'default') == 'on' or ___jln_flags.get('sanitizers', 'default') == 'with_minimal_code_size' or ___jln_flags.get('sanitizers', 'default') == 'extra' or ___jln_flags.get('sanitizers', 'default') == 'extra_with_minimal_code_size' ) )
                jln_cpp_flags += ['-fp-stack-check', '-fp-trap=common', ]
              endif
            endif
          endif
          if (  ___jln_flags.get('linker', 'default') != 'default' )
            if (  ___jln_flags.get('linker', 'default') == 'bfd' )
              jln_link_flags += ['-fuse-ld=bfd', ]
            else
              if (  ___jln_flags.get('linker', 'default') == 'gold' )
                jln_link_flags += ['-fuse-ld=gold', ]
              else
                if (  ___jln_flags.get('linker', 'default') == 'mold' )
                  jln_link_flags += ['-fuse-ld=mold', ]
                else
                  jln_link_flags += ['-fuse-ld=lld', ]
                endif
              endif
            endif
          endif
          if (  ___jln_flags.get('lto', 'default') != 'default' )
            if (  ___jln_flags.get('lto', 'default') == 'off' )
              jln_cpp_flags += ['-no-ipo', ]
              jln_link_flags += ['-no-ipo', ]
            else
              if (  ___jln_flags.get('lto', 'default') != 'thin_or_nothing' )
                jln_cpp_flags += ['-ipo', ]
                jln_link_flags += ['-ipo', ]
              endif
            endif
          endif
          if (  ___jln_flags.get('exceptions', 'default') != 'default' )
            if (  ___jln_flags.get('exceptions', 'default') == 'on' )
              jln_cpp_flags += ['-fexceptions', ]
            else
              jln_cpp_flags += ['-fno-exceptions', ]
            endif
          endif
          if (  ___jln_flags.get('rtti', 'default') != 'default' )
            if (  ___jln_flags.get('rtti', 'default') == 'on' )
              jln_cpp_flags += ['-frtti', ]
            else
              jln_cpp_flags += ['-fno-rtti', ]
            endif
          endif
          if (  ___jln_flags.get('cpu', 'default') != 'default' )
            if (  ___jln_flags.get('cpu', 'default') == 'generic' )
              jln_cpp_flags += ['-mtune=generic', ]
              jln_link_flags += ['-mtune=generic', ]
            else
              jln_cpp_flags += ['-xHost', ]
              jln_link_flags += ['-xHost', ]
            endif
          endif
        else
          if (  (host_machine.system() == 'windows' and ___jln_compiler_id == 'gcc') )
            if (  ___jln_flags.get('windows_bigobj', 'default') != 'default' )
              jln_cpp_flags += ['-Wa,-mbig-obj', ]
            endif
          endif
        endif
      endif
    endif
  endif

  jln_custom_cpp_flags += [jln_cpp_flags]
  jln_custom_link_flags += [jln_link_flags]
endforeach
