# File generated with https://github.com/jonathanpoelen/cpp-compiler-options

from SCons.Environment import Environment
from SCons.Variables.EnumVariable import EnumVariable
import os
import re

_default_flags = {
  'analyzer': 'default',
  'analyzer_too_complex_warning': 'default',
  'analyzer_verbosity': 'default',
  'color': 'default',
  'control_flow': 'default',
  'conversion_warnings': 'on',
  'coverage': 'default',
  'covered_switch_default_warnings': 'on',
  'cpu': 'default',
  'debug': 'default',
  'debug_level': 'default',
  'diagnostics_format': 'default',
  'diagnostics_show_template_tree': 'default',
  'elide_type': 'default',
  'exceptions': 'default',
  'fix_compiler_error': 'on',
  'float_sanitizers': 'default',
  'integer_sanitizers': 'default',
  'linker': 'default',
  'lto': 'default',
  'msvc_conformance': 'all',
  'msvc_crt_secure_no_warnings': 'on',
  'msvc_diagnostics_format': 'caret',
  'msvc_isystem': 'default',
  'msvc_isystem_with_template_from_non_external': 'default',
  'ndebug': 'with_optimization_1_or_above',
  'noexcept_warnings': 'default',
  'optimization': 'default',
  'other_sanitizers': 'default',
  'pedantic': 'on',
  'pie': 'default',
  'relro': 'default',
  'reproducible_build_warnings': 'default',
  'rtti': 'default',
  'sanitizers': 'default',
  'shadow_warnings': 'off',
  'stack_protector': 'default',
  'stl_fix': 'on',
  'stl_hardening': 'default',
  'suggestions': 'default',
  'switch_warnings': 'on',
  'unsafe_buffer_usage_warnings': 'default',
  'var_init': 'default',
  'warnings': 'on',
  'warnings_as_error': 'default',
  'whole_program': 'default',
  'windows_abi_compatibility_warnings': 'off',
  'windows_bigobj': 'on',
}

_var2opts = {
  'jln_analyzer': 'analyzer',
  'jln_analyzer_too_complex_warning': 'analyzer_too_complex_warning',
  'jln_analyzer_verbosity': 'analyzer_verbosity',
  'jln_color': 'color',
  'jln_control_flow': 'control_flow',
  'jln_conversion_warnings': 'conversion_warnings',
  'jln_coverage': 'coverage',
  'jln_covered_switch_default_warnings': 'covered_switch_default_warnings',
  'jln_cpu': 'cpu',
  'jln_debug': 'debug',
  'jln_debug_level': 'debug_level',
  'jln_diagnostics_format': 'diagnostics_format',
  'jln_diagnostics_show_template_tree': 'diagnostics_show_template_tree',
  'jln_elide_type': 'elide_type',
  'jln_exceptions': 'exceptions',
  'jln_fix_compiler_error': 'fix_compiler_error',
  'jln_float_sanitizers': 'float_sanitizers',
  'jln_integer_sanitizers': 'integer_sanitizers',
  'jln_linker': 'linker',
  'jln_lto': 'lto',
  'jln_msvc_conformance': 'msvc_conformance',
  'jln_msvc_crt_secure_no_warnings': 'msvc_crt_secure_no_warnings',
  'jln_msvc_diagnostics_format': 'msvc_diagnostics_format',
  'jln_msvc_isystem': 'msvc_isystem',
  'jln_msvc_isystem_with_template_from_non_external': 'msvc_isystem_with_template_from_non_external',
  'jln_ndebug': 'ndebug',
  'jln_noexcept_warnings': 'noexcept_warnings',
  'jln_optimization': 'optimization',
  'jln_other_sanitizers': 'other_sanitizers',
  'jln_pedantic': 'pedantic',
  'jln_pie': 'pie',
  'jln_relro': 'relro',
  'jln_reproducible_build_warnings': 'reproducible_build_warnings',
  'jln_rtti': 'rtti',
  'jln_sanitizers': 'sanitizers',
  'jln_shadow_warnings': 'shadow_warnings',
  'jln_stack_protector': 'stack_protector',
  'jln_stl_fix': 'stl_fix',
  'jln_stl_hardening': 'stl_hardening',
  'jln_suggestions': 'suggestions',
  'jln_switch_warnings': 'switch_warnings',
  'jln_unsafe_buffer_usage_warnings': 'unsafe_buffer_usage_warnings',
  'jln_var_init': 'var_init',
  'jln_warnings': 'warnings',
  'jln_warnings_as_error': 'warnings_as_error',
  'jln_whole_program': 'whole_program',
  'jln_windows_abi_compatibility_warnings': 'windows_abi_compatibility_warnings',
  'jln_windows_bigobj': 'windows_bigobj',
}

_opt2vars = {
  'analyzer': 'jln_analyzer',
  'analyzer_too_complex_warning': 'jln_analyzer_too_complex_warning',
  'analyzer_verbosity': 'jln_analyzer_verbosity',
  'color': 'jln_color',
  'control_flow': 'jln_control_flow',
  'conversion_warnings': 'jln_conversion_warnings',
  'coverage': 'jln_coverage',
  'covered_switch_default_warnings': 'jln_covered_switch_default_warnings',
  'cpu': 'jln_cpu',
  'debug': 'jln_debug',
  'debug_level': 'jln_debug_level',
  'diagnostics_format': 'jln_diagnostics_format',
  'diagnostics_show_template_tree': 'jln_diagnostics_show_template_tree',
  'elide_type': 'jln_elide_type',
  'exceptions': 'jln_exceptions',
  'fix_compiler_error': 'jln_fix_compiler_error',
  'float_sanitizers': 'jln_float_sanitizers',
  'integer_sanitizers': 'jln_integer_sanitizers',
  'linker': 'jln_linker',
  'lto': 'jln_lto',
  'msvc_conformance': 'jln_msvc_conformance',
  'msvc_crt_secure_no_warnings': 'jln_msvc_crt_secure_no_warnings',
  'msvc_diagnostics_format': 'jln_msvc_diagnostics_format',
  'msvc_isystem': 'jln_msvc_isystem',
  'msvc_isystem_with_template_from_non_external': 'jln_msvc_isystem_with_template_from_non_external',
  'ndebug': 'jln_ndebug',
  'noexcept_warnings': 'jln_noexcept_warnings',
  'optimization': 'jln_optimization',
  'other_sanitizers': 'jln_other_sanitizers',
  'pedantic': 'jln_pedantic',
  'pie': 'jln_pie',
  'relro': 'jln_relro',
  'reproducible_build_warnings': 'jln_reproducible_build_warnings',
  'rtti': 'jln_rtti',
  'sanitizers': 'jln_sanitizers',
  'shadow_warnings': 'jln_shadow_warnings',
  'stack_protector': 'jln_stack_protector',
  'stl_fix': 'jln_stl_fix',
  'stl_hardening': 'jln_stl_hardening',
  'suggestions': 'jln_suggestions',
  'switch_warnings': 'jln_switch_warnings',
  'unsafe_buffer_usage_warnings': 'jln_unsafe_buffer_usage_warnings',
  'var_init': 'jln_var_init',
  'warnings': 'jln_warnings',
  'warnings_as_error': 'jln_warnings_as_error',
  'whole_program': 'jln_whole_program',
  'windows_abi_compatibility_warnings': 'jln_windows_abi_compatibility_warnings',
  'windows_bigobj': 'jln_windows_bigobj',
}

def set_global_flags(default_values):
  _default_flags.update(default_values)

def add_variables(vars, default_values={}):
  vars.AddVariables(
    EnumVariable('jln_analyzer', 'Enables an static analysis. It can have false positives and false negatives. It is a bug-finding tool, rather than a tool for proving program correctness. Available only with GCC and MSVC.', default_values.get('analyzer', _default_flags['analyzer']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_analyzer_too_complex_warning', 'By default, the analysis silently stops if the code is too complicated for the analyzer to fully explore and it reaches an internal limit. This option warns if this occurs. Available only with GCC.', default_values.get('analyzer_too_complex_warning', _default_flags['analyzer_too_complex_warning']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_analyzer_verbosity', 'Controls the complexity of the control flow paths that are emitted for analyzer diagnostics. Available only with GCC.\\n - 0: At this level, interprocedural call and return events are displayed, along with the most pertinent state-change events relating to a diagnostic. For example, for a double-free diagnostic, both calls to free will be shown.\\n - 1: As per the previous level, but also show events for the entry to each function.\\n - 2: As per the previous level, but also show events relating to control flow that are significant to triggering the issue (e.g. “true path taken” at a conditional). This level is the default.\\n - 3: As per the previous level, but show all control flow events, not just significant ones.', default_values.get('analyzer_verbosity', _default_flags['analyzer_verbosity']),
                 allowed_values=('default', '0', '1', '2', '3')),
    EnumVariable('jln_color', '', default_values.get('color', _default_flags['color']),
                 allowed_values=('default', 'auto', 'never', 'always')),
    EnumVariable('jln_control_flow', 'Insert extra runtime security checks to detect attempts to compromise your code.', default_values.get('control_flow', _default_flags['control_flow']),
                 allowed_values=('default', 'off', 'on', 'branch', 'return', 'allow_bugs')),
    EnumVariable('jln_conversion_warnings', 'Warn for implicit conversions that may alter a value.\\n - on: Combine conversion and sign value\\n - sign: Warn for implicit conversions that may change the sign (lke `unsigned_integer = signed_integer`) or a comparison between signed and unsigned values could produce an incorrect result when the signed value is converted to unsigned.\\n - float: Warn for implicit conversions that reduce the precision of a real value.\\n - conversion: Warn for implicit conversions that may alter a value.\\n - all: Like conversion and also warn about implicit conversions from arithmetic operations even when conversion of the operands to the same type cannot change their values.', default_values.get('conversion_warnings', _default_flags['conversion_warnings']),
                 allowed_values=('default', 'off', 'on', 'sign', 'float', 'conversion', 'all')),
    EnumVariable('jln_coverage', '', default_values.get('coverage', _default_flags['coverage']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_covered_switch_default_warnings', 'Warning for default label in switch which covers all enumeration values.', default_values.get('covered_switch_default_warnings', _default_flags['covered_switch_default_warnings']),
                 allowed_values=('default', 'on', 'off')),
    EnumVariable('jln_cpu', '', default_values.get('cpu', _default_flags['cpu']),
                 allowed_values=('default', 'generic', 'native')),
    EnumVariable('jln_debug', 'Produce debugging information in the operating system\'s.', default_values.get('debug', _default_flags['debug']),
                 allowed_values=('default', 'off', 'on', 'gdb', 'lldb', 'vms', 'codeview', 'dbx', 'sce')),
    EnumVariable('jln_debug_level', 'Specify debugging level', default_values.get('debug_level', _default_flags['debug_level']),
                 allowed_values=('default', '0', '1', '2', '3', 'line_tables_only', 'line_directives_only')),
    EnumVariable('jln_diagnostics_format', 'Emit fix-it hints in a machine-parseable format.', default_values.get('diagnostics_format', _default_flags['diagnostics_format']),
                 allowed_values=('default', 'fixits', 'patch', 'print_source_range_info')),
    EnumVariable('jln_diagnostics_show_template_tree', 'Enables printing a tree-like structure showing the common and differing parts of the types.', default_values.get('diagnostics_show_template_tree', _default_flags['diagnostics_show_template_tree']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_elide_type', 'Prints diagnostics showing common parts of template types as \"[...]\".', default_values.get('elide_type', _default_flags['elide_type']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_exceptions', 'Enable C++ exceptions.', default_values.get('exceptions', _default_flags['exceptions']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_fix_compiler_error', 'Transforms some warnings into errors to comply with the standard.', default_values.get('fix_compiler_error', _default_flags['fix_compiler_error']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_float_sanitizers', '', default_values.get('float_sanitizers', _default_flags['float_sanitizers']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_integer_sanitizers', '', default_values.get('integer_sanitizers', _default_flags['integer_sanitizers']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_linker', 'Configure linker.', default_values.get('linker', _default_flags['linker']),
                 allowed_values=('default', 'bfd', 'gold', 'lld', 'mold', 'native')),
    EnumVariable('jln_lto', 'Enable Link Time Optimization.', default_values.get('lto', _default_flags['lto']),
                 allowed_values=('default', 'off', 'on', 'normal', 'fat', 'thin')),
    EnumVariable('jln_msvc_conformance', 'Standard conformance options.', default_values.get('msvc_conformance', _default_flags['msvc_conformance']),
                 allowed_values=('default', 'all', 'all_without_throwing_new')),
    EnumVariable('jln_msvc_crt_secure_no_warnings', 'Disable CRT warnings with MSVC.', default_values.get('msvc_crt_secure_no_warnings', _default_flags['msvc_crt_secure_no_warnings']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_msvc_diagnostics_format', 'Controls the display of error and warning information (https://learn.microsoft.com/en-us/cpp/build/reference/diagnostics-compiler-diagnostic-options?view=msvc-170).\\n - classic: Which reports only the line number where the issue was found.\\n - column: Includes the column where the issue was found. This can help you identify the specific language construct or character that is causing the issue.\\n - caret: Includes the column where the issue was found and places a caret (^) under the location in the line of code where the issue was detected.', default_values.get('msvc_diagnostics_format', _default_flags['msvc_diagnostics_format']),
                 allowed_values=('default', 'classic', 'column', 'caret')),
    EnumVariable('jln_msvc_isystem', 'Warnings concerning external header (https://devblogs.microsoft.com/cppblog/broken-warnings-theory).', default_values.get('msvc_isystem', _default_flags['msvc_isystem']),
                 allowed_values=('default', 'anglebrackets', 'include_and_caexcludepath', 'assumed')),
    EnumVariable('jln_msvc_isystem_with_template_from_non_external', 'Warnings concerning template in an external header (requires msvc_isystem).', default_values.get('msvc_isystem_with_template_from_non_external', _default_flags['msvc_isystem_with_template_from_non_external']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_ndebug', 'Enable NDEBUG macro (disable assert macro).', default_values.get('ndebug', _default_flags['ndebug']),
                 allowed_values=('default', 'off', 'on', 'with_optimization_1_or_above')),
    EnumVariable('jln_noexcept_warnings', 'Warn when a noexcept-expression evaluates to false because of a call to a function that does not have a non-throwing exception specification (i.e. \"throw()\" or \"noexcept\") but is known by the compiler to never throw an exception.', default_values.get('noexcept_warnings', _default_flags['noexcept_warnings']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_optimization', 'Optimization level.\\n - 0: Not optimize.\\n - g: Enable debugging experience.\\n - 1: Optimize.\\n - 2: Optimize even more.\\n - 3: Optimize yet more.\\n - fast: Enables all optimization=3 and disregard strict standards compliance.\\n - size: Optimize for size.\\n - z: Optimize for size aggressively (/!\\ possible slow compilation with emcc).', default_values.get('optimization', _default_flags['optimization']),
                 allowed_values=('default', '0', 'g', '1', '2', '3', 'fast', 'size', 'z')),
    EnumVariable('jln_other_sanitizers', 'Enable other sanitizers.', default_values.get('other_sanitizers', _default_flags['other_sanitizers']),
                 allowed_values=('default', 'off', 'thread', 'pointer', 'memory')),
    EnumVariable('jln_pedantic', 'Issue all the warnings demanded by strict ISO C and ISO C++.', default_values.get('pedantic', _default_flags['pedantic']),
                 allowed_values=('default', 'off', 'on', 'as_error')),
    EnumVariable('jln_pie', 'Controls position-independent code generation.', default_values.get('pie', _default_flags['pie']),
                 allowed_values=('default', 'off', 'on', 'static', 'fpic', 'fPIC', 'fpie', 'fPIE')),
    EnumVariable('jln_relro', 'Specifies a memory segment that should be made read-only after relocation, if supported.', default_values.get('relro', _default_flags['relro']),
                 allowed_values=('default', 'off', 'on', 'full')),
    EnumVariable('jln_reproducible_build_warnings', 'Warn when macros \"__TIME__\", \"__DATE__\" or \"__TIMESTAMP__\" are encountered as they might prevent bit-wise-identical reproducible compilations.', default_values.get('reproducible_build_warnings', _default_flags['reproducible_build_warnings']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_rtti', 'Disable generation of information about every class with virtual functions for use by the C++ run-time type identification features (\"dynamic_cast\" and \"typeid\").', default_values.get('rtti', _default_flags['rtti']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_sanitizers', 'Enable sanitizers (asan, ubsan, etc).', default_values.get('sanitizers', _default_flags['sanitizers']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_shadow_warnings', '', default_values.get('shadow_warnings', _default_flags['shadow_warnings']),
                 allowed_values=('default', 'off', 'on', 'local', 'compatible_local', 'all')),
    EnumVariable('jln_stack_protector', 'Emit extra code to check for buffer overflows, such as stack smashing attacks.', default_values.get('stack_protector', _default_flags['stack_protector']),
                 allowed_values=('default', 'off', 'on', 'strong', 'all')),
    EnumVariable('jln_stl_fix', 'Enable /DNOMINMAX with msvc.', default_values.get('stl_fix', _default_flags['stl_fix']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_stl_hardening', 'Hardening allows turning some instances of undefined behavior in the standard library into a contract violation.\\n - fast: A set of security-critical checks that can be done with relatively little overhead in constant time and are intended to be used in production. No impact on the ABI.\\n - extensive: All the checks from fast mode and some additional checks for undefined behavior that incur relatively little overhead but aren’t security-critical. No impact on the ABI.\\n - debug: Enables all the available checks, including heuristic checks that might have significant performance overhead as well as internal library assertions. No impact on the ABI.\\n - debug_with_broken_abi: Debug mode with ABI incompatibility for more check.', default_values.get('stl_hardening', _default_flags['stl_hardening']),
                 allowed_values=('default', 'off', 'fast', 'extensive', 'debug', 'debug_with_broken_abi')),
    EnumVariable('jln_suggestions', 'Warn for cases where adding an attribute may be beneficial.', default_values.get('suggestions', _default_flags['suggestions']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_switch_warnings', 'Warnings concerning the switch keyword.', default_values.get('switch_warnings', _default_flags['switch_warnings']),
                 allowed_values=('default', 'on', 'off', 'exhaustive_enum', 'mandatory_default', 'exhaustive_enum_and_mandatory_default')),
    EnumVariable('jln_unsafe_buffer_usage_warnings', 'Enable -Wunsafe-buffer-usage with clang (https://clang.llvm.org/docs/SafeBuffers.html).', default_values.get('unsafe_buffer_usage_warnings', _default_flags['unsafe_buffer_usage_warnings']),
                 allowed_values=('default', 'on', 'off')),
    EnumVariable('jln_var_init', 'Initialize all stack variables implicitly, including padding.\\n - uninitialized: Doesn\'t initialize any automatic variables (default behavior of Gcc and Clang).\\n - pattern: Initialize automatic variables with byte-repeatable pattern (0xFE for Gcc, 0xAA for Clang).\\n - zero: zero Initialize automatic variables with zeroes.', default_values.get('var_init', _default_flags['var_init']),
                 allowed_values=('default', 'uninitialized', 'pattern', 'zero')),
    EnumVariable('jln_warnings', 'Warning level.\\n - on: Activates essential warnings and extras.\\n - essential: Activates essential warnings, typically -Wall -Wextra or /W4).\\n - extensive: Activates essential warnings, extras and some that may raise false positives', default_values.get('warnings', _default_flags['warnings']),
                 allowed_values=('default', 'off', 'on', 'essential', 'extensive')),
    EnumVariable('jln_warnings_as_error', 'Make all or some warnings into errors.', default_values.get('warnings_as_error', _default_flags['warnings_as_error']),
                 allowed_values=('default', 'off', 'on', 'basic')),
    EnumVariable('jln_whole_program', 'Assume that the current compilation unit represents the whole program being compiled. This option should not be used in combination with lto.', default_values.get('whole_program', _default_flags['whole_program']),
                 allowed_values=('default', 'off', 'on', 'strip_all')),
    EnumVariable('jln_windows_abi_compatibility_warnings', 'In code that is intended to be portable to Windows-based compilers the warning helps prevent unresolved references due to the difference in the mangling of symbols declared with different class-keys.', default_values.get('windows_abi_compatibility_warnings', _default_flags['windows_abi_compatibility_warnings']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_windows_bigobj', 'Increases that addressable sections capacity.', default_values.get('windows_bigobj', _default_flags['windows_bigobj']),
                 allowed_values=('default', 'on'))  )

def varname_to_optname(options):
  return {_var2opts.get(k, k):v for k,v in options.items()}
def optname_to_varname(options):
  return {_opt2vars.get(k, k):v for k,v in options.items()}
def variables_to_options(vars):
  args = vars.args
  return {_var2opts[v.key]:args.get(v.key, v.default) for v in vars.options}

_default_env = Environment()
_map_compiler = {
  "g++": "gcc",
  "clang++": "clang",
  "icpc": "icc",
}
_compiler_name_extractor = re.compile('([\w+]+(?:-[\w+]+)*)')
_compiler_version_cache = {}

def get_flags(options, env=None):
  env = env or _default_env
  compiler = env['CXX']
  version = env.get('CXXVERSION')
  linker = env.get('LD')

  _compiler = os.path.basename(compiler)
  _compiler = _compiler_name_extractor.match(_compiler).group(1)
  _compiler = _map_compiler.get(_compiler, _compiler)
  platform = None

  if version:
    version = version.split(".")
    version[0] = int(version[0])
    version[1] = int(version[1]) if len(version) == 1 else 0

  if _compiler == 'mingw':
    compiler = 'gcc'
    platform = 'mingw'
  elif _compiler in ('icx', 'icpx', 'dpcpp'):
    # is icx version, replace with clang version
    if not version or version[0] > 2000:
      version = _compiler_version_cache.get(compiler)
      if not version:
        from subprocess import check_output
        out = check_output([compiler, '-x', 'c', '-', '-dM', '-E'], input=b'').decode()
        m = re.search(
            '__clang_major__ (\d+)\n'
            '#define __clang_minor__ (\d+)\n'
            '#define __clang_patchlevel__ (\d+)',
            out
        )
        version = (int(m.group(1)), int(m.group(2)))
        _compiler_version_cache[compiler] = version
    is_clang_like = true
    compiler = 'clang'
  elif _compiler == 'emcc':
    is_clang_like = true
    compiler = 'clang-emcc'
  else:
    is_clang_like = compiler.startswith('clang')
    compiler = _compiler

  version = version or (0,0)
  compversion = version[0] * 100000 + version[1]

  options = options if type(options) == dict else variables_to_options(options)

  flags=[]
  linkflags=[]
  x_analyzer = options.get('analyzer', _default_flags['analyzer'])
  x_analyzer_too_complex_warning = options.get('analyzer_too_complex_warning', _default_flags['analyzer_too_complex_warning'])
  x_analyzer_verbosity = options.get('analyzer_verbosity', _default_flags['analyzer_verbosity'])
  x_color = options.get('color', _default_flags['color'])
  x_control_flow = options.get('control_flow', _default_flags['control_flow'])
  x_conversion_warnings = options.get('conversion_warnings', _default_flags['conversion_warnings'])
  x_coverage = options.get('coverage', _default_flags['coverage'])
  x_covered_switch_default_warnings = options.get('covered_switch_default_warnings', _default_flags['covered_switch_default_warnings'])
  x_cpu = options.get('cpu', _default_flags['cpu'])
  x_debug = options.get('debug', _default_flags['debug'])
  x_debug_level = options.get('debug_level', _default_flags['debug_level'])
  x_diagnostics_format = options.get('diagnostics_format', _default_flags['diagnostics_format'])
  x_diagnostics_show_template_tree = options.get('diagnostics_show_template_tree', _default_flags['diagnostics_show_template_tree'])
  x_elide_type = options.get('elide_type', _default_flags['elide_type'])
  x_exceptions = options.get('exceptions', _default_flags['exceptions'])
  x_fix_compiler_error = options.get('fix_compiler_error', _default_flags['fix_compiler_error'])
  x_float_sanitizers = options.get('float_sanitizers', _default_flags['float_sanitizers'])
  x_integer_sanitizers = options.get('integer_sanitizers', _default_flags['integer_sanitizers'])
  x_linker = options.get('linker', _default_flags['linker'])
  x_lto = options.get('lto', _default_flags['lto'])
  x_msvc_conformance = options.get('msvc_conformance', _default_flags['msvc_conformance'])
  x_msvc_crt_secure_no_warnings = options.get('msvc_crt_secure_no_warnings', _default_flags['msvc_crt_secure_no_warnings'])
  x_msvc_diagnostics_format = options.get('msvc_diagnostics_format', _default_flags['msvc_diagnostics_format'])
  x_msvc_isystem = options.get('msvc_isystem', _default_flags['msvc_isystem'])
  x_msvc_isystem_with_template_from_non_external = options.get('msvc_isystem_with_template_from_non_external', _default_flags['msvc_isystem_with_template_from_non_external'])
  x_ndebug = options.get('ndebug', _default_flags['ndebug'])
  x_noexcept_warnings = options.get('noexcept_warnings', _default_flags['noexcept_warnings'])
  x_optimization = options.get('optimization', _default_flags['optimization'])
  x_other_sanitizers = options.get('other_sanitizers', _default_flags['other_sanitizers'])
  x_pedantic = options.get('pedantic', _default_flags['pedantic'])
  x_pie = options.get('pie', _default_flags['pie'])
  x_relro = options.get('relro', _default_flags['relro'])
  x_reproducible_build_warnings = options.get('reproducible_build_warnings', _default_flags['reproducible_build_warnings'])
  x_rtti = options.get('rtti', _default_flags['rtti'])
  x_sanitizers = options.get('sanitizers', _default_flags['sanitizers'])
  x_shadow_warnings = options.get('shadow_warnings', _default_flags['shadow_warnings'])
  x_stack_protector = options.get('stack_protector', _default_flags['stack_protector'])
  x_stl_fix = options.get('stl_fix', _default_flags['stl_fix'])
  x_stl_hardening = options.get('stl_hardening', _default_flags['stl_hardening'])
  x_suggestions = options.get('suggestions', _default_flags['suggestions'])
  x_switch_warnings = options.get('switch_warnings', _default_flags['switch_warnings'])
  x_unsafe_buffer_usage_warnings = options.get('unsafe_buffer_usage_warnings', _default_flags['unsafe_buffer_usage_warnings'])
  x_var_init = options.get('var_init', _default_flags['var_init'])
  x_warnings = options.get('warnings', _default_flags['warnings'])
  x_warnings_as_error = options.get('warnings_as_error', _default_flags['warnings_as_error'])
  x_whole_program = options.get('whole_program', _default_flags['whole_program'])
  x_windows_abi_compatibility_warnings = options.get('windows_abi_compatibility_warnings', _default_flags['windows_abi_compatibility_warnings'])
  x_windows_bigobj = options.get('windows_bigobj', _default_flags['windows_bigobj'])

  if x_ndebug != 'default' :
    if ( compiler == 'msvc' or compiler == 'icl' ) :
      if x_ndebug == 'off' :
        flags += ('/UNDEBUG', )
      else:
        if x_ndebug == 'on' :
          flags += ('/DNDEBUG', )
        else:
          if x_optimization != 'default' and not ( x_optimization == '0' or x_optimization == 'g' ) :
            flags += ('/DNDEBUG', )
    else:
      if x_ndebug == 'off' :
        flags += ('-UNDEBUG', )
      else:
        if x_ndebug == 'on' :
          flags += ('-DNDEBUG', )
        else:
          if x_optimization != 'default' and not ( x_optimization == '0' or x_optimization == 'g' ) :
            flags += ('-DNDEBUG', )
  if ( compiler == 'gcc' or is_clang_like ) :
    if x_warnings != 'default' :
      if x_warnings == 'off' :
        flags += ('-w', )
      else:
        if x_warnings == 'essential' :
          flags += ('-Wall', '-Wextra', )
        else:
          if compiler == 'gcc' :
            flags += ('-Wall', '-Wextra', )
            if compversion < 800000 :
              flags += ('-Wcast-align', )
            flags += ('-Wcast-qual', '-Wdisabled-optimization', '-Wfloat-equal', '-Wformat-security', '-Wformat=2', '-Winvalid-pch', '-Wmissing-declarations', '-Wmissing-include-dirs', '-Wpacked', '-Wredundant-decls', '-Wundef', '-Wunused-macros', '-Wpointer-arith', '-Wnon-virtual-dtor', '-Wold-style-cast', '-Woverloaded-virtual', )
            if compversion >= 400007 :
              flags += ('-Wsuggest-attribute=noreturn', '-Wzero-as-null-pointer-constant', '-Wlogical-op', '-Wvector-operation-performance', '-Wdouble-promotion', '-Wtrampolines', )
              if compversion >= 400008 :
                flags += ('-Wuseless-cast', )
                if compversion >= 400009 :
                  flags += ('-Wconditionally-supported', )
                  if compversion >= 500001 :
                    flags += ('-Wformat-signedness', '-Warray-bounds=2', '-Wstrict-null-sentinel', '-Wsuggest-override', )
                    if compversion >= 600001 :
                      flags += ('-Wduplicated-cond', '-Wnull-dereference', )
                      if compversion >= 700000 :
                        flags += ('-Waligned-new', )
                        if compversion >= 700001 :
                          flags += ('-Walloc-zero', '-Walloca', '-Wformat-overflow=2', '-Wduplicated-branches', )
                          if compversion >= 800000 :
                            flags += ('-Wcast-align=strict', '-Wformat-truncation=2', '-Wshift-overflow=2', '-Wclass-memaccess', )
                            if compversion >= 1400000 :
                              flags += ('-Walloc-size', )
            if x_warnings == 'extensive' :
              if compversion >= 800000 :
                flags += ('-Wstringop-overflow=4', )
                if compversion >= 1200000 :
                  flags += ('-Wuse-after-free=3', )
          else:
            flags += ('-Weverything', '-Wno-documentation', '-Wno-documentation-unknown-command', '-Wno-newline-eof', '-Wno-c++98-compat', '-Wno-c++98-compat-pedantic', '-Wno-padded', '-Wno-global-constructors', '-Wno-weak-vtables', '-Wno-exit-time-destructors', )
            if  not ( ( x_switch_warnings == 'off' or x_switch_warnings == 'exhaustive_enum' or x_switch_warnings == 'exhaustive_enum_and_mandatory_default' ) ) :
              flags += ('-Wno-switch-enum', )
            if x_covered_switch_default_warnings == 'default' :
              flags += ('-Wno-covered-switch-default', )
            if x_conversion_warnings != 'default' :
              if x_conversion_warnings == 'conversion' :
                flags += ('-Wno-sign-compare', '-Wno-sign-conversion', )
              else:
                if ( x_conversion_warnings == 'float' or x_conversion_warnings == 'sign' ) :
                  flags += ('-Wno-conversion', )
            if compversion >= 300009 :
              flags += ('-Wno-undefined-var-template', )
              if compversion >= 500000 :
                flags += ('-Wno-inconsistent-missing-destructor-override', )
                if compversion >= 900000 :
                  flags += ('-Wno-ctad-maybe-unsupported', )
                  if compversion >= 1000000 :
                    flags += ('-Wno-c++20-compat', )
                    if compversion >= 1100000 :
                      flags += ('-Wno-suggest-destructor-override', )
                      if compversion >= 1600000 :
                        if x_unsafe_buffer_usage_warnings == 'default' :
                          flags += ('-Wno-unsafe-buffer-usage', )
    if compiler == 'gcc' :
      if x_switch_warnings != 'default' :
        if x_switch_warnings == 'on' :
          flags += ('-Wswitch', )
        else:
          if x_switch_warnings == 'exhaustive_enum' :
            flags += ('-Wswitch-enum', )
          else:
            if x_switch_warnings == 'mandatory_default' :
              flags += ('-Wswitch-default', )
            else:
              if x_switch_warnings == 'exhaustive_enum_and_mandatory_default' :
                flags += ('-Wswitch-default', '-Wswitch-enum', )
              else:
                flags += ('-Wno-switch', '-Wno-switch-enum', '-Wno-switch-default', )
    else:
      if x_switch_warnings != 'default' :
        if x_switch_warnings == 'on' :
          flags += ('-Wswitch', '-Wno-switch-default', )
        else:
          if x_switch_warnings == 'mandatory_default' :
            flags += ('-Wswitch', '-Wswitch-default', )
          else:
            if x_switch_warnings == 'exhaustive_enum' :
              flags += ('-Wswitch', '-Wswitch-enum', '-Wno-switch-default', )
            else:
              if x_switch_warnings == 'exhaustive_enum_and_mandatory_default' :
                flags += ('-Wswitch', '-Wswitch-enum', '-Wswitch-default', )
              else:
                flags += ('-Wno-switch', '-Wno-switch-enum', '-Wno-switch-default', )
      if x_covered_switch_default_warnings != 'default' :
        if x_covered_switch_default_warnings == 'off' :
          flags += ('-Wno-covered-switch-default', )
        else:
          flags += ('-Wcovered-switch-default', )
    if x_unsafe_buffer_usage_warnings != 'default' :
      if ( is_clang_like and compversion >= 1600000 ) :
        if x_unsafe_buffer_usage_warnings == 'off' :
          flags += ('-Wno-unsafe-buffer-usage', )
        else:
          flags += ('-Wunsafe-buffer-usage', )
    if x_diagnostics_show_template_tree != 'default' :
      if ( ( compiler == 'gcc' and compversion >= 800000 ) or is_clang_like ) :
        if x_diagnostics_show_template_tree == 'on' :
          flags += ('-fdiagnostics-show-template-tree', )
        else:
          flags += ('-fno-diagnostics-show-template-tree', )
    if x_elide_type != 'default' :
      if x_elide_type == 'on' :
        if ( compiler == 'gcc' and compversion >= 800000 ) :
          flags += ('-felide-type', )
      else:
        if ( ( compiler == 'gcc' and compversion >= 800000 ) or ( is_clang_like and compversion >= 300004 ) ) :
          flags += ('-fno-elide-type', )
    if x_exceptions != 'default' :
      if x_exceptions == 'on' :
        flags += ('-fexceptions', )
        if compiler == 'clang-emcc' :
          flags += ('-sDISABLE_EXCEPTION_CATCHING=0', )
      else:
        flags += ('-fno-exceptions', )
    if x_rtti != 'default' :
      if x_rtti == 'on' :
        flags += ('-frtti', )
      else:
        flags += ('-fno-rtti', )
    if x_var_init != 'default' :
      if ( ( compiler == 'gcc' and compversion >= 1200000 ) or ( is_clang_like and compversion >= 800000 ) ) :
        if ( is_clang_like and compversion <= 1500000 ) :
          if x_var_init == 'zero' :
            flags += ('-enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang', )
        if x_var_init == 'pattern' :
          flags += ('-ftrivial-auto-var-init=pattern', )
          if compiler == 'gcc' :
            flags += ('-Wtrivial-auto-var-init', )
        else:
          if x_var_init == 'zero' :
            flags += ('-ftrivial-auto-var-init=zero', )
            if compiler == 'gcc' :
              flags += ('-Wtrivial-auto-var-init', )
          else:
            flags += ('-ftrivial-auto-var-init=uninitialized', )
    if x_windows_abi_compatibility_warnings != 'default' :
      if ( ( compiler == 'gcc' and compversion >= 1000000 ) or is_clang_like ) :
        if x_windows_abi_compatibility_warnings == 'on' :
          flags += ('-Wmismatched-tags', )
        else:
          flags += ('-Wno-mismatched-tags', )
    if x_warnings_as_error != 'default' :
      if x_warnings_as_error == 'on' :
        flags += ('-Werror', )
      else:
        if x_warnings_as_error == 'basic' :
          flags += ('-Werror=return-type', '-Werror=init-self', )
          if compiler == 'gcc' :
            flags += ('-Werror=div-by-zero', )
            if compversion >= 500001 :
              flags += ('-Werror=array-bounds', '-Werror=logical-op', '-Werror=logical-not-parentheses', )
              if compversion >= 700000 :
                flags += ('-Werror=literal-suffix', )
          else:
            flags += ('-Werror=array-bounds', '-Werror=division-by-zero', )
            if compversion >= 300004 :
              flags += ('-Werror=logical-not-parentheses', )
              if compversion >= 300006 :
                flags += ('-Werror=delete-incomplete', )
                if compversion >= 600000 :
                  flags += ('-Werror=user-defined-literals', )
                  if compversion >= 700000 :
                    flags += ('-Werror=dynamic-class-memaccess', )
        else:
          flags += ('-Wno-error', )
    if x_suggestions != 'default' :
      if x_suggestions != 'off' :
        if compiler == 'gcc' :
          flags += ('-Wsuggest-attribute=pure', '-Wsuggest-attribute=const', )
          if compversion >= 500000 :
            flags += ('-Wsuggest-final-types', '-Wsuggest-final-methods', )
            if compversion >= 500001 :
              flags += ('-Wnoexcept', )
    if x_sanitizers != 'default' :
      if x_sanitizers == 'off' :
        flags += ('-fno-sanitize=all', )
        linkflags += ('-fno-sanitize=all', )
      else:
        if compiler == 'clang-cl' :
          flags += ('-fsanitize=undefined', '-fsanitize=address', '-fsanitize-address-use-after-scope', )
        else:
          if ( compiler == 'clang' or compiler == 'clang-emcc' ) :
            if compversion >= 300001 :
              flags += ('-fsanitize=undefined', '-fsanitize=address', '-fsanitize-address-use-after-scope', '-fno-omit-frame-pointer', '-fno-optimize-sibling-calls', )
              linkflags += ('-fsanitize=undefined', '-fsanitize=address', )
              if compiler == 'clang' :
                if compversion >= 300004 :
                  flags += ('-fsanitize=leak', )
                  linkflags += ('-fsanitize=leak', )
                if compversion >= 600000 :
                  if x_stack_protector != 'default' :
                    if x_stack_protector != 'off' :
                      flags += ('-fsanitize-minimal-runtime', )
          else:
            if compversion >= 400008 :
              flags += ('-fsanitize=address', '-fno-omit-frame-pointer', '-fno-optimize-sibling-calls', )
              linkflags += ('-fsanitize=address', )
              if compversion >= 400009 :
                flags += ('-fsanitize=undefined', '-fsanitize=leak', )
                linkflags += ('-fsanitize=undefined', '-fsanitize=leak', )
                if compversion >= 1200000 :
                  flags += ('-fsanitize=bounds-strict', )
                  linkflags += ('-fsanitize=bounds-strict', )
    if x_control_flow != 'default' :
      if compiler == 'clang-emcc' :
        if x_control_flow == 'off' :
          linkflags += ('-sASSERTIONS=0', '-sSAFE_HEAP=0', )
        else:
          linkflags += ('-sASSERTIONS=1', '-sDEMANGLE_SUPPORT=1', )
          if  not ( ( x_sanitizers == 'on' ) ) :
            linkflags += ('-sSAFE_HEAP=1', )
      else:
        if x_control_flow == 'off' :
          if ( compiler == 'gcc' and compversion >= 800000 ) :
            flags += ('-fcf-protection=none', )
          else:
            flags += ('-fno-sanitize=cfi', '-fcf-protection=none', '-fno-sanitize-cfi-cross-dso', )
            linkflags += ('-fno-sanitize=cfi', )
        else:
          if ( ( compiler == 'gcc' and compversion >= 800000 ) or compiler != 'gcc' ) :
            if x_control_flow == 'branch' :
              flags += ('-fcf-protection=branch', )
            else:
              if x_control_flow == 'return' :
                flags += ('-fcf-protection=return', )
              else:
                flags += ('-fcf-protection=full', )
            if ( x_control_flow == 'allow_bugs' and compiler == 'clang' ) :
              flags += ('-fsanitize=cfi', '-fvisibility=hidden', '-flto', )
              linkflags += ('-fsanitize=cfi', '-flto', )
    if x_color != 'default' :
      if ( compversion >= 400009 or compiler != 'gcc' ) :
        if x_color == 'auto' :
          flags += ('-fdiagnostics-color=auto', )
        else:
          if x_color == 'never' :
            flags += ('-fdiagnostics-color=never', )
          else:
            flags += ('-fdiagnostics-color=always', )
    if x_reproducible_build_warnings != 'default' :
      if ( compiler == 'gcc' and compversion >= 400009 ) :
        if x_reproducible_build_warnings == 'on' :
          flags += ('-Wdate-time', )
        else:
          flags += ('-Wno-date-time', )
    if x_diagnostics_format != 'default' :
      if x_diagnostics_format == 'fixits' :
        if ( ( compiler == 'gcc' and compversion >= 700000 ) or ( compiler != 'gcc' and compversion >= 500000 ) ) :
          flags += ('-fdiagnostics-parseable-fixits', )
      else:
        if x_diagnostics_format == 'patch' :
          if ( compiler == 'gcc' and compversion >= 700000 ) :
            flags += ('-fdiagnostics-generate-patch', )
        else:
          if is_clang_like :
            flags += ('-fdiagnostics-print-source-range-info', )
    if x_fix_compiler_error != 'default' :
      if x_fix_compiler_error == 'on' :
        if compiler == 'gcc' :
          if compversion >= 400007 :
            flags += ('-Werror=narrowing', )
            if compversion >= 700001 :
              flags += ('-Werror=literal-suffix', )
        flags += ('-Werror=write-strings', )
      else:
        if compiler != 'gcc' :
          flags += ('-Wno-error=c++11-narrowing', '-Wno-reserved-user-defined-literal', )
    if x_lto != 'default' :
      if x_lto == 'off' :
        flags += ('-fno-lto', )
        linkflags += ('-fno-lto', )
      else:
        if compiler == 'gcc' :
          flags += ('-flto', )
          linkflags += ('-flto', )
          if compversion >= 500000 :
            if x_warnings != 'default' :
              if x_warnings != 'off' :
                flags += ('-flto-odr-type-merging', )
                linkflags += ('-flto-odr-type-merging', )
            if x_lto == 'fat' :
              flags += ('-ffat-lto-objects', )
            else:
              if x_lto == 'thin' :
                linkflags += ('-fuse-linker-plugin', )
        else:
          if compiler == 'clang-cl' :
            linkflags += ('-fuse-ld=lld', )
          if ( ( x_lto == 'thin' or x_lto == 'on' ) and compversion >= 600000 ) :
            flags += ('-flto=thin', )
            linkflags += ('-flto=thin', )
          else:
            flags += ('-flto', )
            linkflags += ('-flto', )
    if x_shadow_warnings != 'default' :
      if x_shadow_warnings == 'off' :
        flags += ('-Wno-shadow', )
        if ( is_clang_like and compversion >= 800000 ) :
          flags += ('-Wno-shadow-field', )
      else:
        if x_shadow_warnings == 'on' :
          flags += ('-Wshadow', )
        else:
          if x_shadow_warnings == 'all' :
            if compiler == 'gcc' :
              flags += ('-Wshadow', )
            else:
              flags += ('-Wshadow-all', )
          else:
            if ( compiler == 'gcc' and compversion >= 700001 ) :
              if x_shadow_warnings == 'local' :
                flags += ('-Wshadow=local', )
              else:
                flags += ('-Wshadow=compatible-local', )
    if x_float_sanitizers != 'default' :
      if ( ( compiler == 'gcc' and compversion >= 500000 ) or ( is_clang_like and compversion >= 500000 ) ) :
        if x_float_sanitizers == 'on' :
          flags += ('-fsanitize=float-divide-by-zero', '-fsanitize=float-cast-overflow', )
        else:
          flags += ('-fno-sanitize=float-divide-by-zero', '-fno-sanitize=float-cast-overflow', )
    if x_integer_sanitizers != 'default' :
      if ( is_clang_like and compversion >= 500000 ) :
        if x_integer_sanitizers == 'on' :
          flags += ('-fsanitize=integer', )
        else:
          flags += ('-fno-sanitize=integer', )
      else:
        if ( compiler == 'gcc' and compversion >= 400009 ) :
          if x_integer_sanitizers == 'on' :
            flags += ('-ftrapv', '-fsanitize=undefined', )
  if x_conversion_warnings != 'default' :
    if ( compiler == 'gcc' or is_clang_like or compiler == 'icc' ) :
      if x_conversion_warnings == 'on' :
        flags += ('-Wconversion', '-Wsign-compare', '-Wsign-conversion', )
      else:
        if x_conversion_warnings == 'conversion' :
          flags += ('-Wconversion', )
        else:
          if x_conversion_warnings == 'float' :
            if compiler == 'gcc' :
              if compversion >= 400009 :
                flags += ('-Wfloat-conversion', )
            else:
              flags += ('-Wfloat-conversion', )
          else:
            if x_conversion_warnings == 'sign' :
              flags += ('-Wsign-compare', '-Wsign-conversion', )
            else:
              if x_conversion_warnings == 'all' :
                flags += ('-Wconversion', )
                if compiler == 'gcc' :
                  flags += ('-Warith-conversion', )
              else:
                flags += ('-Wno-conversion', '-Wno-sign-compare', '-Wno-sign-conversion', )
  if ( compiler == 'gcc' or compiler == 'clang' or compiler == 'clang-emcc' ) :
    if x_stl_hardening != 'default' :
      if x_stl_hardening != 'off' :
        if x_stl_hardening == 'fast' :
          flags += ('-D_GLIBCXX_ASSERTIONS', '-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_FAST', )
        else:
          if x_stl_hardening == 'extensive' :
            flags += ('-D_GLIBCXX_ASSERTIONS', '-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_EXTENSIVE', )
          else:
            if x_stl_hardening == 'debug' :
              flags += ('-D_GLIBCXX_ASSERTIONS', '-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_DEBUG', )
            else:
              flags += ('-D_GLIBCXX_DEBUG', )
              if x_pedantic != 'default' and not ( x_pedantic == 'off' ) :
                flags += ('-D_GLIBCXX_DEBUG_PEDANTIC', )
              if ( is_clang_like and compversion < 1800000 ) :
                if compversion >= 800000 :
                  flags += ('-D_LIBCPP_DEBUG=1', )
              else:
                flags += ('-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_DEBUG', '-D_LIBCPP_ABI_BOUNDED_ITERATORS', '-D_LIBCPP_ABI_BOUNDED_ITERATORS_IN_STRING', '-D_LIBCPP_ABI_BOUNDED_ITERATORS_IN_VECTOR', '-D_LIBCPP_ABI_BOUNDED_UNIQUE_PTR', '-D_LIBCPP_ABI_BOUNDED_ITERATORS_IN_STD_ARRAY', )
    if x_pedantic != 'default' :
      if x_pedantic != 'off' :
        flags += ('-pedantic', )
        if x_pedantic == 'as_error' :
          flags += ('-pedantic-errors', )
    if compiler == 'clang-emcc' :
      if x_optimization != 'default' :
        if x_optimization == '0' :
          flags += ('-O0', )
          linkflags += ('-O0', )
        else:
          if x_optimization == 'g' :
            flags += ('-Og', )
            linkflags += ('-Og', )
          else:
            if x_optimization == '1' :
              flags += ('-O1', )
              linkflags += ('-O1', )
            else:
              if x_optimization == '2' :
                flags += ('-O2', )
                linkflags += ('-O2', )
              else:
                if x_optimization == '3' :
                  flags += ('-O3', )
                  linkflags += ('-O3', )
                else:
                  if x_optimization == 'fast' :
                    flags += ('-O3', '-mnontrapping-fptoint', )
                    linkflags += ('-O3', '-mnontrapping-fptoint', )
                  else:
                    if x_optimization == 'size' :
                      flags += ('-Os', )
                      linkflags += ('-Os', )
                    else:
                      flags += ('-Oz', )
                      linkflags += ('-Oz', )
      if x_debug_level != 'default' :
        if x_debug_level == '0' :
          flags += ('-g0', )
        else:
          if x_debug_level == '1' :
            flags += ('-g1', )
          else:
            if x_debug_level == '2' :
              flags += ('-g2', )
            else:
              if x_debug_level == '3' :
                flags += ('-g3', )
      if x_debug != 'default' :
        if x_debug == 'off' :
          flags += ('-g0', )
        else:
          if x_debug_level == 'default' :
            flags += ('-g', )
    else:
      if ( compiler == 'gcc' and compversion >= 1200000 ) :
        flags += ('-ffold-simple-inlines', )
      if x_coverage != 'default' :
        if x_coverage == 'on' :
          flags += ('--coverage', )
          linkflags += ('--coverage', )
          if compiler == 'clang' :
            linkflags += ('-lprofile_rt', )
      if x_debug_level != 'default' :
        if x_debug_level == '0' :
          flags += ('-g0', )
        else:
          if x_debug_level == '1' :
            if ( x_debug == 'gdb' ) :
              flags += ('-ggdb1', )
            else:
              flags += ('-g1', )
          else:
            if x_debug_level == '2' :
              if ( x_debug == 'gdb' ) :
                flags += ('-ggdb2', )
              else:
                flags += ('-g2', )
            else:
              if x_debug_level == '3' :
                if ( x_debug == 'gdb' ) :
                  flags += ('-ggdb3', )
                else:
                  flags += ('-g3', )
              else:
                if x_debug_level == 'line_tables_only' :
                  if compiler == 'clang' :
                    flags += ('-gline-tables-only', )
                  else:
                    flags += ('-g', )
                else:
                  if x_debug_level == 'line_directives_only' :
                    if compiler == 'clang' :
                      flags += ('-gline-directives-only', )
                    else:
                      flags += ('-g', )
      if x_debug != 'default' :
        if x_debug == 'off' :
          flags += ('-g0', )
        else:
          if x_debug == 'on' :
            if x_debug_level == 'default' :
              flags += ('-g', )
          else:
            if x_debug == 'gdb' :
              if x_debug_level == 'default' :
                flags += ('-ggdb', )
            else:
              if compiler == 'clang' :
                if x_debug == 'lldb' :
                  flags += ('-glldb', )
                else:
                  if x_debug == 'sce' :
                    flags += ('-gsce', )
                  else:
                    if x_debug == 'dbx' :
                      flags += ('-gdbx', )
                    else:
                      flags += ('-g', )
              else:
                if x_debug == 'vms' :
                  flags += ('-gvms', )
      if x_optimization != 'default' :
        if x_optimization == '0' :
          flags += ('-O0', )
        else:
          if x_optimization == 'g' :
            flags += ('-Og', )
          else:
            linkflags += ('-Wl,-O1', )
            if x_optimization == '1' :
              flags += ('-O1', )
            else:
              if x_optimization == '2' :
                flags += ('-O2', )
              else:
                if x_optimization == '3' :
                  flags += ('-O3', )
                else:
                  if x_optimization == 'size' :
                    flags += ('-Os', )
                  else:
                    if x_optimization == 'z' :
                      if ( compiler == 'clang' or ( compiler == 'gcc' and compversion >= 1200000 ) ) :
                        flags += ('-Oz', )
                      else:
                        flags += ('-Os', )
                    else:
                      if compiler == 'clang' :
                        flags += ('-O3', '-ffast-math', )
                      else:
                        flags += ('-Ofast', )
      if x_cpu != 'default' :
        if x_cpu == 'generic' :
          flags += ('-mtune=generic', )
          linkflags += ('-mtune=generic', )
        else:
          flags += ('-march=native', '-mtune=native', )
          linkflags += ('-march=native', '-mtune=native', )
      if x_linker != 'default' :
        if x_linker == 'mold' :
          linkflags += ('-fuse-ld=mold', )
        else:
          if x_linker == 'native' :
            if compiler == 'gcc' :
              linkflags += ('-fuse-ld=gold', )
            else:
              linkflags += ('-fuse-ld=lld', )
          else:
            if x_linker == 'bfd' :
              linkflags += ('-fuse-ld=bfd', )
            else:
              if ( x_linker == 'gold' or ( compiler == 'gcc' and compversion < 900000 ) ) :
                linkflags += ('-fuse-ld=gold', )
              else:
                if x_lto != 'default' :
                  if ( x_lto != 'off' and compiler == 'gcc' ) :
                    linkflags += ('-fuse-ld=gold', )
                  else:
                    linkflags += ('-fuse-ld=lld', )
                else:
                  linkflags += ('-fuse-ld=lld', )
      if x_whole_program != 'default' :
        if x_whole_program == 'off' :
          flags += ('-fno-whole-program', )
          if ( compiler == 'clang' and compversion >= 300009 ) :
            flags += ('-fno-whole-program-vtables', )
            linkflags += ('-fno-whole-program-vtables', )
        else:
          if linker == 'ld64' :
            linkflags += ('-Wl,-dead_strip', '-Wl,-S', )
          else:
            linkflags += ('-s', )
            if x_whole_program == 'strip_all' :
              linkflags += ('-Wl,--gc-sections', '-Wl,--strip-all', )
          if compiler == 'gcc' :
            flags += ('-fwhole-program', )
            linkflags += ('-fwhole-program', )
          else:
            if compiler == 'clang' :
              if compversion >= 300009 :
                if x_lto != 'default' :
                  if x_lto != 'off' :
                    flags += ('-fwhole-program-vtables', )
                    linkflags += ('-fwhole-program-vtables', )
                if compversion >= 700000 :
                  flags += ('-fforce-emit-vtables', )
                  linkflags += ('-fforce-emit-vtables', )
      if x_stack_protector != 'default' :
        if x_stack_protector == 'off' :
          flags += ('-Wno-stack-protector', '-U_FORTIFY_SOURCE', )
          linkflags += ('-Wno-stack-protector', )
        else:
          flags += ('-Wstack-protector', )
          if ( ( compiler == 'gcc' and compversion >= 1200000 ) or ( compiler == 'clang' and compversion >= 1400000 ) ) :
            flags += ('-D_FORTIFY_SOURCE=3', )
          else:
            flags += ('-D_FORTIFY_SOURCE=2', )
          if x_stack_protector == 'strong' :
            if compiler == 'gcc' :
              if compversion >= 400009 :
                flags += ('-fstack-protector-strong', )
                linkflags += ('-fstack-protector-strong', )
                if compversion >= 800000 :
                  flags += ('-fstack-clash-protection', )
                  linkflags += ('-fstack-clash-protection', )
            else:
              flags += ('-fstack-protector-strong', '-fsanitize=safe-stack', )
              linkflags += ('-fstack-protector-strong', '-fsanitize=safe-stack', )
              if compversion >= 1100000 :
                flags += ('-fstack-clash-protection', )
                linkflags += ('-fstack-clash-protection', )
          else:
            if x_stack_protector == 'all' :
              flags += ('-fstack-protector-all', )
              linkflags += ('-fstack-protector-all', )
              if ( compiler == 'gcc' and compversion >= 800000 ) :
                flags += ('-fstack-clash-protection', )
                linkflags += ('-fstack-clash-protection', )
              else:
                flags += ('-fsanitize=safe-stack', )
                linkflags += ('-fsanitize=safe-stack', )
                if compversion >= 1100000 :
                  flags += ('-fstack-clash-protection', )
                  linkflags += ('-fstack-clash-protection', )
            else:
              flags += ('-fstack-protector', )
              linkflags += ('-fstack-protector', )
          if compiler == 'clang' :
            flags += ('-fsanitize=shadow-call-stack', )
            linkflags += ('-fsanitize=shadow-call-stack', )
      if x_relro != 'default' :
        if x_relro == 'off' :
          linkflags += ('-Wl,-z,norelro', )
        else:
          if x_relro == 'on' :
            linkflags += ('-Wl,-z,relro', )
          else:
            linkflags += ('-Wl,-z,relro,-z,now,-z,noexecstack', )
            if x_linker != 'default' :
              if not ( ( x_linker == 'gold' or ( compiler == 'gcc' and compversion < 900000 ) or ( x_linker == 'native' and compiler == 'gcc' ) ) ) :
                linkflags += ('-Wl,-z,separate-code', )
      if x_pie != 'default' :
        if x_pie == 'off' :
          linkflags += ('-no-pic', )
        else:
          if x_pie == 'on' :
            linkflags += ('-pie', )
          else:
            if x_pie == 'fpie' :
              flags += ('-fpie', )
            else:
              if x_pie == 'fpic' :
                flags += ('-fpic', )
              else:
                if x_pie == 'fPIE' :
                  flags += ('-fPIE', )
                else:
                  if x_pie == 'fPIC' :
                    flags += ('-fPIC', )
                  else:
                    linkflags += ('-static-pie', )
      if x_other_sanitizers != 'default' :
        if x_other_sanitizers == 'thread' :
          flags += ('-fsanitize=thread', )
        else:
          if x_other_sanitizers == 'memory' :
            if ( compiler == 'clang' and compversion >= 500000 ) :
              flags += ('-fsanitize=memory', '-fno-omit-frame-pointer', )
          else:
            if x_other_sanitizers == 'pointer' :
              if ( compiler == 'gcc' and compversion >= 800000 ) :
                flags += ('-fsanitize=pointer-compare', '-fsanitize=pointer-subtract', )
      if x_noexcept_warnings != 'default' :
        if ( compiler == 'gcc' and compversion >= 400009 ) :
          if x_noexcept_warnings == 'on' :
            flags += ('-Wnoexcept', )
          else:
            flags += ('-Wno-noexcept', )
      if x_analyzer != 'default' :
        if ( compiler == 'gcc' and compversion >= 1000000 ) :
          if x_analyzer == 'off' :
            flags += ('-fno-analyzer', )
          else:
            flags += ('-fanalyzer', )
            if x_analyzer_too_complex_warning != 'default' :
              if x_analyzer_too_complex_warning == 'on' :
                flags += ('-Wanalyzer-too-complex', )
              else:
                flags += ('-Wno-analyzer-too-complex', )
            if x_analyzer_verbosity != 'default' :
              if x_analyzer_verbosity == '0' :
                flags += ('-fanalyzer-verbosity=0', )
              else:
                if x_analyzer_verbosity == '1' :
                  flags += ('-fanalyzer-verbosity=1', )
                else:
                  if x_analyzer_verbosity == '2' :
                    flags += ('-fanalyzer-verbosity=2', )
                  else:
                    flags += ('-fanalyzer-verbosity=3', )
  if linker == 'lld-link' :
    if x_lto != 'default' :
      if x_lto == 'off' :
        flags += ('-fno-lto', )
      else:
        if ( x_lto == 'thin' or x_lto == 'on' ) :
          flags += ('-flto=thin', )
        else:
          flags += ('-flto', )
          linkflags += ('-flto', )
    if x_whole_program != 'default' :
      if x_whole_program == 'off' :
        flags += ('-fno-whole-program', )
      else:
        if x_lto != 'default' :
          if x_lto != 'off' :
            flags += ('-fwhole-program-vtables', )
            linkflags += ('-fwhole-program-vtables', )
  if ( compiler == 'msvc' or compiler == 'clang-cl' or compiler == 'icl' ) :
    if x_exceptions != 'default' :
      if x_exceptions == 'on' :
        flags += ('/EHsc', '/D_HAS_EXCEPTIONS=1', )
      else:
        flags += ('/EHs-', '/D_HAS_EXCEPTIONS=0', )
    if x_rtti != 'default' :
      if x_rtti == 'on' :
        flags += ('/GR', )
      else:
        flags += ('/GR-', )
    if x_stl_hardening != 'default' :
      if x_stl_hardening == 'off' :
        flags += ('/D_MSVC_STL_HARDENING=0', '/D_MSVC_STL_DESTRUCTOR_TOMBSTONES=0', '/D_ITERATOR_DEBUG_LEVEL=0', '/D_HAS_ITERATOR_DEBUGGING=0', '/D_SECURE_SCL=0', )
      else:
        if ( x_stl_hardening == 'fast' or x_stl_hardening == 'extensive' ) :
          flags += ('/D_MSVC_STL_HARDENING=1', )
        else:
          if x_stl_hardening == 'debug' :
            flags += ('/D_MSVC_STL_HARDENING=1', '/D_MSVC_STL_DESTRUCTOR_TOMBSTONES=1', )
          else:
            flags += ('/D_DEBUG', '/D_MSVC_STL_HARDENING=1', '/D_MSVC_STL_DESTRUCTOR_TOMBSTONES=1', )
    if x_stl_fix != 'default' :
      if x_stl_fix == 'on' :
        flags += ('/DNOMINMAX', )
    if compiler != 'icl' :
      if x_debug_level != 'default' :
        if x_debug_level == 'line_tables_only' :
          if compiler == 'clang-cl' :
            flags += ('-gline-tables-only', )
          flags += ('/DEBUG:FASTLINK', )
        if x_debug_level == 'line_directives_only' :
          if compiler == 'clang-cl' :
            flags += ('-gline-directives-only', )
      if x_debug != 'default' :
        if x_debug == 'off' :
          linkflags += ('/DEBUG:NONE', )
        else:
          flags += ('/RTC1', '/Od', )
          if x_debug == 'on' :
            flags += ('/DEBUG', )
          if x_optimization != 'default' :
            if x_optimization == 'g' :
              flags += ('/Zi', )
            else:
              if x_whole_program != 'default' :
                if x_whole_program == 'off' :
                  flags += ('/ZI', )
                else:
                  flags += ('/Zi', )
              else:
                flags += ('/ZI', )
          else:
            if x_whole_program != 'default' :
              if x_whole_program == 'off' :
                flags += ('/ZI', )
              else:
                flags += ('/Zi', )
            else:
              flags += ('/ZI', )
      if x_optimization != 'default' :
        if x_optimization == '0' :
          flags += ('/Ob0', '/Od', '/Oi-', '/Oy-', )
        else:
          if x_optimization == 'g' :
            flags += ('/Ob1', )
          else:
            if x_optimization == '1' :
              flags += ('/O1', )
            else:
              if x_optimization == '2' :
                flags += ('/O2', )
              else:
                if x_optimization == '3' :
                  flags += ('/O2', )
                else:
                  if ( x_optimization == 'size' or x_optimization == 'z' ) :
                    flags += ('/O1', '/GL', '/Gw', )
                  else:
                    flags += ('/O2', '/fp:fast', )
      if x_linker != 'default' :
        if compiler == 'clang-cl' :
          if ( x_linker == 'lld' or x_linker == 'native' ) :
            linkflags += ('-fuse-ld=lld', )
          else:
            if x_linker == 'mold' :
              linkflags += ('-fuse-ld=mold', )
      if x_control_flow != 'default' :
        if x_control_flow == 'off' :
          flags += ('/guard:cf-', )
        else:
          flags += ('/guard:cf', )
      if x_whole_program != 'default' :
        if x_whole_program == 'off' :
          flags += ('/GL-', )
        else:
          flags += ('/GL', '/Gw', )
          linkflags += ('/LTCG', )
          if x_whole_program == 'strip_all' :
            linkflags += ('/OPT:REF', )
      if x_pedantic != 'default' :
        if x_pedantic != 'off' :
          flags += ('/permissive-', '/Zc:__cplusplus', )
          if compiler == 'msvc' :
            if x_pedantic == 'as_error' :
              flags += ('/we4608', '/we4928', )
              if compversion >= 1900031 :
                flags += ('/we5254', )
                if compversion >= 1900038 :
                  flags += ('/we5110', )
            else:
              flags += ('/w14608', '/w14928', )
              if compversion >= 1900031 :
                flags += ('/w15254', )
                if compversion >= 1900038 :
                  flags += ('/w15110', )
            if x_msvc_isystem != 'default' :
              flags += ('/we4471', '/we5052', )
            else:
              flags += ('/w14471', )
      if x_stack_protector != 'default' :
        if x_stack_protector == 'off' :
          flags += ('/GS-', )
        else:
          flags += ('/GS', '/sdl', )
          if x_stack_protector == 'strong' :
            flags += ('/RTC1', )
            if ( compiler == 'msvc' and compversion >= 1600007 ) :
              flags += ('/guard:ehcont', )
              linkflags += ('/CETCOMPAT', )
          else:
            if x_stack_protector == 'all' :
              flags += ('/RTC1', '/RTCc', )
          if x_control_flow != 'default' and not ( x_control_flow == 'off' ) :
            flags += ('/guard:cf', )
  if compiler == 'msvc' :
    if x_analyzer != 'default' :
      if compversion >= 1500000 :
        if x_analyzer == 'off' :
          flags += ('/analyze-', )
        else:
          flags += ('/analyze', )
    if x_windows_bigobj != 'default' :
      flags += ('/bigobj', )
    if x_msvc_conformance != 'default' :
      if ( x_msvc_conformance == 'all' or x_msvc_conformance == 'all_without_throwing_new' ) :
        flags += ('/Zc:inline', '/Zc:referenceBinding', )
        if x_msvc_conformance == 'all' :
          flags += ('/Zc:throwingNew', )
        if compversion >= 1500006 :
          flags += ('/Zc:externConstexpr', )
          if compversion >= 1600005 :
            flags += ('/Zc:preprocessor', )
            if compversion >= 1600008 :
              flags += ('/Zc:lambda', )
              if compversion >= 1700004 :
                flags += ('/Zc:enumTypes', )
                if compversion >= 1700005 :
                  flags += ('/Zc:templateScope', )
    if x_msvc_crt_secure_no_warnings != 'default' :
      if x_msvc_crt_secure_no_warnings == 'on' :
        flags += ('/D_CRT_SECURE_NO_WARNINGS=1', )
      else:
        if x_msvc_crt_secure_no_warnings == 'off' :
          flags += ('/U_CRT_SECURE_NO_WARNINGS', )
    if x_msvc_diagnostics_format != 'default' :
      if compversion >= 1700000 :
        if x_msvc_diagnostics_format == 'classic' :
          flags += ('/diagnostics:classic', )
        else:
          if x_msvc_diagnostics_format == 'column' :
            flags += ('/diagnostics:column', )
          else:
            flags += ('/diagnostics:caret', )
    if compversion < 1500016 :
      x_msvc_isystem = 'default'
    if x_msvc_isystem != 'default' :
      if x_msvc_isystem == 'external_as_include_system_flag' :
        if compversion < 1600010 :
          # unimplementable
          pass
        else:
          # unimplementable
          pass
      else:
        if x_msvc_isystem != 'assumed' :
          if compversion < 1600010 :
            flags += ('/experimental:external', )
          flags += ('/external:W0', )
          if x_msvc_isystem == 'anglebrackets' :
            flags += ('/external:anglebrackets', )
          else:
            flags += ('/external:env:INCLUDE', '/external:env:CAExcludePath', )
      if x_msvc_isystem_with_template_from_non_external != 'default' :
        if x_msvc_isystem_with_template_from_non_external == 'off' :
          flags += ('/external:template', )
        else:
          flags += ('/external:template-', )
    if x_warnings != 'default' :
      if x_warnings == 'off' :
        flags += ('/W0', )
      else:
        if x_warnings == 'essential' :
          flags += ('/W4', '/wd4711', )
        else:
          if x_warnings == 'on' :
            flags += ('/W4', '/wd4711', '/w14265', '/w14296', '/w14444', '/w14545', '/w14546', '/w14547', '/w14548', '/w14549', '/w14555', '/w14557', '/w14608', '/w14692', '/w14822', '/w14905', '/w14906', '/w14917', '/w14928', '/w14596', )
            if compversion >= 1500003 :
              if x_msvc_isystem == 'default' :
                flags += ('/w14263', '/w14264', )
              flags += ('/w15038', )
              if compversion >= 1600010 :
                flags += ('/w15233', '/w15240', )
                if compversion >= 1700004 :
                  flags += ('/w15263', )
                  if x_msvc_isystem == 'default' :
                    flags += ('/w15262', )
                  if compversion >= 1900000 :
                    flags += ('/w14426', )
                    if x_msvc_isystem == 'default' :
                      flags += ('/w14654', )
                    flags += ('/w15031', '/w15032', )
                    if compversion >= 1900015 :
                      flags += ('/w14643', )
                      if compversion >= 1900022 :
                        flags += ('/w14855', )
                        if compversion >= 1900025 :
                          if x_msvc_isystem == 'default' :
                            flags += ('/w15204', )
                          if compversion >= 1900029 :
                            flags += ('/w15233', )
                            if compversion >= 1900030 :
                              if x_msvc_isystem == 'default' :
                                flags += ('/w15246', )
                              flags += ('/w15249', )
                              if compversion >= 1900032 :
                                flags += ('/w15258', )
                                if compversion >= 1900037 :
                                  flags += ('/w15267', )
          else:
            flags += ('/Wall', '/wd4342', '/wd4350', '/wd4355', '/wd4370', '/wd4371', '/wd4514', '/wd4571', '/wd4577', '/wd4582', '/wd4583', '/wd4587', '/wd4588', '/wd4686', '/wd4710', '/wd4711', '/wd4820', '/wd4866', '/wd4868', '/wd5024', '/wd5025', '/wd5026', '/wd5027', '/wd5243', )
            if x_msvc_isystem == 'default' :
              flags += ('/wd4464', '/wd4548', '/wd4623', '/wd4625', '/wd4626', '/wd4668', '/wd5204', )
              if compversion >= 1500000 :
                flags += ('/wd4582', '/wd4583', )
                if compversion >= 1700004 :
                  flags += ('/wd5262', )
                  if compversion >= 1900000 :
                    flags += ('/wd4774', )
            if compversion >= 1600000 :
              flags += ('/wd4800', )
              if compversion >= 1900039 :
                flags += ('/wd4975', )
                if compversion >= 1900040 :
                  flags += ('/wd4860', '/wd4861', '/wd5273', '/wd5274', )
                  if compversion >= 1900041 :
                    flags += ('/wd5306', )
                    if compversion >= 1900043 :
                      flags += ('/wd5277', )
    if x_conversion_warnings != 'default' :
      if ( x_conversion_warnings == 'off' or x_conversion_warnings == 'sign' ) :
        flags += ('/wd4244', '/wd4245', '/wd4365', )
      else:
        flags += ('/w14244', '/w14245', '/w14365', )
      if ( x_conversion_warnings == 'on' or x_conversion_warnings == 'all' or x_conversion_warnings == 'sign' ) :
        flags += ('/w14018', '/w14388', '/w14289', )
      else:
        flags += ('/wd4018', '/wd4388', '/wd4289', )
    if x_switch_warnings != 'default' :
      if ( x_switch_warnings == 'on' or x_switch_warnings == 'mandatory_default' ) :
        flags += ('/wd4061', '/w14062', )
      else:
        if ( x_switch_warnings == 'exhaustive_enum' or x_switch_warnings == 'exhaustive_enum_and_mandatory_default' ) :
          flags += ('/w14061', '/w14062', )
        else:
          flags += ('/wd4061', '/wd4062', )
    if x_shadow_warnings != 'default' :
      if compversion >= 1900000 :
        if x_shadow_warnings == 'off' :
          flags += ('/wd4456', '/wd4459', )
        else:
          if ( x_shadow_warnings == 'on' or x_shadow_warnings == 'all' ) :
            flags += ('/w14456', '/w14459', )
          else:
            if x_shadow_warnings == 'local' :
              flags += ('/w4456', '/wd4459', )
    if x_suggestions != 'default' :
      if x_suggestions == 'off' :
        flags += ('/wd5239', )
      else:
        flags += ('/w15239', )
    if x_warnings_as_error != 'default' :
      if x_warnings_as_error == 'on' :
        flags += ('/WX', )
      else:
        if x_warnings_as_error == 'off' :
          flags += ('/WX-', )
        else:
          flags += ('/we4455', '/we4150', '/we4716', '/we2124', )
    if x_lto != 'default' :
      if x_lto == 'off' :
        flags += ('/LTCG:OFF', )
      else:
        flags += ('/GL', )
        linkflags += ('/LTCG', )
    if x_sanitizers != 'default' :
      if compversion >= 1600009 :
        flags += ('/fsanitize=address', '/fsanitize-address-use-after-return', )
      else:
        if x_sanitizers == 'on' :
          flags += ('/sdl', )
        else:
          if x_stack_protector != 'default' :
            if x_stack_protector != 'off' :
              flags += ('/sdl-', )
  else:
    if compiler == 'icl' :
      if x_warnings != 'default' :
        if x_warnings == 'off' :
          flags += ('/w', )
        else:
          flags += ('/W2', '/Qdiag-disable:1418,2259', )
      if x_warnings_as_error != 'default' :
        if x_warnings_as_error == 'on' :
          flags += ('/WX', )
        else:
          if x_warnings_as_error == 'basic' :
            flags += ('/Qdiag-error:1079,39,109', )
      if x_windows_bigobj != 'default' :
        flags += ('/bigobj', )
      if x_msvc_conformance != 'default' :
        if ( x_msvc_conformance == 'all' or x_msvc_conformance == 'all_without_throwing_new' ) :
          flags += ('/Zc:inline', '/Zc:strictStrings', )
          if x_msvc_conformance == 'all' :
            flags += ('/Zc:throwingNew', )
      if x_debug_level != 'default' :
        if ( x_debug_level == 'line_tables_only' or x_debug_level == 'line_directives_only' ) :
          flags += ('/debug:minimal', )
      if x_debug != 'default' :
        if x_debug == 'off' :
          linkflags += ('/DEBUG:NONE', )
        else:
          flags += ('/RTC1', '/Od', )
          if x_debug == 'on' :
            flags += ('/debug:full', )
          if ( x_optimization == 'g' ) :
            flags += ('/Zi', )
          else:
            if x_whole_program != 'default' :
              if x_whole_program == 'off' :
                flags += ('/ZI', )
              else:
                flags += ('/Zi', )
            else:
              flags += ('/ZI', )
      if x_optimization != 'default' :
        if x_optimization == '0' :
          flags += ('/Ob0', '/Od', '/Oi-', '/Oy-', )
        else:
          if x_optimization == 'g' :
            flags += ('/Ob1', )
          else:
            flags += ('/GF', )
            if x_optimization == '1' :
              flags += ('/O1', )
            else:
              if x_optimization == '2' :
                flags += ('/O2', )
              else:
                if x_optimization == '3' :
                  flags += ('/O2', )
                else:
                  if x_optimization == 'z' :
                    flags += ('/O3', )
                  else:
                    if x_optimization == 'size' :
                      flags += ('/Os', )
                    else:
                      flags += ('/fast', )
      if x_stack_protector != 'default' :
        if x_stack_protector == 'off' :
          flags += ('/GS-', )
        else:
          flags += ('/GS', )
          if x_stack_protector == 'strong' :
            flags += ('/RTC1', )
          else:
            if x_stack_protector == 'all' :
              flags += ('/RTC1', '/RTCc', )
      if x_sanitizers != 'default' :
        if x_sanitizers == 'on' :
          flags += ('/Qtrapuv', )
      if x_float_sanitizers != 'default' :
        if x_float_sanitizers == 'on' :
          flags += ('/Qfp-stack-check', '/Qfp-trap:common', )
      if x_control_flow != 'default' :
        if x_control_flow == 'off' :
          flags += ('/guard:cf-', '/mconditional-branch=keep', )
        else:
          flags += ('/guard:cf', )
          if x_control_flow == 'branch' :
            flags += ('/mconditional-branch:all-fix', '/Qcf-protection:branch', )
          else:
            if x_control_flow == 'on' :
              flags += ('/mconditional-branch:all-fix', '/Qcf-protection:full', )
      if x_cpu != 'default' :
        if x_cpu == 'generic' :
          flags += ('/Qtune:generic', )
          linkflags += ('/Qtune:generic', )
        else:
          flags += ('/QxHost', )
          linkflags += ('/QxHost', )
    else:
      if compiler == 'icc' :
        if x_warnings != 'default' :
          if x_warnings == 'off' :
            flags += ('-w', )
          else:
            if x_warnings == 'essential' :
              flags += ('-Wall', )
            else:
              flags += ('-Wall', '-Warray-bounds', '-Wcast-qual', '-Wchar-subscripts', '-Wdisabled-optimization', '-Wenum-compare', '-Wextra', '-Wfloat-equal', '-Wformat-security', '-Wformat=2', '-Winit-self', '-Winvalid-pch', '-Wmaybe-uninitialized', '-Wmissing-include-dirs', '-Wnarrowing', '-Wnonnull', '-Wpointer-sign', '-Wreorder', '-Wsequence-point', '-Wtrigraphs', '-Wundef', '-Wunused-function', '-Wunused-but-set-variable', '-Wunused-variable', '-Wpointer-arith', '-Wdeprecated', '-Wnon-virtual-dtor', '-Woverloaded-virtual', )
        if x_switch_warnings != 'default' :
          if ( x_switch_warnings == 'on' or x_switch_warnings == 'exhaustive_enum' ) :
            flags += ('-Wswitch-enum', )
          else:
            if x_switch_warnings == 'mandatory_default' :
              flags += ('-Wswitch-default', )
            else:
              if x_switch_warnings == 'exhaustive_enum_and_mandatory_default' :
                flags += ('-Wswitch', )
              else:
                flags += ('-Wno-switch', )
        if x_warnings_as_error != 'default' :
          if x_warnings_as_error == 'on' :
            flags += ('-Werror', )
          else:
            if x_warnings_as_error == 'basic' :
              flags += ('-diag-error=1079,39,109', )
        if x_pedantic != 'default' :
          if x_pedantic == 'off' :
            flags += ('-fgnu-keywords', )
          else:
            flags += ('-fno-gnu-keywords', )
        if x_shadow_warnings != 'default' :
          if x_shadow_warnings == 'off' :
            flags += ('-Wno-shadow', )
          else:
            if ( x_shadow_warnings == 'on' or x_shadow_warnings == 'all' ) :
              flags += ('-Wshadow', )
        if x_stl_hardening != 'default' :
          if x_stl_hardening == 'debug_with_broken_abi' :
            flags += ('-D_GLIBCXX_DEBUG', )
            if x_pedantic != 'default' and not ( x_pedantic == 'off' ) :
              flags += ('-D_GLIBCXX_DEBUG_PEDANTIC', )
          else:
            if x_stl_hardening != 'off' :
              flags += ('-D_GLIBCXX_ASSERTIONS', )
        if x_debug != 'default' :
          if x_debug == 'off' :
            flags += ('-g0', )
          else:
            flags += ('-g', )
        if x_optimization != 'default' :
          if x_optimization == '0' :
            flags += ('-O0', )
          else:
            if x_optimization == 'g' :
              flags += ('-O1', )
            else:
              if x_optimization == '1' :
                flags += ('-O1', )
              else:
                if x_optimization == '2' :
                  flags += ('-O2', )
                else:
                  if x_optimization == '3' :
                    flags += ('-O3', )
                  else:
                    if x_optimization == 'z' :
                      flags += ('-fast', )
                    else:
                      if x_optimization == 'size' :
                        flags += ('-Os', )
                      else:
                        flags += ('-Ofast', )
        if x_stack_protector != 'default' :
          if x_stack_protector == 'off' :
            flags += ('-fno-protector-strong', '-U_FORTIFY_SOURCE', )
            linkflags += ('-fno-protector-strong', )
          else:
            flags += ('-D_FORTIFY_SOURCE=2', )
            if x_stack_protector == 'strong' :
              flags += ('-fstack-protector-strong', )
              linkflags += ('-fstack-protector-strong', )
            else:
              if x_stack_protector == 'all' :
                flags += ('-fstack-protector-all', )
                linkflags += ('-fstack-protector-all', )
              else:
                flags += ('-fstack-protector', )
                linkflags += ('-fstack-protector', )
        if x_relro != 'default' :
          if x_relro == 'off' :
            linkflags += ('-Xlinker-znorelro', )
          else:
            if x_relro == 'on' :
              linkflags += ('-Xlinker-zrelro', )
            else:
              linkflags += ('-Xlinker-zrelro', '-Xlinker-znow', '-Xlinker-znoexecstack', )
        if x_pie != 'default' :
          if x_pie == 'off' :
            linkflags += ('-no-pic', )
          else:
            if x_pie == 'on' :
              linkflags += ('-pie', )
            else:
              if x_pie == 'fpie' :
                flags += ('-fpie', )
              else:
                if x_pie == 'fpic' :
                  flags += ('-fpic', )
                else:
                  if x_pie == 'fPIE' :
                    flags += ('-fPIE', )
                  else:
                    if x_pie == 'fPIC' :
                      flags += ('-fPIC', )
        if x_sanitizers != 'default' :
          if x_sanitizers == 'on' :
            flags += ('-ftrapuv', )
        if x_integer_sanitizers != 'default' :
          if x_integer_sanitizers == 'on' :
            flags += ('-funsigned-bitfields', )
          else:
            flags += ('-fno-unsigned-bitfields', )
        if x_float_sanitizers != 'default' :
          if x_float_sanitizers == 'on' :
            flags += ('-fp-stack-check', '-fp-trap=common', )
        if x_linker != 'default' :
          if x_linker == 'bfd' :
            linkflags += ('-fuse-ld=bfd', )
          else:
            if x_linker == 'gold' :
              linkflags += ('-fuse-ld=gold', )
            else:
              if x_linker == 'mold' :
                linkflags += ('-fuse-ld=mold', )
              else:
                linkflags += ('-fuse-ld=lld', )
        if x_lto != 'default' :
          if x_lto == 'off' :
            flags += ('-no-ipo', )
            linkflags += ('-no-ipo', )
          else:
            flags += ('-ipo', )
            linkflags += ('-ipo', )
            if x_lto == 'fat' :
              if platform == 'linux' :
                flags += ('-ffat-lto-objects', )
                linkflags += ('-ffat-lto-objects', )
        if x_control_flow != 'default' :
          if x_control_flow == 'off' :
            flags += ('-mconditional-branch=keep', '-fcf-protection=none', )
          else:
            if x_control_flow == 'branch' :
              flags += ('-mconditional-branch=all-fix', '-fcf-protection=branch', )
            else:
              if x_control_flow == 'on' :
                flags += ('-mconditional-branch=all-fix', '-fcf-protection=full', )
        if x_exceptions != 'default' :
          if x_exceptions == 'on' :
            flags += ('-fexceptions', )
          else:
            flags += ('-fno-exceptions', )
        if x_rtti != 'default' :
          if x_rtti == 'on' :
            flags += ('-frtti', )
          else:
            flags += ('-fno-rtti', )
        if x_cpu != 'default' :
          if x_cpu == 'generic' :
            flags += ('-mtune=generic', )
            linkflags += ('-mtune=generic', )
          else:
            flags += ('-xHost', )
            linkflags += ('-xHost', )
      else:
        if platform == 'mingw' :
          if x_windows_bigobj != 'default' :
            flags += ('-Wa,-mbig-obj', )
  return {"flags": flags, "linkflags": linkflags}
