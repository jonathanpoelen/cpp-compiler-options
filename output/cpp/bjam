# File generated with https://github.com/jonathanpoelen/cpp-compiler-options

# jam reference: https://www.boost.org/build/doc/html/index.html

import feature : feature ;
import modules ;
import numbers ;
import os ;
import property-set ;
import string ;

JLN_BJAM_YEAR_VERSION = [ modules.peek : JAMVERSION ] ;

# Enables an static analysis. It can have false positives and false negatives. It is a bug-finding tool, rather than a tool for proving program correctness. Available only with GCC and MSVC.
feature <jln-analyzer> : _ default off on with-external-headers : propagated ;
# By default, the analysis silently stops if the code is too complicated for the analyzer to fully explore and it reaches an internal limit. This option warns if this occurs. Available only with GCC.
feature <jln-analyzer-too-complex-warning> : _ default off on : propagated ;
# Controls the complexity of the control flow paths that are emitted for analyzer diagnostics. Available only with GCC.
#  - 0: At this level, interprocedural call and return events are displayed, along with the most pertinent state-change events relating to a diagnostic. For example, for a double-free diagnostic, both calls to free will be shown.
#  - 1: As per the previous level, but also show events for the entry to each function.
#  - 2: As per the previous level, but also show events relating to control flow that are significant to triggering the issue (e.g. “true path taken” at a conditional). This level is the default.
#  - 3: As per the previous level, but show all control flow events, not just significant ones.
feature <jln-analyzer-verbosity> : _ default 0 1 2 3 : propagated ;
feature <jln-color> : _ default auto never always : propagated ;
# Insert extra runtime security checks to detect attempts to compromise your code.
feature <jln-control-flow> : _ default off on branch return allow-bugs : incidental ;
# Warn for implicit conversions that may alter a value.
#  - on: Combine conversion and sign value
#  - sign: Warn for implicit conversions that may change the sign (lke `unsigned_integer = signed_integer`) or a comparison between signed and unsigned values could produce an incorrect result when the signed value is converted to unsigned.
#  - float: Warn for implicit conversions that reduce the precision of a real value.
#  - conversion: Warn for implicit conversions that may alter a value.
#  - all: Like conversion and also warn about implicit conversions from arithmetic operations even when conversion of the operands to the same type cannot change their values.
feature <jln-conversion-warnings> : _ on default off sign float conversion all : propagated ;
feature <jln-coverage> : _ default off on : incidental ;
# Warning for default label in switch which covers all enumeration values.
feature <jln-covered-switch-default-warnings> : _ on default off : propagated ;
feature <jln-cpu> : _ default generic native : incidental ;
# Emit fix-it hints in a machine-parseable format.
feature <jln-diagnostics-format> : _ default fixits patch print-source-range-info : propagated ;
# Configures how templates with incompatible types are displayed (Clang and GCC only).
#  - tree: Enables printing a tree-like structure showing the common and differing parts of the types
#  - without_elided_types: Disables printing diagnostics showing common parts of template types as "[...]".
#  - tree_without_elided_types: Prints a tree-like without replacing common types. Mergeing tree and without_elided_types.
feature <jln-diagnostics-show-template> : _ default tree without-elided-types tree-without-elided-types : propagated ;
# Enable C++ exceptions.
feature <jln-exceptions> : _ default off on : incidental ;
# Configure linker.
feature <jln-linker> : _ default bfd gold lld mold native : propagated ;
# Enable Link Time Optimization. Also known as interprocedural optimization (IPO).
#  - on: Activates ThinLTO when available (Clang), otherwise FullLTO.
#  - full: Activates FullLTO.
#  - thin_or_nothing: Activates ThinLTO. Disable lto when not supported.
#  - whole_program: Assume that the current compilation unit represents the whole program being compiled. This option should not be used to compile a library. When not supported by the compiler, ThinLTO or FullLTO are used.
#  - whole_program_and_full_lto: Same as whole_program, but use FullLTO when not supported.
feature <jln-lto> : _ default off on full thin-or-nothing whole-program whole-program-and-full-lto : incidental ;
# Disable CRT warnings with MSVC.
feature <jln-msvc-crt-secure-no-warnings> : _ on default off : propagated ;
# Controls the display of error and warning information (https://learn.microsoft.com/en-us/cpp/build/reference/diagnostics-compiler-diagnostic-options?view=msvc-170).
#  - classic: Which reports only the line number where the issue was found.
#  - column: Includes the column where the issue was found. This can help you identify the specific language construct or character that is causing the issue.
#  - caret: Includes the column where the issue was found and places a caret (^) under the location in the line of code where the issue was detected.
feature <jln-msvc-diagnostics-format> : _ caret default classic column : propagated ;
# Warnings concerning external header (https://devblogs.microsoft.com/cppblog/broken-warnings-theory).
feature <jln-msvc-isystem> : _ default anglebrackets include-and-caexcludepath assumed : propagated ;
# Allows warnings from external headers when they occur in a template that's instantiated in your code. (requires msvc_isystem).
feature <jln-msvc-isystem-with-template-instantiations-treated-as-non-external> : _ default off on : propagated ;
# Enable NDEBUG macro (disable assert macro).
feature <jln-ndebug> : _ with-optimization-1-or-above default off on : incidental ;
# Warn when a noexcept-expression evaluates to false because of a call to a function that does not have a non-throwing exception specification (i.e. "throw()" or "noexcept") but is known by the compiler to never throw an exception. Only with GCC.
feature <jln-noexcept-warnings> : _ default off on : propagated ;
# Optimization level.
#  - 0: Not optimize.
#  - g: Enable debugging experience.
#  - 1: Optimize.
#  - 2: Optimize even more.
#  - 3: Optimize yet more.
#  - fast: Enables all optimization=3 and disregard strict standards compliance.
#  - size: Optimize for size.
#  - z: Optimize for size aggressively (/!\ possible slow compilation with emcc).
feature <jln-optimization> : _ default 0 g 1 2 3 fast size z : incidental ;
# Activate warnings about optimization.
feature <jln-optimization-warnings> : _ default off on : propagated ;
# Issue all the warnings demanded by strict ISO C and ISO C++.
feature <jln-pedantic> : _ on default off as-error : incidental ;
# Controls position-independent code generation.
feature <jln-pie> : _ default off on static fpic fPIC fpie fPIE : incidental ;
# Specifies a memory segment that should be made read-only after relocation, if supported.
feature <jln-relro> : _ default off on full : incidental ;
# Warn when macros "__TIME__", "__DATE__" or "__TIMESTAMP__" are encountered as they might prevent bit-wise-identical reproducible compilations.
feature <jln-reproducible-build-warnings> : _ default off on : propagated ;
# Disable generation of information about every class with virtual functions for use by the C++ run-time type identification features ("dynamic_cast" and "typeid").
feature <jln-rtti> : _ default off on : incidental ;
# Enable sanitizers (asan, ubsan, etc) when available.
#  - on: Enable address sanitizer and other compatible sanitizers
#  - extra: Enable address sanitizer and other compatible sanitizers, even those who require a config via environment variable.
#  - address: Enable address sanitizer only.
#  - kernel: Enable kernel-address sanitizers and other compatible sanitizers
#  - kernel_extra: Enable kernel-address sanitizers and other compatible sanitizers, even those who require a config via environment variable.
#  - kernel_address: Enable kernel address sanitizer only.
#  - thread: Enable thread sanitizer.
#  - undefined: Enable undefined sanitizer.
#  - undefined_minimal_runtime: Enable undefined sanitizer with minimal UBSan runtime when available (Clang>=6).
#  - scudo_hardened_allocator: Enable Scudo Hardened Allocator with Clang. See https://llvm.org/docs/ScudoHardenedAllocator.html
feature <jln-sanitizers> : _ default off on extra address kernel kernel-extra kernel-extra kernel-address thread undefined undefined-minimal-runtime scudo-hardened-allocator : incidental ;
feature <jln-shadow-warnings> : _ off default on local compatible-local all : propagated ;
# Emit extra code to check for buffer overflows, such as stack smashing attacks.
feature <jln-stack-protector> : _ default off on strong all : incidental ;
# Enable /DNOMINMAX with msvc.
feature <jln-stl-fix> : _ on default off : incidental ;
# Hardening allows turning some instances of undefined behavior in the standard library into a contract violation.
#  - fast: A set of security-critical checks that can be done with relatively little overhead in constant time and are intended to be used in production. No impact on the ABI.
#  - extensive: All the checks from fast mode and some additional checks for undefined behavior that incur relatively little overhead but aren’t security-critical. No impact on the ABI.
#  - debug: Enables all the available checks, including heuristic checks that might have significant performance overhead as well as internal library assertions. No impact on the ABI.
#  - debug_with_broken_abi: Debug mode with ABI incompatibility for more check.
feature <jln-stl-hardening> : _ default off fast extensive debug debug-with-broken-abi : incidental ;
# Warn for cases where adding an attribute may be beneficial. With GCC, this  analysis requires option -fipa-pure-const, which is enabled by default at -O1 and higher.
#  - on: Suggests noreturn attribute with Clang and GCC.
#  - common: Suggests noreturn and format attributes with GCC ; noreturn with Clang.
#  - analysis: Suggests noreturn, format attributes, malloc and returns_nonnull attributes with GCC ; noreturn with Clang.
#  - unity: Suggests noreturn, format attributes and final on types and methods ; noreturn with Clang.
#  - all: Active all suggestions for attributes.
feature <jln-suggest-attributes> : _ on default off common analysis unity all : propagated ;
# Warnings concerning the switch keyword.
feature <jln-switch-warnings> : _ on default off exhaustive-enum mandatory-default exhaustive-enum-and-mandatory-default : propagated ;
# Produce debugging information in the operating system's.
#  - hidden: Use -fvisibility=hidden with Clang, GCC and other compilers that support this flag.
#  - strip_all: Strip all symbols.
#  - gc_sections: Enable garbage collection of unused sections.
#  - nodebug: Request no debugging information.
#  - debug: Request debugging information. How much information can be controlled with options 'minimal_debug', and 'full_debug'. If the level is not supported by a compiler, this is equivalent to the 'debug' option.
#  - minimal_debug: If possible, produces information for tracebacks only. This includes descriptions of functions and external variables, and line number tables, but no information about local variables.
#  - full_debug: If possible, includes extra information, such as all the macro definitions present in the program.
#  - btf: GCC only. Request BTF debug information. BTF is the default debugging format for the eBPF  target.
#  - codeview: GCC only. Code View debug format (used by Microsoft Visual C++ on Windows).
#  - ctf: GCC only. Produce a CTF debug information. The default level is 2.
#  - ctf1: Level 1 produces CTF information for tracebacks only. This includes callsite information, but does not include type information.
#  - ctf2: Level 2 produces type information for entities (functions, data objects etc.)  at file-scope or global-scope only.
#  - vms: GCC only. Alpha/VMS debug format (used by DEBUG on Alpha/VMS systems).The default level is 2.
#  - vms1: Same as 1, but for Alpha/VMS.
#  - vms2: Same as 2, but for Alpha/VMS.
#  - vms3: Same as 3, but for Alpha/VMS.
#  - dbx: Clang only.
#  - lldb: Clang only.
#  - sce: Clang only.
#  - dwarf: Clang-cl only
feature <jln-symbols> : _ default hidden strip-all gc-sections nodebug debug minimal-debug full-debug btf codeview ctf ctf1 ctf2 vms vms1 vms2 vms3 dbx lldb sce dwarf : incidental ;
# Enable -Wunsafe-buffer-usage with clang (https://clang.llvm.org/docs/SafeBuffers.html).
feature <jln-unsafe-buffer-usage-warnings> : _ default on off : propagated ;
# Initialize all stack variables implicitly, including padding.
#  - uninitialized: Doesn't initialize any automatic variables (default behavior of Clang and GCC).
#  - pattern: Initialize automatic variables with byte-repeatable pattern (0xFE for GCC, 0xAA for Clang).
#  - zero: zero Initialize automatic variables with zeroes.
feature <jln-var-init> : _ default uninitialized pattern zero : incidental ;
# Warning level.
#  - on: Activates essential warnings and extras.
#  - essential: Activates essential warnings, typically -Wall -Wextra or /W4).
#  - extensive: Activates essential warnings, extras and some that may raise false positives
feature <jln-warnings> : _ on default off essential extensive : propagated ;
# Make all or some warnings into errors.
feature <jln-warnings-as-error> : _ default off on basic : incidental ;
# In code that is intended to be portable to Windows-based compilers the warning helps prevent unresolved references due to the difference in the mangling of symbols declared with different class-keys.
feature <jln-windows-abi-compatibility-warnings> : _ off default on : propagated ;
# Increases that addressable sections capacity.
feature <jln-windows-bigobj> : _ on default : incidental ;

feature <jln-control-flow-incidental> : _ default off on branch return allow-bugs : incidental ;
feature <jln-coverage-incidental> : _ default off on : incidental ;
feature <jln-cpu-incidental> : _ default generic native : incidental ;
feature <jln-exceptions-incidental> : _ default off on : incidental ;
feature <jln-lto-incidental> : _ default off on full thin-or-nothing whole-program whole-program-and-full-lto : incidental ;
feature <jln-ndebug-incidental> : _ with-optimization-1-or-above default off on : incidental ;
feature <jln-optimization-incidental> : _ default 0 g 1 2 3 fast size z : incidental ;
feature <jln-pedantic-incidental> : _ on default off as-error : incidental ;
feature <jln-pie-incidental> : _ default off on static fpic fPIC fpie fPIE : incidental ;
feature <jln-relro-incidental> : _ default off on full : incidental ;
feature <jln-rtti-incidental> : _ default off on : incidental ;
feature <jln-sanitizers-incidental> : _ default off on extra address kernel kernel-extra kernel-extra kernel-address thread undefined undefined-minimal-runtime scudo-hardened-allocator : incidental ;
feature <jln-stack-protector-incidental> : _ default off on strong all : incidental ;
feature <jln-stl-fix-incidental> : _ on default off : incidental ;
feature <jln-stl-hardening-incidental> : _ default off fast extensive debug debug-with-broken-abi : incidental ;
feature <jln-symbols-incidental> : _ default hidden strip-all gc-sections nodebug debug minimal-debug full-debug btf codeview ctf ctf1 ctf2 vms vms1 vms2 vms3 dbx lldb sce dwarf : incidental ;
feature <jln-var-init-incidental> : _ default uninitialized pattern zero : incidental ;
feature <jln-warnings-as-error-incidental> : _ default off on basic : incidental ;
feature <jln-windows-bigobj-incidental> : _ on default : incidental ;

feature <jln-analyzer-default> : default off on with-external-headers : incidental ;
feature <jln-analyzer-too-complex-warning-default> : default off on : incidental ;
feature <jln-analyzer-verbosity-default> : default 0 1 2 3 : incidental ;
feature <jln-color-default> : default auto never always : incidental ;
feature <jln-control-flow-default> : default off on branch return allow-bugs : incidental ;
feature <jln-conversion-warnings-default> : on default off sign float conversion all : incidental ;
feature <jln-coverage-default> : default off on : incidental ;
feature <jln-covered-switch-default-warnings-default> : on default off : incidental ;
feature <jln-cpu-default> : default generic native : incidental ;
feature <jln-diagnostics-format-default> : default fixits patch print-source-range-info : incidental ;
feature <jln-diagnostics-show-template-default> : default tree without-elided-types tree-without-elided-types : incidental ;
feature <jln-exceptions-default> : default off on : incidental ;
feature <jln-linker-default> : default bfd gold lld mold native : incidental ;
feature <jln-lto-default> : default off on full thin-or-nothing whole-program whole-program-and-full-lto : incidental ;
feature <jln-msvc-crt-secure-no-warnings-default> : on default off : incidental ;
feature <jln-msvc-diagnostics-format-default> : caret default classic column : incidental ;
feature <jln-msvc-isystem-default> : default anglebrackets include-and-caexcludepath assumed : incidental ;
feature <jln-msvc-isystem-with-template-instantiations-treated-as-non-external-default> : default off on : incidental ;
feature <jln-ndebug-default> : with-optimization-1-or-above default off on : incidental ;
feature <jln-noexcept-warnings-default> : default off on : incidental ;
feature <jln-optimization-default> : default 0 g 1 2 3 fast size z : incidental ;
feature <jln-optimization-warnings-default> : default off on : incidental ;
feature <jln-pedantic-default> : on default off as-error : incidental ;
feature <jln-pie-default> : default off on static fpic fPIC fpie fPIE : incidental ;
feature <jln-relro-default> : default off on full : incidental ;
feature <jln-reproducible-build-warnings-default> : default off on : incidental ;
feature <jln-rtti-default> : default off on : incidental ;
feature <jln-sanitizers-default> : default off on extra address kernel kernel-extra kernel-extra kernel-address thread undefined undefined-minimal-runtime scudo-hardened-allocator : incidental ;
feature <jln-shadow-warnings-default> : off default on local compatible-local all : incidental ;
feature <jln-stack-protector-default> : default off on strong all : incidental ;
feature <jln-stl-fix-default> : on default off : incidental ;
feature <jln-stl-hardening-default> : default off fast extensive debug debug-with-broken-abi : incidental ;
feature <jln-suggest-attributes-default> : on default off common analysis unity all : incidental ;
feature <jln-switch-warnings-default> : on default off exhaustive-enum mandatory-default exhaustive-enum-and-mandatory-default : incidental ;
feature <jln-symbols-default> : default hidden strip-all gc-sections nodebug debug minimal-debug full-debug btf codeview ctf ctf1 ctf2 vms vms1 vms2 vms3 dbx lldb sce dwarf : incidental ;
feature <jln-unsafe-buffer-usage-warnings-default> : default on off : incidental ;
feature <jln-var-init-default> : default uninitialized pattern zero : incidental ;
feature <jln-warnings-default> : on default off essential extensive : incidental ;
feature <jln-warnings-as-error-default> : default off on basic : incidental ;
feature <jln-windows-abi-compatibility-warnings-default> : off default on : incidental ;
feature <jln-windows-bigobj-default> : on default : incidental ;


rule jln-get-env ( env : values * )
{
  local x = [ os.environ $(env) ] ;
  if $(x)
  {
    if $(x) in $(values)
    {
      return $(x) ;
    }
    else
    {
      EXIT "Unknown '$(x)' for $(env)" : 7 ;
    }
  }
  else
  {
    return "" ;
  }
}

constant jln_env_analyzer : [ jln-get-env jln_analyzer : default off on with-external-headers ] ;
constant jln_env_analyzer_too_complex_warning : [ jln-get-env jln_analyzer_too_complex_warning : default off on ] ;
constant jln_env_analyzer_verbosity : [ jln-get-env jln_analyzer_verbosity : default 0 1 2 3 ] ;
constant jln_env_color : [ jln-get-env jln_color : default auto never always ] ;
constant jln_env_control_flow : [ jln-get-env jln_control_flow : default off on branch return allow-bugs ] ;
constant jln_env_conversion_warnings : [ jln-get-env jln_conversion_warnings : on default off sign float conversion all ] ;
constant jln_env_coverage : [ jln-get-env jln_coverage : default off on ] ;
constant jln_env_covered_switch_default_warnings : [ jln-get-env jln_covered_switch_default_warnings : on default off ] ;
constant jln_env_cpu : [ jln-get-env jln_cpu : default generic native ] ;
constant jln_env_diagnostics_format : [ jln-get-env jln_diagnostics_format : default fixits patch print-source-range-info ] ;
constant jln_env_diagnostics_show_template : [ jln-get-env jln_diagnostics_show_template : default tree without-elided-types tree-without-elided-types ] ;
constant jln_env_exceptions : [ jln-get-env jln_exceptions : default off on ] ;
constant jln_env_linker : [ jln-get-env jln_linker : default bfd gold lld mold native ] ;
constant jln_env_lto : [ jln-get-env jln_lto : default off on full thin-or-nothing whole-program whole-program-and-full-lto ] ;
constant jln_env_msvc_crt_secure_no_warnings : [ jln-get-env jln_msvc_crt_secure_no_warnings : on default off ] ;
constant jln_env_msvc_diagnostics_format : [ jln-get-env jln_msvc_diagnostics_format : caret default classic column ] ;
constant jln_env_msvc_isystem : [ jln-get-env jln_msvc_isystem : default anglebrackets include-and-caexcludepath assumed ] ;
constant jln_env_msvc_isystem_with_template_instantiations_treated_as_non_external : [ jln-get-env jln_msvc_isystem_with_template_instantiations_treated_as_non_external : default off on ] ;
constant jln_env_ndebug : [ jln-get-env jln_ndebug : with-optimization-1-or-above default off on ] ;
constant jln_env_noexcept_warnings : [ jln-get-env jln_noexcept_warnings : default off on ] ;
constant jln_env_optimization : [ jln-get-env jln_optimization : default 0 g 1 2 3 fast size z ] ;
constant jln_env_optimization_warnings : [ jln-get-env jln_optimization_warnings : default off on ] ;
constant jln_env_pedantic : [ jln-get-env jln_pedantic : on default off as-error ] ;
constant jln_env_pie : [ jln-get-env jln_pie : default off on static fpic fPIC fpie fPIE ] ;
constant jln_env_relro : [ jln-get-env jln_relro : default off on full ] ;
constant jln_env_reproducible_build_warnings : [ jln-get-env jln_reproducible_build_warnings : default off on ] ;
constant jln_env_rtti : [ jln-get-env jln_rtti : default off on ] ;
constant jln_env_sanitizers : [ jln-get-env jln_sanitizers : default off on extra address kernel kernel-extra kernel-extra kernel-address thread undefined undefined-minimal-runtime scudo-hardened-allocator ] ;
constant jln_env_shadow_warnings : [ jln-get-env jln_shadow_warnings : off default on local compatible-local all ] ;
constant jln_env_stack_protector : [ jln-get-env jln_stack_protector : default off on strong all ] ;
constant jln_env_stl_fix : [ jln-get-env jln_stl_fix : on default off ] ;
constant jln_env_stl_hardening : [ jln-get-env jln_stl_hardening : default off fast extensive debug debug-with-broken-abi ] ;
constant jln_env_suggest_attributes : [ jln-get-env jln_suggest_attributes : on default off common analysis unity all ] ;
constant jln_env_switch_warnings : [ jln-get-env jln_switch_warnings : on default off exhaustive-enum mandatory-default exhaustive-enum-and-mandatory-default ] ;
constant jln_env_symbols : [ jln-get-env jln_symbols : default hidden strip-all gc-sections nodebug debug minimal-debug full-debug btf codeview ctf ctf1 ctf2 vms vms1 vms2 vms3 dbx lldb sce dwarf ] ;
constant jln_env_unsafe_buffer_usage_warnings : [ jln-get-env jln_unsafe_buffer_usage_warnings : default on off ] ;
constant jln_env_var_init : [ jln-get-env jln_var_init : default uninitialized pattern zero ] ;
constant jln_env_warnings : [ jln-get-env jln_warnings : on default off essential extensive ] ;
constant jln_env_warnings_as_error : [ jln-get-env jln_warnings_as_error : default off on basic ] ;
constant jln_env_windows_abi_compatibility_warnings : [ jln-get-env jln_windows_abi_compatibility_warnings : off default on ] ;
constant jln_env_windows_bigobj : [ jln-get-env jln_windows_bigobj : on default ] ;

if $(JLN_BJAM_YEAR_VERSION) < 2016.00
{
  import toolset ;
  toolset.flags jln-control-flow JLN_CONTROL_FLOW : <jln-control-flow> ;
  toolset.flags jln-control-flow-incidental JLN_CONTROL_FLOW_INCIDENTAL : <jln-control-flow-incidental> ;
  toolset.flags jln-coverage JLN_COVERAGE : <jln-coverage> ;
  toolset.flags jln-coverage-incidental JLN_COVERAGE_INCIDENTAL : <jln-coverage-incidental> ;
  toolset.flags jln-cpu JLN_CPU : <jln-cpu> ;
  toolset.flags jln-cpu-incidental JLN_CPU_INCIDENTAL : <jln-cpu-incidental> ;
  toolset.flags jln-exceptions JLN_EXCEPTIONS : <jln-exceptions> ;
  toolset.flags jln-exceptions-incidental JLN_EXCEPTIONS_INCIDENTAL : <jln-exceptions-incidental> ;
  toolset.flags jln-lto JLN_LTO : <jln-lto> ;
  toolset.flags jln-lto-incidental JLN_LTO_INCIDENTAL : <jln-lto-incidental> ;
  toolset.flags jln-ndebug JLN_NDEBUG : <jln-ndebug> ;
  toolset.flags jln-ndebug-incidental JLN_NDEBUG_INCIDENTAL : <jln-ndebug-incidental> ;
  toolset.flags jln-optimization JLN_OPTIMIZATION : <jln-optimization> ;
  toolset.flags jln-optimization-incidental JLN_OPTIMIZATION_INCIDENTAL : <jln-optimization-incidental> ;
  toolset.flags jln-pedantic JLN_PEDANTIC : <jln-pedantic> ;
  toolset.flags jln-pedantic-incidental JLN_PEDANTIC_INCIDENTAL : <jln-pedantic-incidental> ;
  toolset.flags jln-pie JLN_PIE : <jln-pie> ;
  toolset.flags jln-pie-incidental JLN_PIE_INCIDENTAL : <jln-pie-incidental> ;
  toolset.flags jln-relro JLN_RELRO : <jln-relro> ;
  toolset.flags jln-relro-incidental JLN_RELRO_INCIDENTAL : <jln-relro-incidental> ;
  toolset.flags jln-rtti JLN_RTTI : <jln-rtti> ;
  toolset.flags jln-rtti-incidental JLN_RTTI_INCIDENTAL : <jln-rtti-incidental> ;
  toolset.flags jln-sanitizers JLN_SANITIZERS : <jln-sanitizers> ;
  toolset.flags jln-sanitizers-incidental JLN_SANITIZERS_INCIDENTAL : <jln-sanitizers-incidental> ;
  toolset.flags jln-stack-protector JLN_STACK_PROTECTOR : <jln-stack-protector> ;
  toolset.flags jln-stack-protector-incidental JLN_STACK_PROTECTOR_INCIDENTAL : <jln-stack-protector-incidental> ;
  toolset.flags jln-stl-fix JLN_STL_FIX : <jln-stl-fix> ;
  toolset.flags jln-stl-fix-incidental JLN_STL_FIX_INCIDENTAL : <jln-stl-fix-incidental> ;
  toolset.flags jln-stl-hardening JLN_STL_HARDENING : <jln-stl-hardening> ;
  toolset.flags jln-stl-hardening-incidental JLN_STL_HARDENING_INCIDENTAL : <jln-stl-hardening-incidental> ;
  toolset.flags jln-symbols JLN_SYMBOLS : <jln-symbols> ;
  toolset.flags jln-symbols-incidental JLN_SYMBOLS_INCIDENTAL : <jln-symbols-incidental> ;
  toolset.flags jln-var-init JLN_VAR_INIT : <jln-var-init> ;
  toolset.flags jln-var-init-incidental JLN_VAR_INIT_INCIDENTAL : <jln-var-init-incidental> ;
  toolset.flags jln-warnings-as-error JLN_WARNINGS_AS_ERROR : <jln-warnings-as-error> ;
  toolset.flags jln-warnings-as-error-incidental JLN_WARNINGS_AS_ERROR_INCIDENTAL : <jln-warnings-as-error-incidental> ;
  toolset.flags jln-windows-bigobj JLN_WINDOWS_BIGOBJ : <jln-windows-bigobj> ;
  toolset.flags jln-windows-bigobj-incidental JLN_WINDOWS_BIGOBJ_INCIDENTAL : <jln-windows-bigobj-incidental> ;

}

JLN_ORIGINAL_CXX_TOOLSET = "" ;
JLN_NORMALIZED_CXX_COMP = "" ;
JLN_NORMALIZED_CXX_COMP_VERSION = 100000 ;
JLN_NORMALIZED_CXX_IS_CLANG_LIKE = 0 ;

rule jln-update-normalized-compiler ( toolset : version )
{
  if $(JLN_ORIGINAL_CXX_TOOLSET) != $(toolset)
  {
    JLN_ORIGINAL_CXX_TOOLSET = $(toolset) ;

    local is_emcc = 0 ;
    local is_intel = 0 ;
    local is_clang = 0 ;
    switch $(toolset)  {
      case emscripten* : is_emcc = 1 ;
      case emcc* : is_emcc = 1 ;
      case intel : is_intel = 1 ;
      case icx* : is_intel = 1 ;
      case icpx* : is_intel = 1 ;
      case dpcpp* : is_intel = 1 ;
      case clang-cl : is_clang = 0 ;
      case clang* : is_clang = 1 ;
    }

    if $(is_emcc) = 1 {
      JLN_NORMALIZED_CXX_COMP = clang-emcc ;
      JLN_NORMALIZED_CXX_IS_CLANG_LIKE = 1 ;
      # get clang version. Assume emcc exists
      version = [ MATCH "clang version ([0-9]+\\.[0-9]+\\.[0-9]+)" : [ SHELL "emcc -v 2>&1" ] ] ;
    }
    # icx / icpx
    else if $(is_intel) = 1 {
      JLN_NORMALIZED_CXX_COMP = clang ;
      JLN_NORMALIZED_CXX_IS_CLANG_LIKE = 1 ;
      switch $(version)  {
        case 2021* : JLN_NORMALIZED_CXX_COMP_VERSION = 1200000 ;
        case 2022* : JLN_NORMALIZED_CXX_COMP_VERSION = 1400000 ;
        case 2023* : JLN_NORMALIZED_CXX_COMP_VERSION = 1600000 ;
        case 2024* : JLN_NORMALIZED_CXX_COMP_VERSION = 1800000 ;
        case 2025* : JLN_NORMALIZED_CXX_COMP_VERSION = 2000000 ;
        case 2026* : JLN_NORMALIZED_CXX_COMP_VERSION = 2200000 ;
        case 2027* : JLN_NORMALIZED_CXX_COMP_VERSION = 2400000 ;
        case 2028* : JLN_NORMALIZED_CXX_COMP_VERSION = 2600000 ;
        case 2029* : JLN_NORMALIZED_CXX_COMP_VERSION = 2800000 ;
        case 2030* : JLN_NORMALIZED_CXX_COMP_VERSION = 3000000 ;
      }
    }
    else {
      JLN_NORMALIZED_CXX_IS_CLANG_LIKE = $(is_clang) ;
      # TODO `version` is not the real version.
      # For toolset=gcc-5, version is 5 ; for clang-scan, version is ''
      JLN_NORMALIZED_CXX_COMP = $(toolset) ;
      version = [ MATCH "^[^0-9]*(.*)$" : $(version) ] ;
      if ! $(version) {
        version = [ MATCH "([0-9]+\\.[0-9]+\\.[0-9]+)" : [ SHELL "$(toolset) --version" ] ] ;
      }
    }

    if $(is_intel) = 0 {
      local match = [ MATCH "^([0-9]+)(\\.([0-9]+))?" : $(version) ] ;
      local major = $(match[1]) ;
      local minor = [ MATCH "(.....)$" : [ string.join 00000 $(match[3]) ] ] ;
      JLN_NORMALIZED_CXX_COMP_VERSION = $(major)$(minor) ;
    }
  }
}

rule jln-get-value ( ps : opt : env )
{
  local x = [ $(ps).get <$(opt)> ] ;
  if $(x) = "_"
  {
    x = $(env) ;
    if $(x) = ""
    {
      x = [ $(ps).get <$(opt)-default> ] ;
    }
  }
  return $(x) ;
}

rule jln-get-value2 ( ps : opt : iopt : env )
{
  local x = [ $(ps).get <$(opt)> ] ;
  if $(x) = "_"
  {
    x = [ $(ps).get <$(iopt)> ] ;
    if $(x) = "_"
    {
      x = $(env) ;
      if $(x) = ""
      {
        x = [ $(ps).get <$(opt)-default> ] ;
      }
    }
  }
  return $(x) ;
}

rule jln_flags ( properties * )
{
  local ps = [ property-set.create $(properties) ] ;
  local toolset = [ $(ps).get <toolset> ] ;
  local original_version = [ $(ps).get <toolset-$(toolset):version> ] ;
  jln-update-normalized-compiler $(toolset) : $(original_version) ;
  local linker = [ $(ps).get <linker> ] ;

  local flags = ;
  if $(JLN_BJAM_YEAR_VERSION) >= 2016.00
  {
    flags += 
      <relevant>jln-control-flow
      <relevant>jln-coverage
      <relevant>jln-cpu
      <relevant>jln-exceptions
      <relevant>jln-lto
      <relevant>jln-ndebug
      <relevant>jln-optimization
      <relevant>jln-pedantic
      <relevant>jln-pie
      <relevant>jln-relro
      <relevant>jln-rtti
      <relevant>jln-sanitizers
      <relevant>jln-stack-protector
      <relevant>jln-stl-fix
      <relevant>jln-stl-hardening
      <relevant>jln-symbols
      <relevant>jln-var-init
      <relevant>jln-warnings-as-error
      <relevant>jln-windows-bigobj
    ;
  }

  local x_analyzer = [ jln-get-value $(ps) : jln-analyzer : $(jln_env_analyzer) ] ;
  local x_analyzer_too_complex_warning = [ jln-get-value $(ps) : jln-analyzer-too-complex-warning : $(jln_env_analyzer_too_complex_warning) ] ;
  local x_analyzer_verbosity = [ jln-get-value $(ps) : jln-analyzer-verbosity : $(jln_env_analyzer_verbosity) ] ;
  local x_color = [ jln-get-value $(ps) : jln-color : $(jln_env_color) ] ;
  local x_control_flow = [ jln-get-value2 $(ps) : jln-control-flow : jln-control-flow-incidental : $(jln_env_control_flow) ] ;
  local x_conversion_warnings = [ jln-get-value $(ps) : jln-conversion-warnings : $(jln_env_conversion_warnings) ] ;
  local x_coverage = [ jln-get-value2 $(ps) : jln-coverage : jln-coverage-incidental : $(jln_env_coverage) ] ;
  local x_covered_switch_default_warnings = [ jln-get-value $(ps) : jln-covered-switch-default-warnings : $(jln_env_covered_switch_default_warnings) ] ;
  local x_cpu = [ jln-get-value2 $(ps) : jln-cpu : jln-cpu-incidental : $(jln_env_cpu) ] ;
  local x_diagnostics_format = [ jln-get-value $(ps) : jln-diagnostics-format : $(jln_env_diagnostics_format) ] ;
  local x_diagnostics_show_template = [ jln-get-value $(ps) : jln-diagnostics-show-template : $(jln_env_diagnostics_show_template) ] ;
  local x_exceptions = [ jln-get-value2 $(ps) : jln-exceptions : jln-exceptions-incidental : $(jln_env_exceptions) ] ;
  local x_linker = [ jln-get-value $(ps) : jln-linker : $(jln_env_linker) ] ;
  local x_lto = [ jln-get-value2 $(ps) : jln-lto : jln-lto-incidental : $(jln_env_lto) ] ;
  local x_msvc_crt_secure_no_warnings = [ jln-get-value $(ps) : jln-msvc-crt-secure-no-warnings : $(jln_env_msvc_crt_secure_no_warnings) ] ;
  local x_msvc_diagnostics_format = [ jln-get-value $(ps) : jln-msvc-diagnostics-format : $(jln_env_msvc_diagnostics_format) ] ;
  local x_msvc_isystem = [ jln-get-value $(ps) : jln-msvc-isystem : $(jln_env_msvc_isystem) ] ;
  local x_msvc_isystem_with_template_instantiations_treated_as_non_external = [ jln-get-value $(ps) : jln-msvc-isystem-with-template-instantiations-treated-as-non-external : $(jln_env_msvc_isystem_with_template_instantiations_treated_as_non_external) ] ;
  local x_ndebug = [ jln-get-value2 $(ps) : jln-ndebug : jln-ndebug-incidental : $(jln_env_ndebug) ] ;
  local x_noexcept_warnings = [ jln-get-value $(ps) : jln-noexcept-warnings : $(jln_env_noexcept_warnings) ] ;
  local x_optimization = [ jln-get-value2 $(ps) : jln-optimization : jln-optimization-incidental : $(jln_env_optimization) ] ;
  local x_optimization_warnings = [ jln-get-value $(ps) : jln-optimization-warnings : $(jln_env_optimization_warnings) ] ;
  local x_pedantic = [ jln-get-value2 $(ps) : jln-pedantic : jln-pedantic-incidental : $(jln_env_pedantic) ] ;
  local x_pie = [ jln-get-value2 $(ps) : jln-pie : jln-pie-incidental : $(jln_env_pie) ] ;
  local x_relro = [ jln-get-value2 $(ps) : jln-relro : jln-relro-incidental : $(jln_env_relro) ] ;
  local x_reproducible_build_warnings = [ jln-get-value $(ps) : jln-reproducible-build-warnings : $(jln_env_reproducible_build_warnings) ] ;
  local x_rtti = [ jln-get-value2 $(ps) : jln-rtti : jln-rtti-incidental : $(jln_env_rtti) ] ;
  local x_sanitizers = [ jln-get-value2 $(ps) : jln-sanitizers : jln-sanitizers-incidental : $(jln_env_sanitizers) ] ;
  local x_shadow_warnings = [ jln-get-value $(ps) : jln-shadow-warnings : $(jln_env_shadow_warnings) ] ;
  local x_stack_protector = [ jln-get-value2 $(ps) : jln-stack-protector : jln-stack-protector-incidental : $(jln_env_stack_protector) ] ;
  local x_stl_fix = [ jln-get-value2 $(ps) : jln-stl-fix : jln-stl-fix-incidental : $(jln_env_stl_fix) ] ;
  local x_stl_hardening = [ jln-get-value2 $(ps) : jln-stl-hardening : jln-stl-hardening-incidental : $(jln_env_stl_hardening) ] ;
  local x_suggest_attributes = [ jln-get-value $(ps) : jln-suggest-attributes : $(jln_env_suggest_attributes) ] ;
  local x_switch_warnings = [ jln-get-value $(ps) : jln-switch-warnings : $(jln_env_switch_warnings) ] ;
  local x_symbols = [ jln-get-value2 $(ps) : jln-symbols : jln-symbols-incidental : $(jln_env_symbols) ] ;
  local x_unsafe_buffer_usage_warnings = [ jln-get-value $(ps) : jln-unsafe-buffer-usage-warnings : $(jln_env_unsafe_buffer_usage_warnings) ] ;
  local x_var_init = [ jln-get-value2 $(ps) : jln-var-init : jln-var-init-incidental : $(jln_env_var_init) ] ;
  local x_warnings = [ jln-get-value $(ps) : jln-warnings : $(jln_env_warnings) ] ;
  local x_warnings_as_error = [ jln-get-value2 $(ps) : jln-warnings-as-error : jln-warnings-as-error-incidental : $(jln_env_warnings_as_error) ] ;
  local x_windows_abi_compatibility_warnings = [ jln-get-value $(ps) : jln-windows-abi-compatibility-warnings : $(jln_env_windows_abi_compatibility_warnings) ] ;
  local x_windows_bigobj = [ jln-get-value2 $(ps) : jln-windows-bigobj : jln-windows-bigobj-incidental : $(jln_env_windows_bigobj) ] ;

  if $(x_ndebug) != "default"
  {
    if ( $(JLN_NORMALIZED_CXX_COMP) = "msvc" || $(JLN_NORMALIZED_CXX_COMP) = "intel' && $(original_version) = 'windows" )
    {
      if $(x_ndebug) = "off"
      {
        flags +=
          <cxxflags>"/UNDEBUG"
        ;
      }
      else
      {
        if $(x_ndebug) = "on"
        {
          flags +=
            <cxxflags>"/DNDEBUG"
          ;
        }
        else
        {
          if $(x_optimization) != "default" && ! ( $(x_optimization) = "0" || $(x_optimization) = "g" )
          {
            flags +=
              <cxxflags>"/DNDEBUG"
            ;
          }
        }
      }
    }
    else
    {
      if $(x_ndebug) = "off"
      {
        flags +=
          <cxxflags>"-UNDEBUG"
        ;
      }
      else
      {
        if $(x_ndebug) = "on"
        {
          flags +=
            <cxxflags>"-DNDEBUG"
          ;
        }
        else
        {
          if $(x_optimization) != "default" && ! ( $(x_optimization) = "0" || $(x_optimization) = "g" )
          {
            flags +=
              <cxxflags>"-DNDEBUG"
            ;
          }
        }
      }
    }
  }
  if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" || $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) || $(JLN_NORMALIZED_CXX_COMP) = "clang-cl" )
  {
    if $(x_warnings) != "default"
    {
      if $(x_warnings) = "off"
      {
        flags +=
          <cxxflags>"-w"
        ;
      }
      else
      {
        if $(x_warnings) = "essential"
        {
          flags +=
            <cxxflags>"-Wall"
            <cxxflags>"-Wextra"
          ;
        }
        else
        {
          if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
          {
            flags +=
              <cxxflags>"-Wall"
              <cxxflags>"-Wextra"
            ;
            if [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ]
            {
              flags +=
                <cxxflags>"-Wcast-align"
              ;
            }
            flags +=
              <cxxflags>"-Wcast-qual"
              <cxxflags>"-Wdisabled-optimization"
              <cxxflags>"-Wfloat-equal"
              <cxxflags>"-Wformat-security"
              <cxxflags>"-Wformat=2"
              <cxxflags>"-Winvalid-pch"
              <cxxflags>"-Wmissing-declarations"
              <cxxflags>"-Wmissing-include-dirs"
              <cxxflags>"-Wpacked"
              <cxxflags>"-Wredundant-decls"
              <cxxflags>"-Wundef"
              <cxxflags>"-Wunused-macros"
              <cxxflags>"-Wpointer-arith"
              <cxxflags>"-Wnon-virtual-dtor"
              <cxxflags>"-Wold-style-cast"
              <cxxflags>"-Woverloaded-virtual"
            ;
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400007 ]
            {
              flags +=
                <cxxflags>"-Wsuggest-attribute=noreturn"
                <cxxflags>"-Wzero-as-null-pointer-constant"
                <cxxflags>"-Wlogical-op"
                <cxxflags>"-Wvector-operation-performance"
                <cxxflags>"-Wdouble-promotion"
                <cxxflags>"-Wtrampolines"
              ;
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400008 ]
              {
                flags +=
                  <cxxflags>"-Wuseless-cast"
                ;
                if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400009 ]
                {
                  flags +=
                    <cxxflags>"-Wconditionally-supported"
                  ;
                  if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 500001 ]
                  {
                    flags +=
                      <cxxflags>"-Wformat-signedness"
                      <cxxflags>"-Warray-bounds=2"
                      <cxxflags>"-Wstrict-null-sentinel"
                      <cxxflags>"-Wsuggest-override"
                    ;
                    if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 600001 ]
                    {
                      flags +=
                        <cxxflags>"-Wduplicated-cond"
                        <cxxflags>"-Wnull-dereference"
                      ;
                      if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 700000 ]
                      {
                        flags +=
                          <cxxflags>"-Waligned-new"
                        ;
                        if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 700001 ]
                        {
                          flags +=
                            <cxxflags>"-Walloc-zero"
                            <cxxflags>"-Walloca"
                            <cxxflags>"-Wformat-overflow=2"
                            <cxxflags>"-Wduplicated-branches"
                          ;
                          if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ]
                          {
                            flags +=
                              <cxxflags>"-Wcast-align=strict"
                              <cxxflags>"-Wformat-truncation=2"
                              <cxxflags>"-Wshift-overflow=2"
                              <cxxflags>"-Wclass-memaccess"
                            ;
                            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1400000 ]
                            {
                              flags +=
                                <cxxflags>"-Walloc-size"
                              ;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if $(x_warnings) = "extensive"
            {
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ]
              {
                flags +=
                  <cxxflags>"-Wstringop-overflow=4"
                ;
                if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1200000 ]
                {
                  flags +=
                    <cxxflags>"-Wuse-after-free=3"
                  ;
                }
              }
            }
          }
          else
          {
            flags +=
              <cxxflags>"-Weverything"
              <cxxflags>"-Wno-documentation"
              <cxxflags>"-Wno-documentation-unknown-command"
              <cxxflags>"-Wno-newline-eof"
              <cxxflags>"-Wno-c++98-compat"
              <cxxflags>"-Wno-c++98-compat-pedantic"
              <cxxflags>"-Wno-padded"
              <cxxflags>"-Wno-global-constructors"
              <cxxflags>"-Wno-weak-vtables"
              <cxxflags>"-Wno-exit-time-destructors"
            ;
            if  ! ( ( $(x_switch_warnings) = "off" || $(x_switch_warnings) = "exhaustive-enum" || $(x_switch_warnings) = "exhaustive-enum-and-mandatory-default" ) )
            {
              flags +=
                <cxxflags>"-Wno-switch-enum"
              ;
            }
            if $(x_covered_switch_default_warnings) = "default"
            {
              flags +=
                <cxxflags>"-Wno-covered-switch-default"
              ;
            }
            if $(x_suggest_attributes) = "default"
            {
              flags +=
                <cxxflags>"-Wno-missing-noreturn"
              ;
            }
            if $(x_conversion_warnings) != "default"
            {
              if $(x_conversion_warnings) = "conversion"
              {
                flags +=
                  <cxxflags>"-Wno-sign-compare"
                  <cxxflags>"-Wno-sign-conversion"
                ;
              }
              else
              {
                if ( $(x_conversion_warnings) = "float" || $(x_conversion_warnings) = "sign" )
                {
                  flags +=
                    <cxxflags>"-Wno-conversion"
                  ;
                }
              }
            }
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 300009 ]
            {
              flags +=
                <cxxflags>"-Wno-undefined-var-template"
              ;
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 500000 ]
              {
                flags +=
                  <cxxflags>"-Wno-inconsistent-missing-destructor-override"
                ;
                if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 900000 ]
                {
                  flags +=
                    <cxxflags>"-Wno-ctad-maybe-unsupported"
                  ;
                  if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1000000 ]
                  {
                    flags +=
                      <cxxflags>"-Wno-c++20-compat"
                    ;
                    if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1100000 ]
                    {
                      flags +=
                        <cxxflags>"-Wno-suggest-destructor-override"
                      ;
                      if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1600000 ]
                      {
                        if $(x_unsafe_buffer_usage_warnings) = "default"
                        {
                          flags +=
                            <cxxflags>"-Wno-unsafe-buffer-usage"
                          ;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if $(x_optimization_warnings) != "default"
    {
      if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
      {
        if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 900000 ]
        {
          flags +=
            <cxxflags>"-Wpessimizing-move"
            <cxxflags>"-Wredundant-move"
          ;
          if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1100000 ]
          {
            flags +=
              <cxxflags>"-Wrange-loop-construct"
            ;
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1300000 ]
            {
              flags +=
                <cxxflags>"-Wself-move"
              ;
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1400000 ]
              {
                flags +=
                  <cxxflags>"-Wnrvo"
                ;
              }
            }
          }
        }
      }
      else
      {
        if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 300006 ]
        {
          flags +=
            <cxxflags>"-Wself-move"
          ;
          if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 300007 ]
          {
            flags +=
              <cxxflags>"-Wpessimizing-move"
              <cxxflags>"-Wredundant-move"
            ;
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1000000 ]
            {
              flags +=
                <cxxflags>"-Wrange-loop-construct"
              ;
            }
          }
        }
      }
    }
    if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
    {
      if $(x_switch_warnings) != "default"
      {
        if $(x_switch_warnings) = "on"
        {
          flags +=
            <cxxflags>"-Wswitch"
          ;
        }
        else
        {
          if $(x_switch_warnings) = "exhaustive-enum"
          {
            flags +=
              <cxxflags>"-Wswitch-enum"
            ;
          }
          else
          {
            if $(x_switch_warnings) = "mandatory-default"
            {
              flags +=
                <cxxflags>"-Wswitch-default"
              ;
            }
            else
            {
              if $(x_switch_warnings) = "exhaustive-enum-and-mandatory-default"
              {
                flags +=
                  <cxxflags>"-Wswitch-default"
                  <cxxflags>"-Wswitch-enum"
                ;
              }
              else
              {
                flags +=
                  <cxxflags>"-Wno-switch"
                  <cxxflags>"-Wno-switch-enum"
                  <cxxflags>"-Wno-switch-default"
                ;
              }
            }
          }
        }
      }
    }
    else
    {
      if $(x_switch_warnings) != "default"
      {
        if $(x_switch_warnings) = "on"
        {
          flags +=
            <cxxflags>"-Wswitch"
            <cxxflags>"-Wno-switch-default"
          ;
        }
        else
        {
          if $(x_switch_warnings) = "mandatory-default"
          {
            flags +=
              <cxxflags>"-Wswitch"
              <cxxflags>"-Wswitch-default"
            ;
          }
          else
          {
            if $(x_switch_warnings) = "exhaustive-enum"
            {
              flags +=
                <cxxflags>"-Wswitch"
                <cxxflags>"-Wswitch-enum"
                <cxxflags>"-Wno-switch-default"
              ;
            }
            else
            {
              if $(x_switch_warnings) = "exhaustive-enum-and-mandatory-default"
              {
                flags +=
                  <cxxflags>"-Wswitch"
                  <cxxflags>"-Wswitch-enum"
                  <cxxflags>"-Wswitch-default"
                ;
              }
              else
              {
                flags +=
                  <cxxflags>"-Wno-switch"
                  <cxxflags>"-Wno-switch-enum"
                  <cxxflags>"-Wno-switch-default"
                ;
              }
            }
          }
        }
      }
      if $(x_covered_switch_default_warnings) != "default"
      {
        if $(x_covered_switch_default_warnings) = "off"
        {
          flags +=
            <cxxflags>"-Wno-covered-switch-default"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-Wcovered-switch-default"
          ;
        }
      }
    }
    if $(x_unsafe_buffer_usage_warnings) != "default"
    {
      if ( ( $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1600000 ] ) || ( $(JLN_NORMALIZED_CXX_COMP) = "clang-cl" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1600000 ] ) )
      {
        if $(x_unsafe_buffer_usage_warnings) = "off"
        {
          flags +=
            <cxxflags>"-Wno-unsafe-buffer-usage"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-Wunsafe-buffer-usage"
          ;
        }
      }
    }
    if $(x_shadow_warnings) != "default"
    {
      if $(x_shadow_warnings) = "off"
      {
        flags +=
          <cxxflags>"-Wno-shadow"
        ;
        if ( ( $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ] ) || ( $(JLN_NORMALIZED_CXX_COMP) = "clang-cl" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ] ) )
        {
          flags +=
            <cxxflags>"-Wno-shadow-field"
          ;
        }
      }
      else
      {
        if $(x_shadow_warnings) = "on"
        {
          flags +=
            <cxxflags>"-Wshadow"
          ;
        }
        else
        {
          if $(x_shadow_warnings) = "all"
          {
            if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
            {
              flags +=
                <cxxflags>"-Wshadow"
              ;
            }
            else
            {
              flags +=
                <cxxflags>"-Wshadow-all"
              ;
            }
          }
          else
          {
            if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 700001 ] )
            {
              if $(x_shadow_warnings) = "local"
              {
                flags +=
                  <cxxflags>"-Wshadow=local"
                ;
              }
              else
              {
                flags +=
                  <cxxflags>"-Wshadow=compatible-local"
                ;
              }
            }
          }
        }
      }
    }
    if $(x_suggest_attributes) != "default"
    {
      if $(x_suggest_attributes) = "on"
      {
        flags +=
          <cxxflags>"-Wmissing-noreturn"
        ;
      }
      else
      {
        if $(x_suggest_attributes) = "common"
        {
          flags +=
            <cxxflags>"-Wmissing-noreturn"
            <cxxflags>"-Wmissing-format-attribute"
          ;
        }
        else
        {
          if ( $(x_suggest_attributes) = "analysis" || $(x_suggest_attributes) = "all" )
          {
            flags +=
              <cxxflags>"-Wmissing-noreturn"
              <cxxflags>"-Wmissing-format-attribute"
            ;
            if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
            {
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ]
              {
                flags +=
                  <cxxflags>"-Wsuggest-attribute=malloc"
                ;
                if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1400000 ]
                {
                  flags +=
                    <cxxflags>"-Wsuggest-attribute=returns_nonnull"
                  ;
                }
              }
              if ( $(x_suggest_attributes) = "all" || $(x_suggest_attributes) = "unity" )
              {
                if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 500000 ]
                {
                  flags +=
                    <cxxflags>"-Wsuggest-final-types"
                    <cxxflags>"-Wsuggest-final-methods"
                  ;
                }
                if $(x_suggest_attributes) = "all"
                {
                  flags +=
                    <cxxflags>"-Wsuggest-attribute=pure"
                    <cxxflags>"-Wsuggest-attribute=const"
                  ;
                  if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 500001 ]
                  {
                    flags +=
                      <cxxflags>"-Wnoexcept"
                    ;
                    if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ]
                    {
                      flags +=
                        <cxxflags>"-Wsuggest-attribute=cold"
                      ;
                    }
                  }
                }
              }
            }
          }
          else
          {
            flags +=
              <cxxflags>"-Wno-missing-noreturn"
              <cxxflags>"-Wno-missing-format-attribute"
            ;
            if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
            {
              flags +=
                <cxxflags>"-Wno-suggest-attribute=pure"
                <cxxflags>"-Wno-suggest-attribute=const"
              ;
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 500000 ]
              {
                flags +=
                  <cxxflags>"-Wno-suggest-final-types"
                  <cxxflags>"-Wno-suggest-final-methods"
                ;
                if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 500001 ]
                {
                  flags +=
                    <cxxflags>"-Wno-noexcept"
                  ;
                  if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ]
                  {
                    flags +=
                      <cxxflags>"-Wno-suggest-attribute=malloc"
                    ;
                    if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1400000 ]
                    {
                      flags +=
                        <cxxflags>"-Wno-suggest-attribute=returns_nonnull"
                      ;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if $(x_var_init) != "default"
    {
      if ( ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1200000 ] ) || ( $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ] ) || ( $(JLN_NORMALIZED_CXX_COMP) = "clang-cl" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ] ) )
      {
        if ( ( $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) && ! [ numbers.less 1500000 $(JLN_NORMALIZED_CXX_COMP_VERSION) ] ) || ( $(JLN_NORMALIZED_CXX_COMP) = "clang-cl" && ! [ numbers.less 1500000 $(JLN_NORMALIZED_CXX_COMP_VERSION) ] ) )
        {
          if $(x_var_init) = "zero"
          {
            flags +=
              <cxxflags>"-enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang"
            ;
          }
        }
        if $(x_var_init) = "pattern"
        {
          flags +=
            <cxxflags>"-ftrivial-auto-var-init=pattern"
          ;
          if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
          {
            flags +=
              <cxxflags>"-Wtrivial-auto-var-init"
            ;
          }
        }
        else
        {
          if $(x_var_init) = "zero"
          {
            flags +=
              <cxxflags>"-ftrivial-auto-var-init=zero"
            ;
            if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
            {
              flags +=
                <cxxflags>"-Wtrivial-auto-var-init"
              ;
            }
          }
          else
          {
            flags +=
              <cxxflags>"-ftrivial-auto-var-init=uninitialized"
            ;
          }
        }
      }
    }
    if $(x_windows_abi_compatibility_warnings) != "default"
    {
      if ( ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1000000 ] ) || $(JLN_NORMALIZED_CXX_COMP) != "gcc" )
      {
        if $(x_windows_abi_compatibility_warnings) = "on"
        {
          flags +=
            <cxxflags>"-Wmismatched-tags"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-Wno-mismatched-tags"
          ;
        }
      }
    }
    if $(x_reproducible_build_warnings) != "default"
    {
      if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400009 ] )
      {
        if $(x_reproducible_build_warnings) = "on"
        {
          flags +=
            <cxxflags>"-Wdate-time"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-Wno-date-time"
          ;
        }
      }
    }
    if $(x_warnings_as_error) != "default"
    {
      if $(x_warnings_as_error) = "on"
      {
        flags +=
          <cxxflags>"-Werror"
        ;
      }
      else
      {
        if $(x_warnings_as_error) = "basic"
        {
          flags +=
            <cxxflags>"-Werror=return-type"
            <cxxflags>"-Werror=init-self"
          ;
          if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
          {
            flags +=
              <cxxflags>"-Werror=div-by-zero"
            ;
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 500001 ]
            {
              flags +=
                <cxxflags>"-Werror=array-bounds"
                <cxxflags>"-Werror=logical-op"
                <cxxflags>"-Werror=logical-not-parentheses"
              ;
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 700000 ]
              {
                flags +=
                  <cxxflags>"-Werror=literal-suffix"
                ;
              }
            }
          }
          else
          {
            flags +=
              <cxxflags>"-Werror=array-bounds"
              <cxxflags>"-Werror=division-by-zero"
            ;
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 300004 ]
            {
              flags +=
                <cxxflags>"-Werror=logical-not-parentheses"
              ;
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 300006 ]
              {
                flags +=
                  <cxxflags>"-Werror=delete-incomplete"
                ;
                if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 600000 ]
                {
                  flags +=
                    <cxxflags>"-Werror=user-defined-literals"
                  ;
                  if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 700000 ]
                  {
                    flags +=
                      <cxxflags>"-Werror=dynamic-class-memaccess"
                    ;
                  }
                }
              }
            }
          }
        }
        else
        {
          flags +=
            <cxxflags>"-Wno-error"
          ;
        }
      }
    }
    if $(x_control_flow) != "default"
    {
      if $(JLN_NORMALIZED_CXX_COMP) = "clang-emcc"
      {
        if $(x_control_flow) = "off"
        {
          flags +=
            <linkflags>"-sASSERTIONS=0"
            <linkflags>"-sSAFE_HEAP=0"
          ;
        }
        else
        {
          flags +=
            <linkflags>"-sASSERTIONS=1"
            <linkflags>"-sDEMANGLE_SUPPORT=1"
          ;
          if $(x_sanitizers) != "default" && ! ( $(x_sanitizers) = "on" || $(x_sanitizers) = "extra" || $(x_sanitizers) = "address" )
          {
            flags +=
              <linkflags>"-sSAFE_HEAP=1"
            ;
          }
        }
      }
      else
      {
        if $(x_control_flow) = "off"
        {
          if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ] )
          {
            flags +=
              <cxxflags>"-fcf-protection=none"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"-fno-sanitize=cfi"
              <cxxflags>"-fcf-protection=none"
              <cxxflags>"-fno-sanitize-cfi-cross-dso"
              <linkflags>"-fno-sanitize=cfi"
            ;
          }
        }
        else
        {
          if ( ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ] ) || $(JLN_NORMALIZED_CXX_COMP) != "gcc" )
          {
            if $(x_control_flow) = "branch"
            {
              flags +=
                <cxxflags>"-fcf-protection=branch"
              ;
            }
            else
            {
              if $(x_control_flow) = "return"
              {
                flags +=
                  <cxxflags>"-fcf-protection=return"
                ;
              }
              else
              {
                flags +=
                  <cxxflags>"-fcf-protection=full"
                ;
              }
            }
            if ( $(x_control_flow) = "allow-bugs" && $(JLN_NORMALIZED_CXX_COMP) = "clang" )
            {
              flags +=
                <cxxflags>"-fsanitize=cfi"
                <linkflags>"-fsanitize=cfi"
              ;
              if $(JLN_NORMALIZED_CXX_COMP) != "clang-cl"
              {
                flags +=
                  <cxxflags>"-fvisibility=hidden"
                ;
              }
              flags +=
                <cxxflags>"-flto"
                <linkflags>"-flto"
              ;
            }
          }
        }
      }
    }
    if $(x_color) != "default"
    {
      if ( ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400009 ] || $(JLN_NORMALIZED_CXX_COMP) != "gcc" )
      {
        if $(x_color) = "auto"
        {
          flags +=
            <cxxflags>"-fdiagnostics-color=auto"
          ;
        }
        else
        {
          if $(x_color) = "never"
          {
            flags +=
              <cxxflags>"-fdiagnostics-color=never"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"-fdiagnostics-color=always"
            ;
          }
        }
      }
    }
    if $(x_lto) != "default"
    {
      if $(x_lto) = "off"
      {
        flags +=
          <cxxflags>"-fno-lto"
          <linkflags>"-fno-lto"
        ;
        if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
        {
          flags +=
            <cxxflags>"-fno-whole-program"
          ;
        }
      }
      else
      {
        if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
        {
          if $(x_lto) != "thin-or-nothing"
          {
            if ( $(x_lto) = "whole-program" || $(x_lto) = "whole-program-and-full-lto" )
            {
              flags +=
                <cxxflags>"-fwhole-program"
              ;
            }
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1000000 ]
            {
              flags +=
                <cxxflags>"-flto=auto"
                <linkflags>"-flto=auto"
              ;
            }
            else
            {
              flags +=
                <cxxflags>"-flto"
                <linkflags>"-flto"
              ;
            }
          }
        }
        else
        {
          if ( ( $(x_lto) = "on" || $(x_lto) = "thin-or-nothing" || $(x_lto) = "whole-program" ) && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400000 ] )
          {
            flags +=
              <cxxflags>"-flto=thin"
              <linkflags>"-flto=thin"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"-flto"
              <linkflags>"-flto"
            ;
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1000000 ]
            {
              flags +=
                <cxxflags>"-fvirtual-function-elimination"
                <linkflags>"-fvirtual-function-elimination"
              ;
            }
          }
          if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 300009 ]
          {
            if ( $(x_lto) = "whole-program" || $(x_lto) = "whole-program-and-full-lto" )
            {
              flags +=
                <cxxflags>"-fwhole-program-vtables"
                <linkflags>"-fwhole-program-vtables"
              ;
            }
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 700000 ]
            {
              flags +=
                <cxxflags>"-fforce-emit-vtables"
                <linkflags>"-fforce-emit-vtables"
              ;
            }
          }
        }
      }
    }
    if $(x_stl_hardening) != "default"
    {
      if $(x_stl_hardening) != "off"
      {
        if $(x_stl_hardening) = "fast"
        {
          if $(JLN_NORMALIZED_CXX_COMP) != "clang-cl"
          {
            flags +=
              <cxxflags>"-D_GLIBCXX_ASSERTIONS"
            ;
          }
          flags +=
            <cxxflags>"-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_FAST"
          ;
        }
        else
        {
          if $(x_stl_hardening) = "extensive"
          {
            if $(JLN_NORMALIZED_CXX_COMP) != "clang-cl"
            {
              flags +=
                <cxxflags>"-D_GLIBCXX_ASSERTIONS"
              ;
            }
            flags +=
              <cxxflags>"-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_EXTENSIVE"
            ;
          }
          else
          {
            if $(x_stl_hardening) = "debug"
            {
              if $(JLN_NORMALIZED_CXX_COMP) != "clang-cl"
              {
                flags +=
                  <cxxflags>"-D_GLIBCXX_ASSERTIONS"
                ;
              }
              flags +=
                <cxxflags>"-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_DEBUG"
              ;
            }
            else
            {
              if $(JLN_NORMALIZED_CXX_COMP) != "clang-cl"
              {
                flags +=
                  <cxxflags>"-D_GLIBCXX_DEBUG"
                ;
                if $(x_pedantic) != "default" && ! ( $(x_pedantic) = "off" )
                {
                  flags +=
                    <cxxflags>"-D_GLIBCXX_DEBUG_PEDANTIC"
                  ;
                }
              }
              if ( $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) && [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1800000 ] )
              {
                if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ]
                {
                  flags +=
                    <cxxflags>"-D_LIBCPP_DEBUG=1"
                  ;
                }
              }
              else
              {
                flags +=
                  <cxxflags>"-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_DEBUG"
                  <cxxflags>"-D_LIBCPP_ABI_BOUNDED_ITERATORS"
                  <cxxflags>"-D_LIBCPP_ABI_BOUNDED_ITERATORS_IN_STRING"
                  <cxxflags>"-D_LIBCPP_ABI_BOUNDED_ITERATORS_IN_VECTOR"
                  <cxxflags>"-D_LIBCPP_ABI_BOUNDED_UNIQUE_PTR"
                  <cxxflags>"-D_LIBCPP_ABI_BOUNDED_ITERATORS_IN_STD_ARRAY"
                ;
              }
            }
          }
        }
      }
    }
    if $(x_sanitizers) != "default"
    {
      if ( ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400008 ] ) || ( $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 300002 ] ) || ( $(JLN_NORMALIZED_CXX_COMP) = "clang-cl" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400000 ] ) )
      {
        if $(x_sanitizers) = "off"
        {
          flags +=
            <cxxflags>"-fno-sanitize=all"
            <linkflags>"-fno-sanitize=all"
          ;
        }
        else
        {
          if $(x_sanitizers) = "thread"
          {
            flags +=
              <cxxflags>"-fsanitize=thread"
              <linkflags>"-fsanitize=thread"
            ;
          }
          else
          {
            if $(x_sanitizers) = "undefined"
            {
              flags +=
                <cxxflags>"-fsanitize=undefined"
                <linkflags>"-fsanitize=undefined"
              ;
            }
            else
            {
              if $(x_sanitizers) = "undefined-minimal-runtime"
              {
                flags +=
                  <cxxflags>"-fsanitize=undefined"
                  <linkflags>"-fsanitize=undefined"
                ;
                if ( ( $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) || $(JLN_NORMALIZED_CXX_COMP) = "clang-cl" ) && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 600000 ] )
                {
                  flags +=
                    <cxxflags>"-fsanitize-minimal-runtime"
                    <linkflags>"-fsanitize-minimal-runtime"
                  ;
                }
              }
              else
              {
                if $(x_sanitizers) = "scudo-hardened-allocator"
                {
                  if ( $(JLN_NORMALIZED_CXX_COMP) = "clang" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1300000 ] )
                  {
                    flags +=
                      <cxxflags>"-fsanitize=scudo"
                      <linkflags>"-fsanitize=scudo"
                    ;
                  }
                }
                else
                {
                  flags +=
                    <cxxflags>"-fno-omit-frame-pointer"
                    <cxxflags>"-fno-optimize-sibling-calls"
                  ;
                  if ( $(x_sanitizers) = "on" || $(x_sanitizers) = "extra" || $(x_sanitizers) = "address" )
                  {
                    flags +=
                      <cxxflags>"-fsanitize=address"
                      <linkflags>"-fsanitize=address"
                    ;
                  }
                  else
                  {
                    flags +=
                      <cxxflags>"-fsanitize=kernel-address"
                      <linkflags>"-fsanitize=kernel-address"
                    ;
                  }
                  if ( $(x_sanitizers) = "on" || $(x_sanitizers) = "extra" || $(x_sanitizers) = "kernel" || $(x_sanitizers) = "kernel-extra" )
                  {
                    if ( ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400009 ] ) || $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) || $(JLN_NORMALIZED_CXX_COMP) = "clang-cl" )
                    {
                      flags +=
                        <cxxflags>"-fsanitize=undefined"
                        <linkflags>"-fsanitize=undefined"
                      ;
                    }
                    if ( $(x_sanitizers) = "extra" || $(x_sanitizers) = "kernel-extra" )
                    {
                      if ( ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ] ) || ( $(JLN_NORMALIZED_CXX_COMP) = "clang" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 900000 ] ) || ( $(JLN_NORMALIZED_CXX_COMP) = "clang-cl" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 900000 ] ) )
                      {
                        flags +=
                          <cxxflags>"-fsanitize=pointer-compare"
                          <cxxflags>"-fsanitize=pointer-subtract"
                        ;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if $(x_conversion_warnings) != "default"
  {
    if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" || $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) || $(JLN_NORMALIZED_CXX_COMP) = "clang-cl" || $(JLN_NORMALIZED_CXX_COMP) = "intel' && $(original_version) = 'linux" )
    {
      if $(x_conversion_warnings) = "on"
      {
        flags +=
          <cxxflags>"-Wconversion"
          <cxxflags>"-Wsign-compare"
          <cxxflags>"-Wsign-conversion"
        ;
      }
      else
      {
        if $(x_conversion_warnings) = "conversion"
        {
          flags +=
            <cxxflags>"-Wconversion"
          ;
        }
        else
        {
          if $(x_conversion_warnings) = "float"
          {
            if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
            {
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400009 ]
              {
                flags +=
                  <cxxflags>"-Wfloat-conversion"
                ;
              }
            }
            else
            {
              flags +=
                <cxxflags>"-Wfloat-conversion"
              ;
            }
          }
          else
          {
            if $(x_conversion_warnings) = "sign"
            {
              flags +=
                <cxxflags>"-Wsign-compare"
                <cxxflags>"-Wsign-conversion"
              ;
            }
            else
            {
              if $(x_conversion_warnings) = "all"
              {
                flags +=
                  <cxxflags>"-Wconversion"
                ;
                if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
                {
                  flags +=
                    <cxxflags>"-Warith-conversion"
                  ;
                }
              }
              else
              {
                flags +=
                  <cxxflags>"-Wno-conversion"
                  <cxxflags>"-Wno-sign-compare"
                  <cxxflags>"-Wno-sign-conversion"
                ;
              }
            }
          }
        }
      }
    }
  }
  if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" || $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) )
  {
    if $(x_diagnostics_show_template) != "default"
    {
      if ( $(x_diagnostics_show_template) = "tree-without-elided-types" || $(x_diagnostics_show_template) = "tree" )
      {
        if ( ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ] ) || $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) )
        {
          flags +=
            <cxxflags>"-fdiagnostics-show-template-tree"
          ;
        }
      }
      if ( $(x_diagnostics_show_template) = "tree-without-elided-types" || $(x_diagnostics_show_template) = "without-elided-types" )
      {
        if ( ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ] ) || ( $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 300004 ] ) )
        {
          flags +=
            <cxxflags>"-fno-elide-type"
          ;
        }
      }
    }
    if $(x_exceptions) != "default"
    {
      if $(x_exceptions) = "on"
      {
        flags +=
          <cxxflags>"-fexceptions"
        ;
        if $(JLN_NORMALIZED_CXX_COMP) = "clang-emcc"
        {
          flags +=
            <cxxflags>"-sDISABLE_EXCEPTION_CATCHING=0"
          ;
        }
      }
      else
      {
        flags +=
          <cxxflags>"-fno-exceptions"
        ;
      }
    }
    if $(x_rtti) != "default"
    {
      if $(x_rtti) = "on"
      {
        flags +=
          <cxxflags>"-frtti"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"-fno-rtti"
        ;
      }
    }
    if $(x_diagnostics_format) != "default"
    {
      if $(x_diagnostics_format) = "fixits"
      {
        if ( ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 700000 ] ) || ( $(JLN_NORMALIZED_CXX_COMP) != "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 500000 ] ) )
        {
          flags +=
            <cxxflags>"-fdiagnostics-parseable-fixits"
          ;
        }
      }
      else
      {
        if $(x_diagnostics_format) = "patch"
        {
          if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 700000 ] )
          {
            flags +=
              <cxxflags>"-fdiagnostics-generate-patch"
            ;
          }
        }
        else
        {
          if $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE)
          {
            flags +=
              <cxxflags>"-fdiagnostics-print-source-range-info"
            ;
          }
        }
      }
    }
    if $(x_pedantic) != "default"
    {
      if $(x_pedantic) != "off"
      {
        flags +=
          <cxxflags>"-pedantic"
        ;
        if $(x_pedantic) = "as-error"
        {
          flags +=
            <cxxflags>"-pedantic-errors"
            <cxxflags>"-Werror=write-strings"
          ;
          if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
          {
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400007 ]
            {
              flags +=
                <cxxflags>"-Werror=narrowing"
              ;
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 700001 ]
              {
                flags +=
                  <cxxflags>"-Werror=literal-suffix"
                ;
              }
            }
          }
        }
      }
    }
    if $(x_symbols) != "default"
    {
      if $(x_symbols) = "hidden"
      {
        flags +=
          <cxxflags>"-fvisibility=hidden"
        ;
      }
      else
      {
        if $(x_symbols) = "strip-all"
        {
          flags +=
            <linkflags>"-s"
          ;
        }
        else
        {
          if $(x_symbols) = "gc-sections"
          {
            if $(linker) = 'ld64'
            {
              flags +=
                <linkflags>"-Wl,-S"
                <linkflags>"-Wl,-dead_strip"
              ;
            }
            flags +=
              <linkflags>"-s"
              <linkflags>"-Wl,--gc-sections"
            ;
          }
          else
          {
            if $(x_symbols) = "nodebug"
            {
              flags +=
                <cxxflags>"-g0"
              ;
            }
            else
            {
              if $(x_symbols) = "debug"
              {
                flags +=
                  <cxxflags>"-g"
                ;
              }
              else
              {
                if $(x_symbols) = "minimal-debug"
                {
                  flags +=
                    <cxxflags>"-g1"
                  ;
                }
                else
                {
                  if $(x_symbols) = "full-debug"
                  {
                    flags +=
                      <cxxflags>"-g3"
                    ;
                  }
                  else
                  {
                    if $(JLN_NORMALIZED_CXX_COMP) = "clang"
                    {
                      if $(x_symbols) = "dwarf"
                      {
                        flags +=
                          <cxxflags>"-g"
                        ;
                      }
                      if $(x_symbols) = "lldb"
                      {
                        flags +=
                          <cxxflags>"-glldb"
                        ;
                      }
                      if $(x_symbols) = "sce"
                      {
                        flags +=
                          <cxxflags>"-gsce"
                        ;
                      }
                      if $(x_symbols) = "dbx"
                      {
                        flags +=
                          <cxxflags>"-gdbx"
                        ;
                      }
                    }
                    else
                    {
                      if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
                      {
                        if $(x_symbols) = "dwarf"
                        {
                          flags +=
                            <cxxflags>"-g"
                          ;
                        }
                        if $(x_symbols) = "codeview"
                        {
                          flags +=
                            <cxxflags>"-gcodeview"
                          ;
                        }
                        if $(x_symbols) = "btf"
                        {
                          flags +=
                            <cxxflags>"-gbtf"
                          ;
                        }
                        if $(x_symbols) = "ctf"
                        {
                          flags +=
                            <cxxflags>"-gctf"
                          ;
                        }
                        if $(x_symbols) = "ctf1"
                        {
                          flags +=
                            <cxxflags>"-gctf1"
                          ;
                        }
                        if $(x_symbols) = "ctf2"
                        {
                          flags +=
                            <cxxflags>"-gctf2"
                          ;
                        }
                        if $(x_symbols) = "vms"
                        {
                          flags +=
                            <cxxflags>"-gvms"
                          ;
                        }
                        if $(x_symbols) = "vms1"
                        {
                          flags +=
                            <cxxflags>"-gvms1"
                          ;
                        }
                        if $(x_symbols) = "vms2"
                        {
                          flags +=
                            <cxxflags>"-gvms2"
                          ;
                        }
                        if $(x_symbols) = "vms3"
                        {
                          flags +=
                            <cxxflags>"-gvms3"
                          ;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if $(JLN_NORMALIZED_CXX_COMP) = "clang-emcc"
    {
      if $(x_optimization) != "default"
      {
        if $(x_optimization) = "0"
        {
          flags +=
            <cxxflags>"-O0"
            <linkflags>"-O0"
          ;
        }
        else
        {
          if $(x_optimization) = "g"
          {
            flags +=
              <cxxflags>"-Og"
              <linkflags>"-Og"
            ;
          }
          else
          {
            if $(x_optimization) = "1"
            {
              flags +=
                <cxxflags>"-O1"
                <linkflags>"-O1"
              ;
            }
            else
            {
              if $(x_optimization) = "2"
              {
                flags +=
                  <cxxflags>"-O2"
                  <linkflags>"-O2"
                ;
              }
              else
              {
                if $(x_optimization) = "3"
                {
                  flags +=
                    <cxxflags>"-O3"
                    <linkflags>"-O3"
                  ;
                }
                else
                {
                  if $(x_optimization) = "fast"
                  {
                    flags +=
                      <cxxflags>"-O3"
                      <cxxflags>"-mnontrapping-fptoint"
                      <linkflags>"-O3"
                      <linkflags>"-mnontrapping-fptoint"
                    ;
                  }
                  else
                  {
                    if $(x_optimization) = "size"
                    {
                      flags +=
                        <cxxflags>"-Os"
                        <linkflags>"-Os"
                      ;
                    }
                    else
                    {
                      flags +=
                        <cxxflags>"-Oz"
                        <linkflags>"-Oz"
                      ;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1200000 ] )
      {
        flags +=
          <cxxflags>"-ffold-simple-inlines"
        ;
      }
      if $(x_coverage) != "default"
      {
        if $(x_coverage) = "on"
        {
          flags +=
            <cxxflags>"--coverage"
            <linkflags>"--coverage"
          ;
          if $(JLN_NORMALIZED_CXX_COMP) = "clang"
          {
            flags +=
              <linkflags>"-lprofile_rt"
            ;
          }
        }
      }
      if $(x_optimization) != "default"
      {
        if $(x_optimization) = "0"
        {
          flags +=
            <cxxflags>"-O0"
          ;
        }
        else
        {
          if $(x_optimization) = "g"
          {
            flags +=
              <cxxflags>"-Og"
            ;
          }
          else
          {
            flags +=
              <linkflags>"-Wl,-O1"
            ;
            if $(x_optimization) = "1"
            {
              flags +=
                <cxxflags>"-O1"
              ;
            }
            else
            {
              if $(x_optimization) = "2"
              {
                flags +=
                  <cxxflags>"-O2"
                ;
              }
              else
              {
                if $(x_optimization) = "3"
                {
                  flags +=
                    <cxxflags>"-O3"
                  ;
                }
                else
                {
                  if $(x_optimization) = "size"
                  {
                    flags +=
                      <cxxflags>"-Os"
                    ;
                  }
                  else
                  {
                    if $(x_optimization) = "z"
                    {
                      if ( $(JLN_NORMALIZED_CXX_COMP) = "clang" || ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1200000 ] ) )
                      {
                        flags +=
                          <cxxflags>"-Oz"
                        ;
                      }
                      else
                      {
                        flags +=
                          <cxxflags>"-Os"
                        ;
                      }
                    }
                    else
                    {
                      if $(JLN_NORMALIZED_CXX_COMP) = "clang"
                      {
                        flags +=
                          <cxxflags>"-O3"
                          <cxxflags>"-ffast-math"
                        ;
                      }
                      else
                      {
                        flags +=
                          <cxxflags>"-Ofast"
                        ;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if $(x_cpu) != "default"
      {
        if $(x_cpu) = "generic"
        {
          flags +=
            <cxxflags>"-mtune=generic"
            <linkflags>"-mtune=generic"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-march=native"
            <cxxflags>"-mtune=native"
            <linkflags>"-march=native"
            <linkflags>"-mtune=native"
          ;
        }
      }
      if $(x_linker) != "default"
      {
        if $(x_linker) = "mold"
        {
          flags +=
            <linkflags>"-fuse-ld=mold"
          ;
        }
        else
        {
          if $(x_linker) = "native"
          {
            if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
            {
              flags +=
                <linkflags>"-fuse-ld=gold"
              ;
            }
            else
            {
              flags +=
                <linkflags>"-fuse-ld=lld"
              ;
            }
          }
          else
          {
            if $(x_linker) = "bfd"
            {
              flags +=
                <linkflags>"-fuse-ld=bfd"
              ;
            }
            else
            {
              if ( $(x_linker) = "gold" || ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 900000 ] ) )
              {
                flags +=
                  <linkflags>"-fuse-ld=gold"
                ;
              }
              else
              {
                flags +=
                  <linkflags>"-fuse-ld=lld"
                ;
              }
            }
          }
        }
      }
      if $(x_stack_protector) != "default"
      {
        if $(x_stack_protector) = "off"
        {
          flags +=
            <cxxflags>"-Wno-stack-protector"
            <cxxflags>"-U_FORTIFY_SOURCE"
            <linkflags>"-Wno-stack-protector"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-Wstack-protector"
          ;
          if ( ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1200000 ] ) || ( $(JLN_NORMALIZED_CXX_COMP) = "clang" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1400000 ] ) )
          {
            flags +=
              <cxxflags>"-D_FORTIFY_SOURCE=3"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"-D_FORTIFY_SOURCE=2"
            ;
          }
          if $(x_stack_protector) = "strong"
          {
            if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
            {
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400009 ]
              {
                flags +=
                  <cxxflags>"-fstack-protector-strong"
                  <linkflags>"-fstack-protector-strong"
                ;
                if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ]
                {
                  flags +=
                    <cxxflags>"-fstack-clash-protection"
                    <linkflags>"-fstack-clash-protection"
                  ;
                }
              }
            }
            else
            {
              flags +=
                <cxxflags>"-fstack-protector-strong"
                <cxxflags>"-fsanitize=safe-stack"
                <linkflags>"-fstack-protector-strong"
                <linkflags>"-fsanitize=safe-stack"
              ;
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1100000 ]
              {
                flags +=
                  <cxxflags>"-fstack-clash-protection"
                  <linkflags>"-fstack-clash-protection"
                ;
              }
            }
          }
          else
          {
            if $(x_stack_protector) = "all"
            {
              flags +=
                <cxxflags>"-fstack-protector-all"
                <linkflags>"-fstack-protector-all"
              ;
              if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ] )
              {
                flags +=
                  <cxxflags>"-fstack-clash-protection"
                  <linkflags>"-fstack-clash-protection"
                ;
              }
              else
              {
                flags +=
                  <cxxflags>"-fsanitize=safe-stack"
                  <linkflags>"-fsanitize=safe-stack"
                ;
                if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1100000 ]
                {
                  flags +=
                    <cxxflags>"-fstack-clash-protection"
                    <linkflags>"-fstack-clash-protection"
                  ;
                }
              }
            }
            else
            {
              flags +=
                <cxxflags>"-fstack-protector"
                <linkflags>"-fstack-protector"
              ;
            }
          }
          if $(JLN_NORMALIZED_CXX_COMP) = "clang"
          {
            flags +=
              <cxxflags>"-fsanitize=shadow-call-stack"
              <linkflags>"-fsanitize=shadow-call-stack"
            ;
          }
        }
      }
      if $(x_relro) != "default"
      {
        if $(x_relro) = "off"
        {
          flags +=
            <linkflags>"-Wl,-z,norelro"
          ;
        }
        else
        {
          if $(x_relro) = "on"
          {
            flags +=
              <linkflags>"-Wl,-z,relro"
            ;
          }
          else
          {
            flags +=
              <linkflags>"-Wl,-z,relro,-z,now,-z,noexecstack"
            ;
            if $(x_linker) != "default"
            {
              if ! ( ( $(x_linker) = "gold" || ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 900000 ] ) || ( $(x_linker) = "native" && $(JLN_NORMALIZED_CXX_COMP) = "gcc" ) ) )
              {
                flags +=
                  <linkflags>"-Wl,-z,separate-code"
                ;
              }
            }
          }
        }
      }
      if $(x_pie) != "default"
      {
        if $(x_pie) = "off"
        {
          flags +=
            <linkflags>"-no-pic"
          ;
        }
        else
        {
          if $(x_pie) = "on"
          {
            flags +=
              <linkflags>"-pie"
            ;
          }
          else
          {
            if $(x_pie) = "fpie"
            {
              flags +=
                <cxxflags>"-fpie"
              ;
            }
            else
            {
              if $(x_pie) = "fpic"
              {
                flags +=
                  <cxxflags>"-fpic"
                ;
              }
              else
              {
                if $(x_pie) = "fPIE"
                {
                  flags +=
                    <cxxflags>"-fPIE"
                  ;
                }
                else
                {
                  if $(x_pie) = "fPIC"
                  {
                    flags +=
                      <cxxflags>"-fPIC"
                    ;
                  }
                  else
                  {
                    flags +=
                      <linkflags>"-static-pie"
                    ;
                  }
                }
              }
            }
          }
        }
      }
      if $(x_noexcept_warnings) != "default"
      {
        if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400006 ] )
        {
          if $(x_noexcept_warnings) = "on"
          {
            flags +=
              <cxxflags>"-Wnoexcept"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"-Wno-noexcept"
            ;
          }
        }
      }
      if $(x_analyzer) != "default"
      {
        if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1000000 ] )
        {
          if $(x_analyzer) = "off"
          {
            flags +=
              <cxxflags>"-fno-analyzer"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"-fanalyzer"
            ;
            if $(x_analyzer_too_complex_warning) != "default"
            {
              if $(x_analyzer_too_complex_warning) = "on"
              {
                flags +=
                  <cxxflags>"-Wanalyzer-too-complex"
                ;
              }
              else
              {
                flags +=
                  <cxxflags>"-Wno-analyzer-too-complex"
                ;
              }
            }
            if $(x_analyzer_verbosity) != "default"
            {
              if $(x_analyzer_verbosity) = "0"
              {
                flags +=
                  <cxxflags>"-fanalyzer-verbosity=0"
                ;
              }
              else
              {
                if $(x_analyzer_verbosity) = "1"
                {
                  flags +=
                    <cxxflags>"-fanalyzer-verbosity=1"
                  ;
                }
                else
                {
                  if $(x_analyzer_verbosity) = "2"
                  {
                    flags +=
                      <cxxflags>"-fanalyzer-verbosity=2"
                    ;
                  }
                  else
                  {
                    flags +=
                      <cxxflags>"-fanalyzer-verbosity=3"
                    ;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if ( $(JLN_NORMALIZED_CXX_COMP) = "msvc" || $(JLN_NORMALIZED_CXX_COMP) = "clang-cl" || $(JLN_NORMALIZED_CXX_COMP) = "intel' && $(original_version) = 'windows" )
  {
    if $(x_exceptions) != "default"
    {
      if $(x_exceptions) = "on"
      {
        flags +=
          <cxxflags>"/EHsc"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/EHs-c-"
        ;
      }
    }
    if $(x_rtti) != "default"
    {
      if $(x_rtti) = "on"
      {
        flags +=
          <cxxflags>"/GR"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/GR-"
        ;
      }
    }
    if $(x_stl_hardening) != "default"
    {
      if $(x_stl_hardening) = "off"
      {
        flags +=
          <cxxflags>"/D_MSVC_STL_HARDENING=0"
          <cxxflags>"/D_MSVC_STL_DESTRUCTOR_TOMBSTONES=0"
          <cxxflags>"/D_ITERATOR_DEBUG_LEVEL=0"
          <cxxflags>"/D_HAS_ITERATOR_DEBUGGING=0"
          <cxxflags>"/D_SECURE_SCL=0"
        ;
      }
      else
      {
        if ( $(x_stl_hardening) = "fast" || $(x_stl_hardening) = "extensive" )
        {
          flags +=
            <cxxflags>"/D_MSVC_STL_HARDENING=1"
          ;
        }
        else
        {
          if $(x_stl_hardening) = "debug"
          {
            flags +=
              <cxxflags>"/D_MSVC_STL_HARDENING=1"
              <cxxflags>"/D_MSVC_STL_DESTRUCTOR_TOMBSTONES=1"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"/D_DEBUG"
              <cxxflags>"/D_MSVC_STL_HARDENING=1"
              <cxxflags>"/D_MSVC_STL_DESTRUCTOR_TOMBSTONES=1"
            ;
          }
        }
      }
    }
    if $(x_stl_fix) != "default"
    {
      if $(x_stl_fix) = "on"
      {
        flags +=
          <cxxflags>"/DNOMINMAX"
        ;
      }
    }
    if $(JLN_NORMALIZED_CXX_COMP) != "intel' && $(original_version) = 'windows"
    {
      if $(x_symbols) != "default"
      {
        if $(x_symbols) = "nodebug"
        {
          flags +=
            <linkflags>"/DEBUG:NONE"
          ;
        }
        else
        {
          if ( $(x_symbols) = "debug" || $(x_symbols) = "minimal-debug" || $(x_symbols) = "full-debug" || $(x_symbols) = "codeview" )
          {
            flags +=
              <cxxflags>"/Zi"
              <linkflags>"/DEBUG:FULL"
            ;
          }
          else
          {
            if $(JLN_NORMALIZED_CXX_COMP) = "clang-cl"
            {
              if $(x_symbols) = "dwarf"
              {
                flags +=
                  <linkflags>"-gdwarf"
                ;
              }
            }
          }
        }
      }
      if $(x_optimization) != "default"
      {
        if $(x_optimization) = "0"
        {
          flags +=
            <cxxflags>"/Od"
          ;
        }
        else
        {
          if $(x_optimization) = "g"
          {
            flags +=
              <cxxflags>"/Ob1"
            ;
          }
          else
          {
            if $(x_optimization) = "2"
            {
              flags +=
                <cxxflags>"/O2"
              ;
            }
            else
            {
              if ( $(x_optimization) = "1" || $(x_optimization) = "size" )
              {
                flags +=
                  <cxxflags>"/O1"
                ;
              }
              else
              {
                if $(x_optimization) = "z"
                {
                  flags +=
                    <cxxflags>"/O1"
                    <cxxflags>"/Gw"
                  ;
                }
                else
                {
                  if $(x_optimization) = "fast"
                  {
                    flags +=
                      <cxxflags>"/fp:fast"
                    ;
                  }
                  flags +=
                    <cxxflags>"/O2"
                  ;
                  if ( ( $(JLN_NORMALIZED_CXX_COMP) = "msvc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900020 ] ) || $(JLN_NORMALIZED_CXX_COMP) = "clang-cl" )
                  {
                    flags +=
                      <cxxflags>"/Ob3"
                    ;
                  }
                  flags +=
                    <cxxflags>"/Gw"
                  ;
                }
              }
            }
          }
        }
      }
      if $(x_control_flow) != "default"
      {
        if $(x_control_flow) = "off"
        {
          flags +=
            <cxxflags>"/guard:cf-"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/guard:cf"
          ;
        }
      }
      if $(x_stack_protector) != "default"
      {
        if $(x_stack_protector) = "off"
        {
          flags +=
            <cxxflags>"/GS-"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/GS"
            <cxxflags>"/sdl"
          ;
          if $(x_stack_protector) = "strong"
          {
            if ( $(JLN_NORMALIZED_CXX_COMP) = "msvc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900027 ] )
            {
              flags +=
                <cxxflags>"/guard:ehcont"
                <linkflags>"/CETCOMPAT"
              ;
            }
          }
          if $(x_control_flow) != "default" && ! ( $(x_control_flow) = "off" )
          {
            flags +=
              <cxxflags>"/guard:cf"
            ;
          }
        }
      }
    }
  }
  if $(JLN_NORMALIZED_CXX_COMP) = "msvc"
  {
    if $(x_analyzer) != "default"
    {
      if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900000 ]
      {
        if $(x_analyzer) = "off"
        {
          flags +=
            <cxxflags>"/analyze-"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/analyze"
          ;
          if $(x_analyzer) != "with-external-headers"
          {
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1600010 ]
            {
              flags +=
                <cxxflags>"/analyze:external-"
              ;
            }
          }
        }
      }
    }
    if $(x_windows_bigobj) != "default"
    {
      flags +=
        <cxxflags>"/bigobj"
      ;
    }
    if $(x_msvc_crt_secure_no_warnings) != "default"
    {
      if $(x_msvc_crt_secure_no_warnings) = "on"
      {
        flags +=
          <cxxflags>"/D_CRT_SECURE_NO_WARNINGS=1"
        ;
      }
      else
      {
        if $(x_msvc_crt_secure_no_warnings) = "off"
        {
          flags +=
            <cxxflags>"/U_CRT_SECURE_NO_WARNINGS"
          ;
        }
      }
    }
    if $(x_msvc_diagnostics_format) != "default"
    {
      if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900010 ]
      {
        if $(x_msvc_diagnostics_format) = "classic"
        {
          flags +=
            <cxxflags>"/diagnostics:classic"
          ;
        }
        else
        {
          if $(x_msvc_diagnostics_format) = "column"
          {
            flags +=
              <cxxflags>"/diagnostics:column"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"/diagnostics:caret"
            ;
          }
        }
      }
    }
    if [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900013 ]
    {
      x_msvc_isystem = "default" ;
    }
    if $(x_msvc_isystem) != "default"
    {
      if $(x_msvc_isystem) = "external-as-include-system-flag"
      {
        if [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900029 ]
        {
          # unimplementable
        }
        else
        {
          # unimplementable
        }
      }
      else
      {
        if $(x_msvc_isystem) != "assumed"
        {
          if [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900029 ]
          {
            flags +=
              <cxxflags>"/experimental:external"
            ;
          }
          flags +=
            <cxxflags>"/external:W0"
          ;
          if $(x_msvc_isystem) = "anglebrackets"
          {
            flags +=
              <cxxflags>"/external:anglebrackets"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"/external:env:INCLUDE"
              <cxxflags>"/external:env:CAExcludePath"
            ;
          }
        }
      }
      if $(x_msvc_isystem_with_template_instantiations_treated_as_non_external) != "default"
      {
        if $(x_msvc_isystem_with_template_instantiations_treated_as_non_external) = "off"
        {
          flags +=
            <cxxflags>"/external:templates"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/external:templates-"
          ;
        }
      }
    }
    if $(x_warnings) != "default"
    {
      if $(x_warnings) = "off"
      {
        flags +=
          <cxxflags>"/W0"
        ;
      }
      else
      {
        if $(x_warnings) = "essential"
        {
          flags +=
            <cxxflags>"/W4"
            <cxxflags>"/wd4711"
          ;
        }
        else
        {
          if $(x_warnings) = "on"
          {
            flags +=
              <cxxflags>"/W4"
              <cxxflags>"/wd4711"
            ;
            if $(x_msvc_isystem) = "default"
            {
              flags +=
                <cxxflags>"/w14263"
                <cxxflags>"/w14264"
              ;
            }
            flags +=
              <cxxflags>"/w14265"
              <cxxflags>"/w14296"
              <cxxflags>"/w14444"
              <cxxflags>"/w14555"
              <cxxflags>"/w14557"
              <cxxflags>"/w14608"
              <cxxflags>"/w14905"
              <cxxflags>"/w14906"
              <cxxflags>"/w14917"
              <cxxflags>"/w14928"
              <cxxflags>"/w14545"
              <cxxflags>"/w14546"
              <cxxflags>"/w14547"
              <cxxflags>"/w14548"
              <cxxflags>"/w14549"
              <cxxflags>"/w14822"
              <cxxflags>"/w14692"
            ;
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900000 ]
            {
              flags +=
                <cxxflags>"/w14426"
                <cxxflags>"/w14596"
              ;
              if $(x_msvc_isystem) = "default"
              {
                flags +=
                  <cxxflags>"/w14654"
                ;
              }
              flags +=
                <cxxflags>"/w15031"
                <cxxflags>"/w15032"
              ;
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900011 ]
              {
                flags +=
                  <cxxflags>"/w15038"
                ;
                if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900015 ]
                {
                  flags +=
                    <cxxflags>"/w14643"
                  ;
                  if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900022 ]
                  {
                    flags +=
                      <cxxflags>"/w14855"
                    ;
                    if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900025 ]
                    {
                      if $(x_msvc_isystem) = "default"
                      {
                        flags +=
                          <cxxflags>"/w15204"
                        ;
                      }
                      if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900029 ]
                      {
                        flags +=
                          <cxxflags>"/w15233"
                          <cxxflags>"/w15240"
                        ;
                        if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900030 ]
                        {
                          if $(x_msvc_isystem) = "default"
                          {
                            flags +=
                              <cxxflags>"/w15246"
                            ;
                          }
                          flags +=
                            <cxxflags>"/w15249"
                          ;
                          if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900032 ]
                          {
                            flags +=
                              <cxxflags>"/w15258"
                            ;
                            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900034 ]
                            {
                              flags +=
                                <cxxflags>"/w15263"
                              ;
                              if $(x_msvc_isystem) = "default"
                              {
                                flags +=
                                  <cxxflags>"/w15262"
                                ;
                              }
                              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900037 ]
                              {
                                flags +=
                                  <cxxflags>"/w15267"
                                ;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            flags +=
              <cxxflags>"/Wall"
              <cxxflags>"/wd4342"
              <cxxflags>"/wd4350"
              <cxxflags>"/wd4355"
              <cxxflags>"/wd4370"
              <cxxflags>"/wd4371"
              <cxxflags>"/wd4514"
              <cxxflags>"/wd4571"
              <cxxflags>"/wd4577"
              <cxxflags>"/wd4582"
              <cxxflags>"/wd4583"
              <cxxflags>"/wd4587"
              <cxxflags>"/wd4588"
              <cxxflags>"/wd4686"
              <cxxflags>"/wd4710"
              <cxxflags>"/wd4711"
              <cxxflags>"/wd4820"
              <cxxflags>"/wd4866"
              <cxxflags>"/wd4868"
              <cxxflags>"/wd5024"
              <cxxflags>"/wd5025"
              <cxxflags>"/wd5026"
              <cxxflags>"/wd5027"
              <cxxflags>"/wd5243"
            ;
            if $(x_msvc_isystem) = "default"
            {
              flags +=
                <cxxflags>"/wd4464"
                <cxxflags>"/wd4548"
                <cxxflags>"/wd4623"
                <cxxflags>"/wd4625"
                <cxxflags>"/wd4626"
                <cxxflags>"/wd4668"
                <cxxflags>"/wd5204"
              ;
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900000 ]
              {
                flags +=
                  <cxxflags>"/wd4582"
                  <cxxflags>"/wd4583"
                ;
                if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900034 ]
                {
                  flags +=
                    <cxxflags>"/wd5262"
                  ;
                  if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900000 ]
                  {
                    flags +=
                      <cxxflags>"/wd4774"
                    ;
                  }
                }
              }
            }
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1600000 ]
            {
              flags +=
                <cxxflags>"/wd4800"
              ;
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900039 ]
              {
                flags +=
                  <cxxflags>"/wd4975"
                ;
                if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900040 ]
                {
                  flags +=
                    <cxxflags>"/wd4860"
                    <cxxflags>"/wd4861"
                    <cxxflags>"/wd5273"
                    <cxxflags>"/wd5274"
                  ;
                  if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900041 ]
                  {
                    flags +=
                      <cxxflags>"/wd5306"
                    ;
                    if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900043 ]
                    {
                      flags +=
                        <cxxflags>"/wd5277"
                      ;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if $(x_conversion_warnings) != "default"
    {
      if ( $(x_conversion_warnings) = "off" || $(x_conversion_warnings) = "sign" )
      {
        flags +=
          <cxxflags>"/wd4244"
          <cxxflags>"/wd4245"
          <cxxflags>"/wd4365"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/w14244"
          <cxxflags>"/w14245"
          <cxxflags>"/w14365"
        ;
      }
      if ( $(x_conversion_warnings) = "on" || $(x_conversion_warnings) = "all" || $(x_conversion_warnings) = "sign" )
      {
        flags +=
          <cxxflags>"/w14018"
          <cxxflags>"/w14388"
          <cxxflags>"/w14289"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/wd4018"
          <cxxflags>"/wd4388"
          <cxxflags>"/wd4289"
        ;
      }
    }
    if $(x_optimization_warnings) != "default"
    {
      flags +=
        <cxxflags>"/w15263"
      ;
    }
    if $(x_switch_warnings) != "default"
    {
      if ( $(x_switch_warnings) = "on" || $(x_switch_warnings) = "mandatory-default" )
      {
        flags +=
          <cxxflags>"/wd4061"
          <cxxflags>"/w14062"
        ;
      }
      else
      {
        if ( $(x_switch_warnings) = "exhaustive-enum" || $(x_switch_warnings) = "exhaustive-enum-and-mandatory-default" )
        {
          flags +=
            <cxxflags>"/w14061"
            <cxxflags>"/w14062"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/wd4061"
            <cxxflags>"/wd4062"
          ;
        }
      }
    }
    if $(x_shadow_warnings) != "default"
    {
      if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900000 ]
      {
        if $(x_shadow_warnings) = "off"
        {
          flags +=
            <cxxflags>"/wd4456"
            <cxxflags>"/wd4459"
          ;
        }
        else
        {
          if ( $(x_shadow_warnings) = "on" || $(x_shadow_warnings) = "all" )
          {
            flags +=
              <cxxflags>"/w14456"
              <cxxflags>"/w14459"
            ;
          }
          else
          {
            if $(x_shadow_warnings) = "local"
            {
              flags +=
                <cxxflags>"/w4456"
                <cxxflags>"/wd4459"
              ;
            }
          }
        }
      }
    }
    if $(x_warnings_as_error) != "default"
    {
      if $(x_warnings_as_error) = "on"
      {
        flags +=
          <cxxflags>"/WX"
        ;
      }
      else
      {
        if $(x_warnings_as_error) = "off"
        {
          flags +=
            <cxxflags>"/WX-"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/we4455"
            <cxxflags>"/we4150"
            <cxxflags>"/we4716"
            <cxxflags>"/we2124"
          ;
        }
      }
    }
    if $(x_pedantic) != "default"
    {
      if $(x_pedantic) != "off"
      {
        flags +=
          <cxxflags>"/permissive-"
          <cxxflags>"/Zc:inline"
          <cxxflags>"/Zc:referenceBinding"
          <cxxflags>"/Zc:throwingNew"
        ;
        if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900013 ]
        {
          flags +=
            <cxxflags>"/Zc:externConstexpr"
          ;
          if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900014 ]
          {
            flags +=
              <cxxflags>"/Zc:__cplusplus"
            ;
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900025 ]
            {
              flags +=
                <cxxflags>"/Zc:preprocessor"
              ;
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900028 ]
              {
                flags +=
                  <cxxflags>"/Zc:lambda"
                ;
                if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900034 ]
                {
                  flags +=
                    <cxxflags>"/Zc:enumTypes"
                  ;
                  if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900035 ]
                  {
                    flags +=
                      <cxxflags>"/Zc:templateScope"
                    ;
                  }
                }
              }
            }
          }
        }
        if $(x_pedantic) = "as-error"
        {
          flags +=
            <cxxflags>"/we4608"
            <cxxflags>"/we4928"
          ;
          if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900031 ]
          {
            flags +=
              <cxxflags>"/we5254"
            ;
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900038 ]
            {
              flags +=
                <cxxflags>"/we5110"
              ;
            }
          }
        }
        else
        {
          flags +=
            <cxxflags>"/w14608"
            <cxxflags>"/w14928"
          ;
          if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900031 ]
          {
            flags +=
              <cxxflags>"/w15254"
            ;
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900038 ]
            {
              flags +=
                <cxxflags>"/w15110"
              ;
            }
          }
        }
        if $(x_msvc_isystem) != "default"
        {
          if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1700000 ]
          {
            flags +=
              <cxxflags>"/we4471"
            ;
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900021 ]
            {
              flags +=
                <cxxflags>"/we5052"
              ;
            }
          }
        }
        else
        {
          if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1700000 ]
          {
            flags +=
              <cxxflags>"/w14471"
            ;
          }
        }
      }
    }
    if $(x_lto) != "default"
    {
      if $(x_lto) = "off"
      {
        flags +=
          <cxxflags>"/GL-"
        ;
      }
      else
      {
        if $(x_lto) != "thin-or-nothing"
        {
          flags +=
            <cxxflags>"/GL"
            <cxxflags>"/Gw"
            <linkflags>"/LTCG"
          ;
        }
      }
    }
    if $(x_sanitizers) != "default"
    {
      if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900028 ]
      {
        if ( $(x_sanitizers) = "on" || $(x_sanitizers) = "extra" || $(x_sanitizers) = "address" || $(x_sanitizers) = "kernel" || $(x_sanitizers) = "kernel-extra" || $(x_sanitizers) = "kernel-address" )
        {
          if ( $(x_sanitizers) = "on" || $(x_sanitizers) = "extra" || $(x_sanitizers) = "address" )
          {
            flags +=
              <cxxflags>"/fsanitize=address"
              <linkflags>"/fsanitize=address"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"/fsanitize=kernel-address"
              <linkflags>"/fsanitize=kernel-address"
            ;
          }
          if ( $(x_sanitizers) = "extra" || $(x_sanitizers) = "kernel-extra" )
          {
            flags +=
              <cxxflags>"/fsanitize-address-use-after-return"
            ;
          }
        }
      }
      else
      {
        if $(x_sanitizers) = "on"
        {
          flags +=
            <cxxflags>"/sdl"
          ;
          if ( $(x_optimization) = "0" )
          {
            flags +=
              <cxxflags>"/RTCsu"
            ;
          }
        }
        else
        {
          if $(x_stack_protector) != "default"
          {
            if $(x_stack_protector) != "off"
            {
              flags +=
                <cxxflags>"/sdl-"
              ;
            }
          }
        }
      }
    }
  }
  else
  {
    if $(JLN_NORMALIZED_CXX_COMP) = "clang-cl"
    {
      if $(x_pedantic) != "default"
      {
        if $(x_pedantic) != "off"
        {
          flags +=
            <cxxflags>"/Zc:twoPhase"
          ;
          if $(x_pedantic) = "as-error"
          {
            flags +=
              <cxxflags>"-Werror=write-strings"
            ;
          }
        }
      }
      if $(x_color) != "default"
      {
        if $(x_color) = "never"
        {
          flags +=
            <cxxflags>"-fno-color-diagnostics"
          ;
        }
        else
        {
          if $(x_color) = "always"
          {
            flags +=
              <cxxflags>"-fcolor-diagnostics"
            ;
          }
        }
      }
      if $(x_diagnostics_format) != "default"
      {
        if $(x_diagnostics_format) = "fixits"
        {
          flags +=
            <cxxflags>"-fdiagnostics-parseable-fixits"
          ;
        }
      }
      if $(x_cpu) != "default"
      {
        if $(x_cpu) = "generic"
        {
          flags +=
            <cxxflags>"-mtune=generic"
            <linkflags>"-mtune=generic"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-march=native"
            <cxxflags>"-mtune=native"
            <linkflags>"-march=native"
            <linkflags>"-mtune=native"
          ;
        }
      }
      if $(x_linker) != "default"
      {
        if ( $(x_linker) = "lld" || $(x_linker) = "native" )
        {
          flags +=
            <linkflags>"-fuse-ld=lld"
          ;
        }
        else
        {
          if $(x_linker) = "mold"
          {
            flags +=
              <linkflags>"-fuse-ld=mold"
            ;
          }
        }
      }
    }
    else
    {
      if $(JLN_NORMALIZED_CXX_COMP) = "intel' && $(original_version) = 'windows"
      {
        if $(x_warnings) != "default"
        {
          if $(x_warnings) = "off"
          {
            flags +=
              <cxxflags>"/w"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"/W2"
              <cxxflags>"/Qdiag-disable:1418,2259"
            ;
          }
        }
        if $(x_warnings_as_error) != "default"
        {
          if $(x_warnings_as_error) = "on"
          {
            flags +=
              <cxxflags>"/WX"
            ;
          }
          else
          {
            if $(x_warnings_as_error) = "basic"
            {
              flags +=
                <cxxflags>"/Qdiag-error:1079,39,109"
              ;
            }
          }
        }
        if $(x_windows_bigobj) != "default"
        {
          flags +=
            <cxxflags>"/bigobj"
          ;
        }
        if $(x_symbols) != "default"
        {
          if $(x_symbols) = "nodebug"
          {
            flags +=
              <cxxflags>"/debug:none"
            ;
          }
          else
          {
            if $(x_symbols) = "minimal-debug"
            {
              flags +=
                <cxxflags>"/debug:minimal"
              ;
            }
            else
            {
              if ( $(x_symbols) = "debug" || $(x_symbols) = "full-debug" || $(x_symbols) = "codeview" )
              {
                flags +=
                  <cxxflags>"/debug:full"
                ;
              }
            }
          }
        }
        if $(x_optimization) != "default"
        {
          if $(x_optimization) = "0"
          {
            flags +=
              <cxxflags>"/Ob0"
            ;
          }
          else
          {
            if $(x_optimization) = "g"
            {
              flags +=
                <cxxflags>"/Ob1"
              ;
            }
            else
            {
              flags +=
                <cxxflags>"/GF"
              ;
              if $(x_optimization) = "1"
              {
                flags +=
                  <cxxflags>"/O1"
                ;
              }
              else
              {
                if $(x_optimization) = "2"
                {
                  flags +=
                    <cxxflags>"/O2"
                  ;
                }
                else
                {
                  if $(x_optimization) = "3"
                  {
                    flags +=
                      <cxxflags>"/O2"
                    ;
                  }
                  else
                  {
                    if $(x_optimization) = "z"
                    {
                      flags +=
                        <cxxflags>"/O3"
                      ;
                    }
                    else
                    {
                      if $(x_optimization) = "size"
                      {
                        flags +=
                          <cxxflags>"/Os"
                        ;
                      }
                      else
                      {
                        flags +=
                          <cxxflags>"/fast"
                        ;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if $(x_stack_protector) != "default"
        {
          if $(x_stack_protector) = "off"
          {
            flags +=
              <cxxflags>"/GS-"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"/GS"
            ;
          }
        }
        if $(x_sanitizers) != "default"
        {
          if ( $(x_sanitizers) = "on" || $(x_sanitizers) = "extra" || $(x_sanitizers) = "address" || $(x_sanitizers) = "kernel" || $(x_sanitizers) = "kernel-extra" || $(x_sanitizers) = "kernel-address" )
          {
            flags +=
              <cxxflags>"/Qtrapuv"
              <cxxflags>"/RTCsu"
            ;
            if ( $(x_sanitizers) = "on" || $(x_sanitizers) = "extra" || $(x_sanitizers) = "kernel" || $(x_sanitizers) = "kernel-extra" )
            {
              flags +=
                <cxxflags>"/Qfp-stack-check"
                <cxxflags>"/Qfp-trap:common"
              ;
            }
          }
        }
        if $(x_control_flow) != "default"
        {
          if $(x_control_flow) = "off"
          {
            flags +=
              <cxxflags>"/guard:cf-"
              <cxxflags>"/mconditional-branch=keep"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"/guard:cf"
            ;
            if $(x_control_flow) = "branch"
            {
              flags +=
                <cxxflags>"/mconditional-branch:all-fix"
                <cxxflags>"/Qcf-protection:branch"
              ;
            }
            else
            {
              if $(x_control_flow) = "on"
              {
                flags +=
                  <cxxflags>"/mconditional-branch:all-fix"
                  <cxxflags>"/Qcf-protection:full"
                ;
              }
            }
          }
        }
        if $(x_cpu) != "default"
        {
          if $(x_cpu) = "generic"
          {
            flags +=
              <cxxflags>"/Qtune:generic"
              <linkflags>"/Qtune:generic"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"/QxHost"
              <linkflags>"/QxHost"
            ;
          }
        }
      }
      else
      {
        if $(JLN_NORMALIZED_CXX_COMP) = "intel' && $(original_version) = 'linux"
        {
          if $(x_warnings) != "default"
          {
            if $(x_warnings) = "off"
            {
              flags +=
                <cxxflags>"-w"
              ;
            }
            else
            {
              if $(x_warnings) = "essential"
              {
                flags +=
                  <cxxflags>"-Wall"
                ;
              }
              else
              {
                flags +=
                  <cxxflags>"-Wall"
                  <cxxflags>"-Warray-bounds"
                  <cxxflags>"-Wcast-qual"
                  <cxxflags>"-Wchar-subscripts"
                  <cxxflags>"-Wdisabled-optimization"
                  <cxxflags>"-Wenum-compare"
                  <cxxflags>"-Wextra"
                  <cxxflags>"-Wfloat-equal"
                  <cxxflags>"-Wformat-security"
                  <cxxflags>"-Wformat=2"
                  <cxxflags>"-Winit-self"
                  <cxxflags>"-Winvalid-pch"
                  <cxxflags>"-Wmaybe-uninitialized"
                  <cxxflags>"-Wmissing-include-dirs"
                  <cxxflags>"-Wnarrowing"
                  <cxxflags>"-Wnonnull"
                  <cxxflags>"-Wpointer-sign"
                  <cxxflags>"-Wreorder"
                  <cxxflags>"-Wsequence-point"
                  <cxxflags>"-Wtrigraphs"
                  <cxxflags>"-Wundef"
                  <cxxflags>"-Wunused-function"
                  <cxxflags>"-Wunused-but-set-variable"
                  <cxxflags>"-Wunused-variable"
                  <cxxflags>"-Wpointer-arith"
                  <cxxflags>"-Wdeprecated"
                  <cxxflags>"-Wnon-virtual-dtor"
                  <cxxflags>"-Woverloaded-virtual"
                ;
              }
            }
          }
          if $(x_switch_warnings) != "default"
          {
            if ( $(x_switch_warnings) = "on" || $(x_switch_warnings) = "exhaustive-enum" )
            {
              flags +=
                <cxxflags>"-Wswitch-enum"
              ;
            }
            else
            {
              if $(x_switch_warnings) = "mandatory-default"
              {
                flags +=
                  <cxxflags>"-Wswitch-default"
                ;
              }
              else
              {
                if $(x_switch_warnings) = "exhaustive-enum-and-mandatory-default"
                {
                  flags +=
                    <cxxflags>"-Wswitch"
                  ;
                }
                else
                {
                  flags +=
                    <cxxflags>"-Wno-switch"
                  ;
                }
              }
            }
          }
          if $(x_warnings_as_error) != "default"
          {
            if $(x_warnings_as_error) = "on"
            {
              flags +=
                <cxxflags>"-Werror"
              ;
            }
            else
            {
              if $(x_warnings_as_error) = "basic"
              {
                flags +=
                  <cxxflags>"-diag-error=1079,39,109"
                ;
              }
            }
          }
          if $(x_pedantic) != "default"
          {
            if $(x_pedantic) = "off"
            {
              flags +=
                <cxxflags>"-fgnu-keywords"
              ;
            }
            else
            {
              flags +=
                <cxxflags>"-fno-gnu-keywords"
                <cxxflags>"/Zc:inline"
                <cxxflags>"/Zc:strictStrings"
                <cxxflags>"/Zc:throwingNew"
              ;
            }
          }
          if $(x_shadow_warnings) != "default"
          {
            if $(x_shadow_warnings) = "off"
            {
              flags +=
                <cxxflags>"-Wno-shadow"
              ;
            }
            else
            {
              if ( $(x_shadow_warnings) = "on" || $(x_shadow_warnings) = "all" )
              {
                flags +=
                  <cxxflags>"-Wshadow"
                ;
              }
            }
          }
          if $(x_stl_hardening) != "default"
          {
            if $(x_stl_hardening) = "debug-with-broken-abi"
            {
              flags +=
                <cxxflags>"-D_GLIBCXX_DEBUG"
              ;
              if $(x_pedantic) != "default" && ! ( $(x_pedantic) = "off" )
              {
                flags +=
                  <cxxflags>"-D_GLIBCXX_DEBUG_PEDANTIC"
                ;
              }
            }
            else
            {
              if $(x_stl_hardening) != "off"
              {
                flags +=
                  <cxxflags>"-D_GLIBCXX_ASSERTIONS"
                ;
              }
            }
          }
          if $(x_symbols) != "default"
          {
            if $(x_symbols) = "nodebug"
            {
              flags +=
                <cxxflags>"-g0"
              ;
            }
            else
            {
              if $(x_symbols) = "hidden"
              {
                flags +=
                  <cxxflags>"-fvisibility=hidden"
                ;
              }
              else
              {
                if $(x_symbols) = "debug"
                {
                  flags +=
                    <cxxflags>"-g"
                  ;
                }
                else
                {
                  if $(x_symbols) = "minimal-debug"
                  {
                    flags +=
                      <cxxflags>"-g1"
                    ;
                  }
                  else
                  {
                    if $(x_symbols) = "full-debug"
                    {
                      flags +=
                        <cxxflags>"-g3"
                      ;
                    }
                  }
                }
              }
            }
          }
          if $(x_optimization) != "default"
          {
            if $(x_optimization) = "0"
            {
              flags +=
                <cxxflags>"-O0"
              ;
            }
            else
            {
              if $(x_optimization) = "g"
              {
                flags +=
                  <cxxflags>"-O1"
                ;
              }
              else
              {
                if $(x_optimization) = "1"
                {
                  flags +=
                    <cxxflags>"-O1"
                  ;
                }
                else
                {
                  if $(x_optimization) = "2"
                  {
                    flags +=
                      <cxxflags>"-O2"
                    ;
                  }
                  else
                  {
                    if $(x_optimization) = "3"
                    {
                      flags +=
                        <cxxflags>"-O3"
                      ;
                    }
                    else
                    {
                      if $(x_optimization) = "z"
                      {
                        flags +=
                          <cxxflags>"-fast"
                        ;
                      }
                      else
                      {
                        if $(x_optimization) = "size"
                        {
                          flags +=
                            <cxxflags>"-Os"
                          ;
                        }
                        else
                        {
                          flags +=
                            <cxxflags>"-Ofast"
                          ;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if $(x_stack_protector) != "default"
          {
            if $(x_stack_protector) = "off"
            {
              flags +=
                <cxxflags>"-fno-protector-strong"
                <cxxflags>"-U_FORTIFY_SOURCE"
                <linkflags>"-fno-protector-strong"
              ;
            }
            else
            {
              flags +=
                <cxxflags>"-D_FORTIFY_SOURCE=2"
              ;
              if $(x_stack_protector) = "strong"
              {
                flags +=
                  <cxxflags>"-fstack-protector-strong"
                  <linkflags>"-fstack-protector-strong"
                ;
              }
              else
              {
                if $(x_stack_protector) = "all"
                {
                  flags +=
                    <cxxflags>"-fstack-protector-all"
                    <linkflags>"-fstack-protector-all"
                  ;
                }
                else
                {
                  flags +=
                    <cxxflags>"-fstack-protector"
                    <linkflags>"-fstack-protector"
                  ;
                }
              }
            }
          }
          if $(x_relro) != "default"
          {
            if $(x_relro) = "off"
            {
              flags +=
                <linkflags>"-Xlinker-znorelro"
              ;
            }
            else
            {
              if $(x_relro) = "on"
              {
                flags +=
                  <linkflags>"-Xlinker-zrelro"
                ;
              }
              else
              {
                flags +=
                  <linkflags>"-Xlinker-zrelro"
                  <linkflags>"-Xlinker-znow"
                  <linkflags>"-Xlinker-znoexecstack"
                ;
              }
            }
          }
          if $(x_pie) != "default"
          {
            if $(x_pie) = "off"
            {
              flags +=
                <linkflags>"-no-pic"
              ;
            }
            else
            {
              if $(x_pie) = "on"
              {
                flags +=
                  <linkflags>"-pie"
                ;
              }
              else
              {
                if $(x_pie) = "fpie"
                {
                  flags +=
                    <cxxflags>"-fpie"
                  ;
                }
                else
                {
                  if $(x_pie) = "fpic"
                  {
                    flags +=
                      <cxxflags>"-fpic"
                    ;
                  }
                  else
                  {
                    if $(x_pie) = "fPIE"
                    {
                      flags +=
                        <cxxflags>"-fPIE"
                      ;
                    }
                    else
                    {
                      if $(x_pie) = "fPIC"
                      {
                        flags +=
                          <cxxflags>"-fPIC"
                        ;
                      }
                    }
                  }
                }
              }
            }
          }
          if $(x_sanitizers) != "default"
          {
            if ( $(x_sanitizers) = "on" || $(x_sanitizers) = "extra" || $(x_sanitizers) = "address" || $(x_sanitizers) = "kernel" || $(x_sanitizers) = "kernel-extra" || $(x_sanitizers) = "kernel-address" )
            {
              flags +=
                <cxxflags>"-ftrapuv"
              ;
              if ( $(x_sanitizers) = "on" || $(x_sanitizers) = "extra" || $(x_sanitizers) = "kernel" || $(x_sanitizers) = "kernel-extra" )
              {
                flags +=
                  <cxxflags>"-fp-stack-check"
                  <cxxflags>"-fp-trap=common"
                ;
              }
            }
          }
          if $(x_linker) != "default"
          {
            if $(x_linker) = "bfd"
            {
              flags +=
                <linkflags>"-fuse-ld=bfd"
              ;
            }
            else
            {
              if $(x_linker) = "gold"
              {
                flags +=
                  <linkflags>"-fuse-ld=gold"
                ;
              }
              else
              {
                if $(x_linker) = "mold"
                {
                  flags +=
                    <linkflags>"-fuse-ld=mold"
                  ;
                }
                else
                {
                  flags +=
                    <linkflags>"-fuse-ld=lld"
                  ;
                }
              }
            }
          }
          if $(x_lto) != "default"
          {
            if $(x_lto) = "off"
            {
              flags +=
                <cxxflags>"-no-ipo"
                <linkflags>"-no-ipo"
              ;
            }
            else
            {
              if $(x_lto) != "thin-or-nothing"
              {
                flags +=
                  <cxxflags>"-ipo"
                  <linkflags>"-ipo"
                ;
              }
            }
          }
          if $(x_control_flow) != "default"
          {
            if $(x_control_flow) = "off"
            {
              flags +=
                <cxxflags>"-mconditional-branch=keep"
                <cxxflags>"-fcf-protection=none"
              ;
            }
            else
            {
              if $(x_control_flow) = "branch"
              {
                flags +=
                  <cxxflags>"-mconditional-branch=all-fix"
                  <cxxflags>"-fcf-protection=branch"
                ;
              }
              else
              {
                if $(x_control_flow) = "on"
                {
                  flags +=
                    <cxxflags>"-mconditional-branch=all-fix"
                    <cxxflags>"-fcf-protection=full"
                  ;
                }
              }
            }
          }
          if $(x_exceptions) != "default"
          {
            if $(x_exceptions) = "on"
            {
              flags +=
                <cxxflags>"-fexceptions"
              ;
            }
            else
            {
              flags +=
                <cxxflags>"-fno-exceptions"
              ;
            }
          }
          if $(x_rtti) != "default"
          {
            if $(x_rtti) = "on"
            {
              flags +=
                <cxxflags>"-frtti"
              ;
            }
            else
            {
              flags +=
                <cxxflags>"-fno-rtti"
              ;
            }
          }
          if $(x_cpu) != "default"
          {
            if $(x_cpu) = "generic"
            {
              flags +=
                <cxxflags>"-mtune=generic"
                <linkflags>"-mtune=generic"
              ;
            }
            else
            {
              flags +=
                <cxxflags>"-xHost"
                <linkflags>"-xHost"
              ;
            }
          }
        }
        else
        {
          if [ os.name ] = MINGW
          {
            if $(x_windows_bigobj) != "default"
            {
              flags +=
                <cxxflags>"-Wa,-mbig-obj"
              ;
            }
          }
        }
      }
    }
  }
  return $(flags) ;
}
