# File generated with https://github.com/jonathanpoelen/cpp-compiler-options

# jam reference: https://www.boost.org/build/doc/html/index.html

import feature : feature ;
import modules ;
import numbers ;
import os ;
import property-set ;
import string ;

JLN_BJAM_YEAR_VERSION = [ modules.peek : JAMVERSION ] ;

# Enables an static analysis of program flow which looks for “interesting” interprocedural paths through the code, and issues warnings for problems found on them (much more expensive than other GCC warnings)
feature <jln-analyzer> : _ default off on taint : propagated ;
# By default, the analysis silently stops if the code is too complicated for the analyzer to fully explore and it reaches an internal limit. This option warns if this occurs.
feature <jln-analyzer-too-complex-warning> : _ default off on : propagated ;
# Controls the complexity of the control flow paths that are emitted for analyzer diagnostics
#  - 0: At this level, interprocedural call and return events are displayed, along with the most pertinent state-change events relating to a diagnostic. For example, for a double-free diagnostic, both calls to free will be shown.
#  - 1: As per the previous level, but also show events for the entry to each function.
#  - 2: As per the previous level, but also show events relating to control flow that are significant to triggering the issue (e.g. “true path taken” at a conditional). This level is the default.
#  - 3: As per the previous level, but show all control flow events, not just significant ones.
feature <jln-analyzer-verbosity> : _ default 0 1 2 3 : propagated ;
feature <jln-color> : _ default auto never always : propagated ;
# Insert extra runtime security checks to detect attempts to compromise your code
feature <jln-control-flow> : _ default off on branch return allow-bugs : incidental ;
# Warn for implicit conversions that may alter a value
feature <jln-conversion-warnings> : _ on default off sign conversion : propagated ;
feature <jln-coverage> : _ default off on : incidental ;
# Warning for default label in switch which covers all enumeration values
feature <jln-covered-switch-default-warnings> : _ on default off : propagated ;
feature <jln-cpu> : _ default generic native : incidental ;
# Produce debugging information in the operating system's
feature <jln-debug> : _ default off on line-tables-only gdb lldb sce : incidental ;
# Emit fix-it hints in a machine-parseable format
feature <jln-diagnostics-format> : _ default fixits patch print-source-range-info : propagated ;
# Enables printing a tree-like structure showing the common and differing parts of the types
feature <jln-diagnostics-show-template-tree> : _ default off on : propagated ;
# Prints diagnostics showing common parts of template types as "[...]"
feature <jln-elide-type> : _ default off on : propagated ;
# Enable C++ exception
feature <jln-exceptions> : _ default off on : incidental ;
# Transforms some warnings into errors to comply with the standard
feature <jln-fix-compiler-error> : _ on default off : propagated ;
feature <jln-float-sanitizers> : _ default off on : incidental ;
feature <jln-integer-sanitizers> : _ default off on : incidental ;
# Configure linker
feature <jln-linker> : _ default bfd gold lld native : propagated ;
# Enable Link Time Optimization
feature <jln-lto> : _ default off on normal fat thin : incidental ;
# Standard conformance options
feature <jln-msvc-conformance> : _ all default all-without-throwing-new : incidental ;
# Disable CRT warnings
feature <jln-msvc-crt-secure-no-warnings> : _ on default off : propagated ;
# Controls the display of error and warning information (https://learn.microsoft.com/en-us/cpp/build/reference/diagnostics-compiler-diagnostic-options?view=msvc-170)
#  - classic: Which reports only the line number where the issue was found.
#  - column: Includes the column where the issue was found. This can help you identify the specific language construct or character that is causing the issue
#  - caret: Includes the column where the issue was found and places a caret (^) under the location in the line of code where the issue was detected
feature <jln-msvc-diagnostics-format> : _ caret default classic column : propagated ;
# Warnings concerning external header (https://devblogs.microsoft.com/cppblog/broken-warnings-theory)
feature <jln-msvc-isystem> : _ default anglebrackets include-and-caexcludepath : propagated ;
# Warnings concerning template in an external header (requires msvc_isystem)
feature <jln-msvc-isystem-with-template-from-non-external> : _ default off on : propagated ;
# Enable NDEBUG macro (disable assert macro)
feature <jln-ndebug> : _ with-optimization-1-or-above default off on : incidental ;
# Warn when a noexcept-expression evaluates to false because of a call to a function that does not have a non-throwing exception specification (i.e. "throw()" or "noexcept") but is known by the compiler to never throw an exception.
feature <jln-noexcept-warnings> : _ default off on : propagated ;
# Optimization level
#  - 0: Not optimize
#  - g: Enable debugging experience
#  - 1: Optimize
#  - 2: Optimize even more
#  - 3: Optimize yet more
#  - fast: Enables all optimization=3 and disregard strict standards compliance
#  - size: Optimize for size
#  - z: Optimize for size aggressively (/!\ possible slow compilation)
feature <jln-optimization> : _ default 0 g 1 2 3 fast size z : incidental ;
# Enable other sanitizers
feature <jln-other-sanitizers> : _ default off thread pointer memory : incidental ;
# Issue all the warnings demanded by strict ISO C and ISO C++
feature <jln-pedantic> : _ on default off as-error : incidental ;
# Controls position-independent code generation
feature <jln-pie> : _ default off on static fpic fPIC fpie fPIE : incidental ;
# Specifies a memory segment that should be made read-only after relocation, if supported.
feature <jln-relro> : _ default off on full : incidental ;
# Warn when macros "__TIME__", "__DATE__" or "__TIMESTAMP__" are encountered as they might prevent bit-wise-identical reproducible compilations
feature <jln-reproducible-build-warnings> : _ default off on : propagated ;
# Disable generation of information about every class with virtual functions for use by the C++ run-time type identification features ("dynamic_cast" and "typeid")
feature <jln-rtti> : _ default off on : incidental ;
# Enable sanitizers (asan, ubsan, etc)
feature <jln-sanitizers> : _ default off on : incidental ;
feature <jln-shadow-warnings> : _ off default on local compatible-local all : propagated ;
# Emit extra code to check for buffer overflows, such as stack smashing attacks
feature <jln-stack-protector> : _ default off on strong all : incidental ;
# Controls the debug level of the STL
feature <jln-stl-debug> : _ default off on allow-broken-abi allow-broken-abi-and-bugs assert-as-exception : incidental ;
# Enable /DNOMINMAX with msvc
feature <jln-stl-fix> : _ on default off : incidental ;
# Warn for cases where adding an attribute may be beneficial
feature <jln-suggestions> : _ default off on : propagated ;
# Warnings concerning the switch keyword
feature <jln-switch-warnings> : _ on default off exhaustive-enum mandatory-default exhaustive-enum-and-mandatory-default : propagated ;
# Enable -Wunsafe-buffer-usage with clang
feature <jln-unsafe-buffer-usage-warnings> : _ default on off : propagated ;
# Initialize all stack variables implicitly, including padding
#  - uninitialized: Doesn't initialize any automatic variables (default behavior of Gcc and Clang)
#  - pattern: Initialize automatic variables with byte-repeatable pattern (0xFE for Gcc, 0xAA for Clang)
#  - zero: zero Initialize automatic variables with zeroes
feature <jln-var-init> : _ default uninitialized pattern zero : incidental ;
# Warning level
feature <jln-warnings> : _ on default off strict very-strict : propagated ;
# Make all or some warnings into errors
feature <jln-warnings-as-error> : _ default off on basic : incidental ;
# Assume that the current compilation unit represents the whole program being compiled. This option should not be used in combination with lto.
feature <jln-whole-program> : _ default off on strip-all : incidental ;
# In code that is intended to be portable to Windows-based compilers the warning helps prevent unresolved references due to the difference in the mangling of symbols declared with different class-keys
feature <jln-windows-abi-compatibility-warnings> : _ off default on : propagated ;
# Increases that addressable sections capacity
feature <jln-windows-bigobj> : _ on default : incidental ;

feature <jln-control-flow-incidental> : _ default off on branch return allow-bugs : incidental ;
feature <jln-coverage-incidental> : _ default off on : incidental ;
feature <jln-cpu-incidental> : _ default generic native : incidental ;
feature <jln-debug-incidental> : _ default off on line-tables-only gdb lldb sce : incidental ;
feature <jln-exceptions-incidental> : _ default off on : incidental ;
feature <jln-float-sanitizers-incidental> : _ default off on : incidental ;
feature <jln-integer-sanitizers-incidental> : _ default off on : incidental ;
feature <jln-lto-incidental> : _ default off on normal fat thin : incidental ;
feature <jln-msvc-conformance-incidental> : _ all default all-without-throwing-new : incidental ;
feature <jln-ndebug-incidental> : _ with-optimization-1-or-above default off on : incidental ;
feature <jln-optimization-incidental> : _ default 0 g 1 2 3 fast size z : incidental ;
feature <jln-other-sanitizers-incidental> : _ default off thread pointer memory : incidental ;
feature <jln-pedantic-incidental> : _ on default off as-error : incidental ;
feature <jln-pie-incidental> : _ default off on static fpic fPIC fpie fPIE : incidental ;
feature <jln-relro-incidental> : _ default off on full : incidental ;
feature <jln-rtti-incidental> : _ default off on : incidental ;
feature <jln-sanitizers-incidental> : _ default off on : incidental ;
feature <jln-stack-protector-incidental> : _ default off on strong all : incidental ;
feature <jln-stl-debug-incidental> : _ default off on allow-broken-abi allow-broken-abi-and-bugs assert-as-exception : incidental ;
feature <jln-stl-fix-incidental> : _ on default off : incidental ;
feature <jln-var-init-incidental> : _ default uninitialized pattern zero : incidental ;
feature <jln-warnings-as-error-incidental> : _ default off on basic : incidental ;
feature <jln-whole-program-incidental> : _ default off on strip-all : incidental ;
feature <jln-windows-bigobj-incidental> : _ on default : incidental ;

feature <jln-analyzer-default> : default off on taint : incidental ;
feature <jln-analyzer-too-complex-warning-default> : default off on : incidental ;
feature <jln-analyzer-verbosity-default> : default 0 1 2 3 : incidental ;
feature <jln-color-default> : default auto never always : incidental ;
feature <jln-control-flow-default> : default off on branch return allow-bugs : incidental ;
feature <jln-conversion-warnings-default> : on default off sign conversion : incidental ;
feature <jln-coverage-default> : default off on : incidental ;
feature <jln-covered-switch-default-warnings-default> : on default off : incidental ;
feature <jln-cpu-default> : default generic native : incidental ;
feature <jln-debug-default> : default off on line-tables-only gdb lldb sce : incidental ;
feature <jln-diagnostics-format-default> : default fixits patch print-source-range-info : incidental ;
feature <jln-diagnostics-show-template-tree-default> : default off on : incidental ;
feature <jln-elide-type-default> : default off on : incidental ;
feature <jln-exceptions-default> : default off on : incidental ;
feature <jln-fix-compiler-error-default> : on default off : incidental ;
feature <jln-float-sanitizers-default> : default off on : incidental ;
feature <jln-integer-sanitizers-default> : default off on : incidental ;
feature <jln-linker-default> : default bfd gold lld native : incidental ;
feature <jln-lto-default> : default off on normal fat thin : incidental ;
feature <jln-msvc-conformance-default> : all default all-without-throwing-new : incidental ;
feature <jln-msvc-crt-secure-no-warnings-default> : on default off : incidental ;
feature <jln-msvc-diagnostics-format-default> : caret default classic column : incidental ;
feature <jln-msvc-isystem-default> : default anglebrackets include-and-caexcludepath : incidental ;
feature <jln-msvc-isystem-with-template-from-non-external-default> : default off on : incidental ;
feature <jln-ndebug-default> : with-optimization-1-or-above default off on : incidental ;
feature <jln-noexcept-warnings-default> : default off on : incidental ;
feature <jln-optimization-default> : default 0 g 1 2 3 fast size z : incidental ;
feature <jln-other-sanitizers-default> : default off thread pointer memory : incidental ;
feature <jln-pedantic-default> : on default off as-error : incidental ;
feature <jln-pie-default> : default off on static fpic fPIC fpie fPIE : incidental ;
feature <jln-relro-default> : default off on full : incidental ;
feature <jln-reproducible-build-warnings-default> : default off on : incidental ;
feature <jln-rtti-default> : default off on : incidental ;
feature <jln-sanitizers-default> : default off on : incidental ;
feature <jln-shadow-warnings-default> : off default on local compatible-local all : incidental ;
feature <jln-stack-protector-default> : default off on strong all : incidental ;
feature <jln-stl-debug-default> : default off on allow-broken-abi allow-broken-abi-and-bugs assert-as-exception : incidental ;
feature <jln-stl-fix-default> : on default off : incidental ;
feature <jln-suggestions-default> : default off on : incidental ;
feature <jln-switch-warnings-default> : on default off exhaustive-enum mandatory-default exhaustive-enum-and-mandatory-default : incidental ;
feature <jln-unsafe-buffer-usage-warnings-default> : default on off : incidental ;
feature <jln-var-init-default> : default uninitialized pattern zero : incidental ;
feature <jln-warnings-default> : on default off strict very-strict : incidental ;
feature <jln-warnings-as-error-default> : default off on basic : incidental ;
feature <jln-whole-program-default> : default off on strip-all : incidental ;
feature <jln-windows-abi-compatibility-warnings-default> : off default on : incidental ;
feature <jln-windows-bigobj-default> : on default : incidental ;


rule jln-get-env ( env : values * )
{
  local x = [ os.environ $(env) ] ;
  if $(x)
  {
    if $(x) in $(values)
    {
      return $(x) ;
    }
    else
    {
      EXIT "Unknown '$(x)' for $(env)" : 7 ;
    }
  }
  else
  {
    return "" ;
  }
}

constant jln_env_analyzer : [ jln-get-env jln_analyzer : default off on taint ] ;
constant jln_env_analyzer_too_complex_warning : [ jln-get-env jln_analyzer_too_complex_warning : default off on ] ;
constant jln_env_analyzer_verbosity : [ jln-get-env jln_analyzer_verbosity : default 0 1 2 3 ] ;
constant jln_env_color : [ jln-get-env jln_color : default auto never always ] ;
constant jln_env_control_flow : [ jln-get-env jln_control_flow : default off on branch return allow-bugs ] ;
constant jln_env_conversion_warnings : [ jln-get-env jln_conversion_warnings : on default off sign conversion ] ;
constant jln_env_coverage : [ jln-get-env jln_coverage : default off on ] ;
constant jln_env_covered_switch_default_warnings : [ jln-get-env jln_covered_switch_default_warnings : on default off ] ;
constant jln_env_cpu : [ jln-get-env jln_cpu : default generic native ] ;
constant jln_env_debug : [ jln-get-env jln_debug : default off on line-tables-only gdb lldb sce ] ;
constant jln_env_diagnostics_format : [ jln-get-env jln_diagnostics_format : default fixits patch print-source-range-info ] ;
constant jln_env_diagnostics_show_template_tree : [ jln-get-env jln_diagnostics_show_template_tree : default off on ] ;
constant jln_env_elide_type : [ jln-get-env jln_elide_type : default off on ] ;
constant jln_env_exceptions : [ jln-get-env jln_exceptions : default off on ] ;
constant jln_env_fix_compiler_error : [ jln-get-env jln_fix_compiler_error : on default off ] ;
constant jln_env_float_sanitizers : [ jln-get-env jln_float_sanitizers : default off on ] ;
constant jln_env_integer_sanitizers : [ jln-get-env jln_integer_sanitizers : default off on ] ;
constant jln_env_linker : [ jln-get-env jln_linker : default bfd gold lld native ] ;
constant jln_env_lto : [ jln-get-env jln_lto : default off on normal fat thin ] ;
constant jln_env_msvc_conformance : [ jln-get-env jln_msvc_conformance : all default all-without-throwing-new ] ;
constant jln_env_msvc_crt_secure_no_warnings : [ jln-get-env jln_msvc_crt_secure_no_warnings : on default off ] ;
constant jln_env_msvc_diagnostics_format : [ jln-get-env jln_msvc_diagnostics_format : caret default classic column ] ;
constant jln_env_msvc_isystem : [ jln-get-env jln_msvc_isystem : default anglebrackets include-and-caexcludepath ] ;
constant jln_env_msvc_isystem_with_template_from_non_external : [ jln-get-env jln_msvc_isystem_with_template_from_non_external : default off on ] ;
constant jln_env_ndebug : [ jln-get-env jln_ndebug : with-optimization-1-or-above default off on ] ;
constant jln_env_noexcept_warnings : [ jln-get-env jln_noexcept_warnings : default off on ] ;
constant jln_env_optimization : [ jln-get-env jln_optimization : default 0 g 1 2 3 fast size z ] ;
constant jln_env_other_sanitizers : [ jln-get-env jln_other_sanitizers : default off thread pointer memory ] ;
constant jln_env_pedantic : [ jln-get-env jln_pedantic : on default off as-error ] ;
constant jln_env_pie : [ jln-get-env jln_pie : default off on static fpic fPIC fpie fPIE ] ;
constant jln_env_relro : [ jln-get-env jln_relro : default off on full ] ;
constant jln_env_reproducible_build_warnings : [ jln-get-env jln_reproducible_build_warnings : default off on ] ;
constant jln_env_rtti : [ jln-get-env jln_rtti : default off on ] ;
constant jln_env_sanitizers : [ jln-get-env jln_sanitizers : default off on ] ;
constant jln_env_shadow_warnings : [ jln-get-env jln_shadow_warnings : off default on local compatible-local all ] ;
constant jln_env_stack_protector : [ jln-get-env jln_stack_protector : default off on strong all ] ;
constant jln_env_stl_debug : [ jln-get-env jln_stl_debug : default off on allow-broken-abi allow-broken-abi-and-bugs assert-as-exception ] ;
constant jln_env_stl_fix : [ jln-get-env jln_stl_fix : on default off ] ;
constant jln_env_suggestions : [ jln-get-env jln_suggestions : default off on ] ;
constant jln_env_switch_warnings : [ jln-get-env jln_switch_warnings : on default off exhaustive-enum mandatory-default exhaustive-enum-and-mandatory-default ] ;
constant jln_env_unsafe_buffer_usage_warnings : [ jln-get-env jln_unsafe_buffer_usage_warnings : default on off ] ;
constant jln_env_var_init : [ jln-get-env jln_var_init : default uninitialized pattern zero ] ;
constant jln_env_warnings : [ jln-get-env jln_warnings : on default off strict very-strict ] ;
constant jln_env_warnings_as_error : [ jln-get-env jln_warnings_as_error : default off on basic ] ;
constant jln_env_whole_program : [ jln-get-env jln_whole_program : default off on strip-all ] ;
constant jln_env_windows_abi_compatibility_warnings : [ jln-get-env jln_windows_abi_compatibility_warnings : off default on ] ;
constant jln_env_windows_bigobj : [ jln-get-env jln_windows_bigobj : on default ] ;

if $(JLN_BJAM_YEAR_VERSION) < 2016.00
{
  import toolset ;
  toolset.flags jln-control-flow JLN_CONTROL_FLOW : <jln-control-flow> ;
  toolset.flags jln-control-flow-incidental JLN_CONTROL_FLOW_INCIDENTAL : <jln-control-flow-incidental> ;
  toolset.flags jln-coverage JLN_COVERAGE : <jln-coverage> ;
  toolset.flags jln-coverage-incidental JLN_COVERAGE_INCIDENTAL : <jln-coverage-incidental> ;
  toolset.flags jln-cpu JLN_CPU : <jln-cpu> ;
  toolset.flags jln-cpu-incidental JLN_CPU_INCIDENTAL : <jln-cpu-incidental> ;
  toolset.flags jln-debug JLN_DEBUG : <jln-debug> ;
  toolset.flags jln-debug-incidental JLN_DEBUG_INCIDENTAL : <jln-debug-incidental> ;
  toolset.flags jln-exceptions JLN_EXCEPTIONS : <jln-exceptions> ;
  toolset.flags jln-exceptions-incidental JLN_EXCEPTIONS_INCIDENTAL : <jln-exceptions-incidental> ;
  toolset.flags jln-float-sanitizers JLN_FLOAT_SANITIZERS : <jln-float-sanitizers> ;
  toolset.flags jln-float-sanitizers-incidental JLN_FLOAT_SANITIZERS_INCIDENTAL : <jln-float-sanitizers-incidental> ;
  toolset.flags jln-integer-sanitizers JLN_INTEGER_SANITIZERS : <jln-integer-sanitizers> ;
  toolset.flags jln-integer-sanitizers-incidental JLN_INTEGER_SANITIZERS_INCIDENTAL : <jln-integer-sanitizers-incidental> ;
  toolset.flags jln-lto JLN_LTO : <jln-lto> ;
  toolset.flags jln-lto-incidental JLN_LTO_INCIDENTAL : <jln-lto-incidental> ;
  toolset.flags jln-msvc-conformance JLN_MSVC_CONFORMANCE : <jln-msvc-conformance> ;
  toolset.flags jln-msvc-conformance-incidental JLN_MSVC_CONFORMANCE_INCIDENTAL : <jln-msvc-conformance-incidental> ;
  toolset.flags jln-ndebug JLN_NDEBUG : <jln-ndebug> ;
  toolset.flags jln-ndebug-incidental JLN_NDEBUG_INCIDENTAL : <jln-ndebug-incidental> ;
  toolset.flags jln-optimization JLN_OPTIMIZATION : <jln-optimization> ;
  toolset.flags jln-optimization-incidental JLN_OPTIMIZATION_INCIDENTAL : <jln-optimization-incidental> ;
  toolset.flags jln-other-sanitizers JLN_OTHER_SANITIZERS : <jln-other-sanitizers> ;
  toolset.flags jln-other-sanitizers-incidental JLN_OTHER_SANITIZERS_INCIDENTAL : <jln-other-sanitizers-incidental> ;
  toolset.flags jln-pedantic JLN_PEDANTIC : <jln-pedantic> ;
  toolset.flags jln-pedantic-incidental JLN_PEDANTIC_INCIDENTAL : <jln-pedantic-incidental> ;
  toolset.flags jln-pie JLN_PIE : <jln-pie> ;
  toolset.flags jln-pie-incidental JLN_PIE_INCIDENTAL : <jln-pie-incidental> ;
  toolset.flags jln-relro JLN_RELRO : <jln-relro> ;
  toolset.flags jln-relro-incidental JLN_RELRO_INCIDENTAL : <jln-relro-incidental> ;
  toolset.flags jln-rtti JLN_RTTI : <jln-rtti> ;
  toolset.flags jln-rtti-incidental JLN_RTTI_INCIDENTAL : <jln-rtti-incidental> ;
  toolset.flags jln-sanitizers JLN_SANITIZERS : <jln-sanitizers> ;
  toolset.flags jln-sanitizers-incidental JLN_SANITIZERS_INCIDENTAL : <jln-sanitizers-incidental> ;
  toolset.flags jln-stack-protector JLN_STACK_PROTECTOR : <jln-stack-protector> ;
  toolset.flags jln-stack-protector-incidental JLN_STACK_PROTECTOR_INCIDENTAL : <jln-stack-protector-incidental> ;
  toolset.flags jln-stl-debug JLN_STL_DEBUG : <jln-stl-debug> ;
  toolset.flags jln-stl-debug-incidental JLN_STL_DEBUG_INCIDENTAL : <jln-stl-debug-incidental> ;
  toolset.flags jln-stl-fix JLN_STL_FIX : <jln-stl-fix> ;
  toolset.flags jln-stl-fix-incidental JLN_STL_FIX_INCIDENTAL : <jln-stl-fix-incidental> ;
  toolset.flags jln-var-init JLN_VAR_INIT : <jln-var-init> ;
  toolset.flags jln-var-init-incidental JLN_VAR_INIT_INCIDENTAL : <jln-var-init-incidental> ;
  toolset.flags jln-warnings-as-error JLN_WARNINGS_AS_ERROR : <jln-warnings-as-error> ;
  toolset.flags jln-warnings-as-error-incidental JLN_WARNINGS_AS_ERROR_INCIDENTAL : <jln-warnings-as-error-incidental> ;
  toolset.flags jln-whole-program JLN_WHOLE_PROGRAM : <jln-whole-program> ;
  toolset.flags jln-whole-program-incidental JLN_WHOLE_PROGRAM_INCIDENTAL : <jln-whole-program-incidental> ;
  toolset.flags jln-windows-bigobj JLN_WINDOWS_BIGOBJ : <jln-windows-bigobj> ;
  toolset.flags jln-windows-bigobj-incidental JLN_WINDOWS_BIGOBJ_INCIDENTAL : <jln-windows-bigobj-incidental> ;

}

JLN_ORIGINAL_CXX_TOOLSET = "" ;
JLN_NORMALIZED_CXX_COMP = "" ;
JLN_NORMALIZED_CXX_COMP_VERSION = 100000 ;
JLN_NORMALIZED_CXX_IS_CLANG_LIKE = 0 ;

rule jln-update-normalized-compiler ( toolset : version )
{
  if $(JLN_ORIGINAL_CXX_TOOLSET) != $(toolset)
  {
    JLN_ORIGINAL_CXX_TOOLSET = $(toolset) ;

    local is_emcc = 0 ;
    local is_intel = 0 ;
    local is_clang = 0 ;
    switch $(toolset)  {
      case emscripten* : is_emcc = 1 ;
      case emcc* : is_emcc = 1 ;
      case intel : is_intel = 1 ;
      case icx* : is_intel = 1 ;
      case icpx* : is_intel = 1 ;
      case dpcpp* : is_intel = 1 ;
      case clang* : is_clang = 1 ;
    }

    if $(is_emcc) = 1 {
      JLN_NORMALIZED_CXX_COMP = clang-emcc ;
      JLN_NORMALIZED_CXX_IS_CLANG_LIKE = 1 ;
      # get clang version. Assume emcc exists
      version = [ MATCH "clang version ([0-9]+\\.[0-9]+\\.[0-9]+)" : [ SHELL "emcc -v 2>&1" ] ] ;
    }
    # icx / icpx
    else if $(is_intel) = 1 {
      JLN_NORMALIZED_CXX_COMP = clang ;
      JLN_NORMALIZED_CXX_IS_CLANG_LIKE = 1 ;
      switch $(version)  {
        case 2021* : JLN_NORMALIZED_CXX_COMP_VERSION = 1200000 ;
        case 2022* : JLN_NORMALIZED_CXX_COMP_VERSION = 1400000 ;
        case 2023* : JLN_NORMALIZED_CXX_COMP_VERSION = 1600000 ;
        case 2024* : JLN_NORMALIZED_CXX_COMP_VERSION = 1800000 ;
        case 2025* : JLN_NORMALIZED_CXX_COMP_VERSION = 2000000 ;
        case 2026* : JLN_NORMALIZED_CXX_COMP_VERSION = 2200000 ;
        case 2027* : JLN_NORMALIZED_CXX_COMP_VERSION = 2400000 ;
        case 2028* : JLN_NORMALIZED_CXX_COMP_VERSION = 2600000 ;
        case 2029* : JLN_NORMALIZED_CXX_COMP_VERSION = 2800000 ;
        case 2030* : JLN_NORMALIZED_CXX_COMP_VERSION = 3000000 ;
      }
    }
    else {
      JLN_NORMALIZED_CXX_IS_CLANG_LIKE = $(is_clang) ;
      # TODO `version` is not the real version.
      # For toolset=gcc-5, version is 5 ; for clang-scan, version is ''
      JLN_NORMALIZED_CXX_COMP = $(toolset) ;
      version = [ MATCH "^[^0-9]*(.*)$" : $(version) ] ;
      if ! $(version) {
        version = [ MATCH "([0-9]+\\.[0-9]+\\.[0-9]+)" : [ SHELL "$(toolset) --version" ] ] ;
      }
    }

    if $(is_intel) = 0 {
      local match = [ MATCH "^([0-9]+)(\\.([0-9]+))?" : $(version) ] ;
      local major = $(match[1]) ;
      local minor = [ MATCH "(.....)$" : [ string.join 00000 $(match[3]) ] ] ;
      JLN_NORMALIZED_CXX_COMP_VERSION = $(major)$(minor) ;
    }
  }
}

rule jln-get-value ( ps : opt : env )
{
  local x = [ $(ps).get <$(opt)> ] ;
  if $(x) = "_"
  {
    x = $(env) ;
    if $(x) = ""
    {
      x = [ $(ps).get <$(opt)-default> ] ;
    }
  }
  return $(x) ;
}

rule jln-get-value2 ( ps : opt : iopt : env )
{
  local x = [ $(ps).get <$(opt)> ] ;
  if $(x) = "_"
  {
    x = [ $(ps).get <$(iopt)> ] ;
    if $(x) = "_"
    {
      x = $(env) ;
      if $(x) = ""
      {
        x = [ $(ps).get <$(opt)-default> ] ;
      }
    }
  }
  return $(x) ;
}

rule jln_flags ( properties * )
{
  local ps = [ property-set.create $(properties) ] ;
  local toolset = [ $(ps).get <toolset> ] ;
  local original_version = [ $(ps).get <toolset-$(toolset):version> ] ;
  jln-update-normalized-compiler $(toolset) : $(original_version) ;
  local linker = [ $(ps).get <linker> ] ;

  local flags = ;
  if $(JLN_BJAM_YEAR_VERSION) >= 2016.00
  {
    flags += 
      <relevant>jln-control-flow
      <relevant>jln-coverage
      <relevant>jln-cpu
      <relevant>jln-debug
      <relevant>jln-exceptions
      <relevant>jln-float-sanitizers
      <relevant>jln-integer-sanitizers
      <relevant>jln-lto
      <relevant>jln-msvc-conformance
      <relevant>jln-ndebug
      <relevant>jln-optimization
      <relevant>jln-other-sanitizers
      <relevant>jln-pedantic
      <relevant>jln-pie
      <relevant>jln-relro
      <relevant>jln-rtti
      <relevant>jln-sanitizers
      <relevant>jln-stack-protector
      <relevant>jln-stl-debug
      <relevant>jln-stl-fix
      <relevant>jln-var-init
      <relevant>jln-warnings-as-error
      <relevant>jln-whole-program
      <relevant>jln-windows-bigobj
    ;
  }

  local x_analyzer = [ jln-get-value $(ps) : jln-analyzer : $(jln_env_analyzer) ] ;
  local x_analyzer_too_complex_warning = [ jln-get-value $(ps) : jln-analyzer-too-complex-warning : $(jln_env_analyzer_too_complex_warning) ] ;
  local x_analyzer_verbosity = [ jln-get-value $(ps) : jln-analyzer-verbosity : $(jln_env_analyzer_verbosity) ] ;
  local x_color = [ jln-get-value $(ps) : jln-color : $(jln_env_color) ] ;
  local x_control_flow = [ jln-get-value2 $(ps) : jln-control-flow : jln-control-flow-incidental : $(jln_env_control_flow) ] ;
  local x_conversion_warnings = [ jln-get-value $(ps) : jln-conversion-warnings : $(jln_env_conversion_warnings) ] ;
  local x_coverage = [ jln-get-value2 $(ps) : jln-coverage : jln-coverage-incidental : $(jln_env_coverage) ] ;
  local x_covered_switch_default_warnings = [ jln-get-value $(ps) : jln-covered-switch-default-warnings : $(jln_env_covered_switch_default_warnings) ] ;
  local x_cpu = [ jln-get-value2 $(ps) : jln-cpu : jln-cpu-incidental : $(jln_env_cpu) ] ;
  local x_debug = [ jln-get-value2 $(ps) : jln-debug : jln-debug-incidental : $(jln_env_debug) ] ;
  local x_diagnostics_format = [ jln-get-value $(ps) : jln-diagnostics-format : $(jln_env_diagnostics_format) ] ;
  local x_diagnostics_show_template_tree = [ jln-get-value $(ps) : jln-diagnostics-show-template-tree : $(jln_env_diagnostics_show_template_tree) ] ;
  local x_elide_type = [ jln-get-value $(ps) : jln-elide-type : $(jln_env_elide_type) ] ;
  local x_exceptions = [ jln-get-value2 $(ps) : jln-exceptions : jln-exceptions-incidental : $(jln_env_exceptions) ] ;
  local x_fix_compiler_error = [ jln-get-value $(ps) : jln-fix-compiler-error : $(jln_env_fix_compiler_error) ] ;
  local x_float_sanitizers = [ jln-get-value2 $(ps) : jln-float-sanitizers : jln-float-sanitizers-incidental : $(jln_env_float_sanitizers) ] ;
  local x_integer_sanitizers = [ jln-get-value2 $(ps) : jln-integer-sanitizers : jln-integer-sanitizers-incidental : $(jln_env_integer_sanitizers) ] ;
  local x_linker = [ jln-get-value $(ps) : jln-linker : $(jln_env_linker) ] ;
  local x_lto = [ jln-get-value2 $(ps) : jln-lto : jln-lto-incidental : $(jln_env_lto) ] ;
  local x_msvc_conformance = [ jln-get-value2 $(ps) : jln-msvc-conformance : jln-msvc-conformance-incidental : $(jln_env_msvc_conformance) ] ;
  local x_msvc_crt_secure_no_warnings = [ jln-get-value $(ps) : jln-msvc-crt-secure-no-warnings : $(jln_env_msvc_crt_secure_no_warnings) ] ;
  local x_msvc_diagnostics_format = [ jln-get-value $(ps) : jln-msvc-diagnostics-format : $(jln_env_msvc_diagnostics_format) ] ;
  local x_msvc_isystem = [ jln-get-value $(ps) : jln-msvc-isystem : $(jln_env_msvc_isystem) ] ;
  local x_msvc_isystem_with_template_from_non_external = [ jln-get-value $(ps) : jln-msvc-isystem-with-template-from-non-external : $(jln_env_msvc_isystem_with_template_from_non_external) ] ;
  local x_ndebug = [ jln-get-value2 $(ps) : jln-ndebug : jln-ndebug-incidental : $(jln_env_ndebug) ] ;
  local x_noexcept_warnings = [ jln-get-value $(ps) : jln-noexcept-warnings : $(jln_env_noexcept_warnings) ] ;
  local x_optimization = [ jln-get-value2 $(ps) : jln-optimization : jln-optimization-incidental : $(jln_env_optimization) ] ;
  local x_other_sanitizers = [ jln-get-value2 $(ps) : jln-other-sanitizers : jln-other-sanitizers-incidental : $(jln_env_other_sanitizers) ] ;
  local x_pedantic = [ jln-get-value2 $(ps) : jln-pedantic : jln-pedantic-incidental : $(jln_env_pedantic) ] ;
  local x_pie = [ jln-get-value2 $(ps) : jln-pie : jln-pie-incidental : $(jln_env_pie) ] ;
  local x_relro = [ jln-get-value2 $(ps) : jln-relro : jln-relro-incidental : $(jln_env_relro) ] ;
  local x_reproducible_build_warnings = [ jln-get-value $(ps) : jln-reproducible-build-warnings : $(jln_env_reproducible_build_warnings) ] ;
  local x_rtti = [ jln-get-value2 $(ps) : jln-rtti : jln-rtti-incidental : $(jln_env_rtti) ] ;
  local x_sanitizers = [ jln-get-value2 $(ps) : jln-sanitizers : jln-sanitizers-incidental : $(jln_env_sanitizers) ] ;
  local x_shadow_warnings = [ jln-get-value $(ps) : jln-shadow-warnings : $(jln_env_shadow_warnings) ] ;
  local x_stack_protector = [ jln-get-value2 $(ps) : jln-stack-protector : jln-stack-protector-incidental : $(jln_env_stack_protector) ] ;
  local x_stl_debug = [ jln-get-value2 $(ps) : jln-stl-debug : jln-stl-debug-incidental : $(jln_env_stl_debug) ] ;
  local x_stl_fix = [ jln-get-value2 $(ps) : jln-stl-fix : jln-stl-fix-incidental : $(jln_env_stl_fix) ] ;
  local x_suggestions = [ jln-get-value $(ps) : jln-suggestions : $(jln_env_suggestions) ] ;
  local x_switch_warnings = [ jln-get-value $(ps) : jln-switch-warnings : $(jln_env_switch_warnings) ] ;
  local x_unsafe_buffer_usage_warnings = [ jln-get-value $(ps) : jln-unsafe-buffer-usage-warnings : $(jln_env_unsafe_buffer_usage_warnings) ] ;
  local x_var_init = [ jln-get-value2 $(ps) : jln-var-init : jln-var-init-incidental : $(jln_env_var_init) ] ;
  local x_warnings = [ jln-get-value $(ps) : jln-warnings : $(jln_env_warnings) ] ;
  local x_warnings_as_error = [ jln-get-value2 $(ps) : jln-warnings-as-error : jln-warnings-as-error-incidental : $(jln_env_warnings_as_error) ] ;
  local x_whole_program = [ jln-get-value2 $(ps) : jln-whole-program : jln-whole-program-incidental : $(jln_env_whole_program) ] ;
  local x_windows_abi_compatibility_warnings = [ jln-get-value $(ps) : jln-windows-abi-compatibility-warnings : $(jln_env_windows_abi_compatibility_warnings) ] ;
  local x_windows_bigobj = [ jln-get-value2 $(ps) : jln-windows-bigobj : jln-windows-bigobj-incidental : $(jln_env_windows_bigobj) ] ;

  if $(x_ndebug) != "default"
  {
    if ( $(JLN_NORMALIZED_CXX_COMP) = "msvc" || $(JLN_NORMALIZED_CXX_COMP) = "intel' && $(original_version) = 'windows" )
    {
      if $(x_ndebug) = "off"
      {
        flags +=
          <cxxflags>"/UNDEBUG"
        ;
      }
      else
      {
        if $(x_ndebug) = "on"
        {
          flags +=
            <cxxflags>"/DNDEBUG"
          ;
        }
        else
        {
          if $(x_optimization) != "default"
          {
            if ! ( ( $(x_optimization) = "0" || $(x_optimization) = "g" ) )
            {
              flags +=
                <cxxflags>"/DNDEBUG"
              ;
            }
          }
        }
      }
    }
    else
    {
      if $(x_ndebug) = "off"
      {
        flags +=
          <cxxflags>"-UNDEBUG"
        ;
      }
      else
      {
        if $(x_ndebug) = "on"
        {
          flags +=
            <cxxflags>"-DNDEBUG"
          ;
        }
        else
        {
          if $(x_optimization) != "default"
          {
            if ! ( ( $(x_optimization) = "0" || $(x_optimization) = "g" ) )
            {
              flags +=
                <cxxflags>"-DNDEBUG"
              ;
            }
          }
        }
      }
    }
  }
  if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" || $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) )
  {
    if $(x_warnings) != "default"
    {
      if $(x_warnings) = "off"
      {
        flags +=
          <cxxflags>"-w"
        ;
      }
      else
      {
        if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
        {
          flags +=
            <cxxflags>"-Wall"
            <cxxflags>"-Wextra"
            <cxxflags>"-Wcast-align"
            <cxxflags>"-Wcast-qual"
            <cxxflags>"-Wdisabled-optimization"
            <cxxflags>"-Wfloat-equal"
            <cxxflags>"-Wformat-security"
            <cxxflags>"-Wformat=2"
            <cxxflags>"-Winvalid-pch"
            <cxxflags>"-Wmissing-include-dirs"
            <cxxflags>"-Wpacked"
            <cxxflags>"-Wredundant-decls"
            <cxxflags>"-Wundef"
            <cxxflags>"-Wunused-macros"
            <cxxflags>"-Wpointer-arith"
            <cxxflags>"-Wmissing-declarations"
            <cxxflags>"-Wnon-virtual-dtor"
            <cxxflags>"-Wold-style-cast"
            <cxxflags>"-Woverloaded-virtual"
          ;
          if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400007 ]
          {
            flags +=
              <cxxflags>"-Wsuggest-attribute=noreturn"
              <cxxflags>"-Wzero-as-null-pointer-constant"
              <cxxflags>"-Wlogical-op"
              <cxxflags>"-Wvector-operation-performance"
              <cxxflags>"-Wdouble-promotion"
              <cxxflags>"-Wtrampolines"
            ;
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400008 ]
            {
              flags +=
                <cxxflags>"-Wuseless-cast"
              ;
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400009 ]
              {
                flags +=
                  <cxxflags>"-Wconditionally-supported"
                  <cxxflags>"-Wfloat-conversion"
                ;
                if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 500001 ]
                {
                  flags +=
                    <cxxflags>"-Wformat-signedness"
                    <cxxflags>"-Warray-bounds=2"
                    <cxxflags>"-Wstrict-null-sentinel"
                    <cxxflags>"-Wsuggest-override"
                  ;
                  if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 600001 ]
                  {
                    flags +=
                      <cxxflags>"-Wduplicated-cond"
                      <cxxflags>"-Wnull-dereference"
                    ;
                    if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 700000 ]
                    {
                      flags +=
                        <cxxflags>"-Waligned-new"
                      ;
                      if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 700001 ]
                      {
                        flags +=
                          <cxxflags>"-Walloc-zero"
                          <cxxflags>"-Walloca"
                          <cxxflags>"-Wformat-overflow=2"
                          <cxxflags>"-Wduplicated-branches"
                        ;
                        if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ]
                        {
                          flags +=
                            <cxxflags>"-Wclass-memaccess"
                          ;
                          if ( $(x_warnings) = "strict" || $(x_warnings) = "very-strict" )
                          {
                            flags +=
                              <cxxflags>"-Wcast-align=strict"
                            ;
                          }
                          if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1400000 ]
                          {
                            flags +=
                              <cxxflags>"-Walloc-size"
                            ;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          flags +=
            <cxxflags>"-Weverything"
            <cxxflags>"-Wno-documentation"
            <cxxflags>"-Wno-documentation-unknown-command"
            <cxxflags>"-Wno-newline-eof"
            <cxxflags>"-Wno-c++98-compat"
            <cxxflags>"-Wno-c++98-compat-pedantic"
            <cxxflags>"-Wno-padded"
            <cxxflags>"-Wno-global-constructors"
            <cxxflags>"-Wno-weak-vtables"
            <cxxflags>"-Wno-exit-time-destructors"
          ;
          if  ! ( ( $(x_switch_warnings) = "off" || $(x_switch_warnings) = "exhaustive-enum" || $(x_switch_warnings) = "exhaustive-enum-and-mandatory-default" ) )
          {
            flags +=
              <cxxflags>"-Wno-switch-enum"
            ;
          }
          if $(x_covered_switch_default_warnings) = "default"
          {
            flags +=
              <cxxflags>"-Wno-covered-switch-default"
            ;
          }
          if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 300009 ]
          {
            flags +=
              <cxxflags>"-Wno-undefined-var-template"
            ;
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 500000 ]
            {
              flags +=
                <cxxflags>"-Wno-inconsistent-missing-destructor-override"
              ;
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 900000 ]
              {
                flags +=
                  <cxxflags>"-Wno-ctad-maybe-unsupported"
                ;
                if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1000000 ]
                {
                  flags +=
                    <cxxflags>"-Wno-c++20-compat"
                  ;
                  if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1100000 ]
                  {
                    flags +=
                      <cxxflags>"-Wno-suggest-destructor-override"
                    ;
                    if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1600000 ]
                    {
                      if $(x_unsafe_buffer_usage_warnings) = "default"
                      {
                        flags +=
                          <cxxflags>"-Wno-unsafe-buffer-usage"
                        ;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
    {
      if $(x_switch_warnings) != "default"
      {
        if $(x_switch_warnings) = "on"
        {
          flags +=
            <cxxflags>"-Wswitch"
          ;
        }
        else
        {
          if $(x_switch_warnings) = "exhaustive-enum"
          {
            flags +=
              <cxxflags>"-Wswitch-enum"
            ;
          }
          else
          {
            if $(x_switch_warnings) = "mandatory-default"
            {
              flags +=
                <cxxflags>"-Wswitch-default"
              ;
            }
            else
            {
              if $(x_switch_warnings) = "exhaustive-enum-and-mandatory-default"
              {
                flags +=
                  <cxxflags>"-Wswitch-default"
                  <cxxflags>"-Wswitch-enum"
                ;
              }
              else
              {
                flags +=
                  <cxxflags>"-Wno-switch"
                  <cxxflags>"-Wno-switch-enum"
                  <cxxflags>"-Wno-switch-default"
                ;
              }
            }
          }
        }
      }
    }
    else
    {
      if $(x_switch_warnings) != "default"
      {
        if $(x_switch_warnings) = "on"
        {
          flags +=
            <cxxflags>"-Wswitch"
            <cxxflags>"-Wno-switch-default"
          ;
        }
        else
        {
          if $(x_switch_warnings) = "mandatory-default"
          {
            flags +=
              <cxxflags>"-Wswitch"
              <cxxflags>"-Wswitch-default"
            ;
          }
          else
          {
            if $(x_switch_warnings) = "exhaustive-enum"
            {
              flags +=
                <cxxflags>"-Wswitch"
                <cxxflags>"-Wswitch-enum"
                <cxxflags>"-Wno-switch-default"
              ;
            }
            else
            {
              if $(x_switch_warnings) = "exhaustive-enum-and-mandatory-default"
              {
                flags +=
                  <cxxflags>"-Wswitch"
                  <cxxflags>"-Wswitch-enum"
                  <cxxflags>"-Wswitch-default"
                ;
              }
              else
              {
                flags +=
                  <cxxflags>"-Wno-switch"
                  <cxxflags>"-Wno-switch-enum"
                  <cxxflags>"-Wno-switch-default"
                ;
              }
            }
          }
        }
      }
      if $(x_covered_switch_default_warnings) != "default"
      {
        if $(x_covered_switch_default_warnings) = "off"
        {
          flags +=
            <cxxflags>"-Wno-covered-switch-default"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-Wcovered-switch-default"
          ;
        }
      }
    }
    if $(x_unsafe_buffer_usage_warnings) != "default"
    {
      if ( $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1600000 ] )
      {
        if $(x_unsafe_buffer_usage_warnings) = "off"
        {
          flags +=
            <cxxflags>"-Wno-unsafe-buffer-usage"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-Wunsafe-buffer-usage"
          ;
        }
      }
    }
    if $(x_diagnostics_show_template_tree) != "default"
    {
      if ( ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ] ) || $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) )
      {
        if $(x_diagnostics_show_template_tree) = "on"
        {
          flags +=
            <cxxflags>"-fdiagnostics-show-template-tree"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-fno-diagnostics-show-template-tree"
          ;
        }
      }
    }
    if $(x_elide_type) != "default"
    {
      if $(x_elide_type) = "on"
      {
        if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ] )
        {
          flags +=
            <cxxflags>"-felide-type"
          ;
        }
      }
      else
      {
        if ( ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ] ) || ( $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 300004 ] ) )
        {
          flags +=
            <cxxflags>"-fno-elide-type"
          ;
        }
      }
    }
    if $(x_exceptions) != "default"
    {
      if $(x_exceptions) = "on"
      {
        flags +=
          <cxxflags>"-fexceptions"
        ;
        if $(JLN_NORMALIZED_CXX_COMP) = "clang-emcc"
        {
          flags +=
            <cxxflags>"-sDISABLE_EXCEPTION_CATCHING=0"
          ;
        }
      }
      else
      {
        flags +=
          <cxxflags>"-fno-exceptions"
        ;
      }
    }
    if $(x_rtti) != "default"
    {
      if $(x_rtti) = "on"
      {
        flags +=
          <cxxflags>"-frtti"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"-fno-rtti"
        ;
      }
    }
    if $(x_var_init) != "default"
    {
      if ( ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1200000 ] ) || ( $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ] ) )
      {
        if ( $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) && ! [ numbers.less 1500000 $(JLN_NORMALIZED_CXX_COMP_VERSION) ] )
        {
          flags +=
            <cxxflags>"-enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang"
          ;
        }
        if $(x_var_init) = "pattern"
        {
          flags +=
            <cxxflags>"-ftrivial-auto-var-init=pattern"
          ;
        }
        else
        {
          if $(x_var_init) = "zero"
          {
            flags +=
              <cxxflags>"-ftrivial-auto-var-init=zero"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"-ftrivial-auto-var-init=uninitialized"
            ;
          }
        }
      }
    }
    if $(x_windows_abi_compatibility_warnings) != "default"
    {
      if ( ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1000000 ] ) || $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) )
      {
        if $(x_windows_abi_compatibility_warnings) = "on"
        {
          flags +=
            <cxxflags>"-Wmismatched-tags"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-Wno-mismatched-tags"
          ;
        }
      }
    }
    if $(x_warnings_as_error) != "default"
    {
      if $(x_warnings_as_error) = "on"
      {
        flags +=
          <cxxflags>"-Werror"
        ;
      }
      else
      {
        if $(x_warnings_as_error) = "basic"
        {
          flags +=
            <cxxflags>"-Werror=return-type"
            <cxxflags>"-Werror=init-self"
          ;
          if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
          {
            flags +=
              <cxxflags>"-Werror=div-by-zero"
            ;
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 500001 ]
            {
              flags +=
                <cxxflags>"-Werror=array-bounds"
                <cxxflags>"-Werror=logical-op"
                <cxxflags>"-Werror=logical-not-parentheses"
              ;
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 700000 ]
              {
                flags +=
                  <cxxflags>"-Werror=literal-suffix"
                ;
              }
            }
          }
          else
          {
            flags +=
              <cxxflags>"-Werror=array-bounds"
              <cxxflags>"-Werror=division-by-zero"
            ;
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 300004 ]
            {
              flags +=
                <cxxflags>"-Werror=logical-not-parentheses"
              ;
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 300006 ]
              {
                flags +=
                  <cxxflags>"-Werror=delete-incomplete"
                ;
                if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 600000 ]
                {
                  flags +=
                    <cxxflags>"-Werror=user-defined-literals"
                  ;
                  if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 700000 ]
                  {
                    flags +=
                      <cxxflags>"-Werror=dynamic-class-memaccess"
                    ;
                  }
                }
              }
            }
          }
        }
        else
        {
          flags +=
            <cxxflags>"-Wno-error"
          ;
        }
      }
    }
    if $(x_suggestions) != "default"
    {
      if $(x_suggestions) != "off"
      {
        if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
        {
          flags +=
            <cxxflags>"-Wsuggest-attribute=pure"
            <cxxflags>"-Wsuggest-attribute=const"
          ;
          if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 500000 ]
          {
            flags +=
              <cxxflags>"-Wsuggest-final-types"
              <cxxflags>"-Wsuggest-final-methods"
            ;
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 500001 ]
            {
              flags +=
                <cxxflags>"-Wnoexcept"
              ;
            }
          }
        }
      }
    }
    if $(x_sanitizers) != "default"
    {
      if $(x_sanitizers) = "off"
      {
        flags +=
          <cxxflags>"-fno-sanitize=all"
          <linkflags>"-fno-sanitize=all"
        ;
      }
      else
      {
        if $(JLN_NORMALIZED_CXX_COMP) = "clang-cl"
        {
          flags +=
            <cxxflags>"-fsanitize=undefined"
            <cxxflags>"-fsanitize=address"
            <cxxflags>"-fsanitize-address-use-after-scope"
          ;
        }
        else
        {
          if ( $(JLN_NORMALIZED_CXX_COMP) = "clang" || $(JLN_NORMALIZED_CXX_COMP) = "clang-emcc" )
          {
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 300001 ]
            {
              flags +=
                <cxxflags>"-fsanitize=undefined"
                <cxxflags>"-fsanitize=address"
                <cxxflags>"-fsanitize-address-use-after-scope"
                <cxxflags>"-fno-omit-frame-pointer"
                <cxxflags>"-fno-optimize-sibling-calls"
                <linkflags>"-fsanitize=undefined"
                <linkflags>"-fsanitize=address"
              ;
              if $(JLN_NORMALIZED_CXX_COMP) = "clang"
              {
                if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 300004 ]
                {
                  flags +=
                    <cxxflags>"-fsanitize=leak"
                    <linkflags>"-fsanitize=leak"
                  ;
                }
                if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 600000 ]
                {
                  if $(x_stack_protector) != "default"
                  {
                    if $(x_stack_protector) != "off"
                    {
                      flags +=
                        <cxxflags>"-fsanitize-minimal-runtime"
                      ;
                    }
                  }
                }
              }
            }
          }
          else
          {
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400008 ]
            {
              flags +=
                <cxxflags>"-fsanitize=address"
                <cxxflags>"-fno-omit-frame-pointer"
                <cxxflags>"-fno-optimize-sibling-calls"
                <linkflags>"-fsanitize=address"
              ;
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400009 ]
              {
                flags +=
                  <cxxflags>"-fsanitize=undefined"
                  <cxxflags>"-fsanitize=leak"
                  <linkflags>"-fsanitize=undefined"
                  <linkflags>"-fsanitize=leak"
                ;
              }
            }
          }
        }
      }
    }
    if $(x_control_flow) != "default"
    {
      if $(JLN_NORMALIZED_CXX_COMP) = "clang-emcc"
      {
        if $(x_control_flow) = "off"
        {
          flags +=
            <linkflags>"-sASSERTIONS=0"
            <linkflags>"-sSAFE_HEAP=0"
          ;
        }
        else
        {
          flags +=
            <linkflags>"-sASSERTIONS=1"
            <linkflags>"-sDEMANGLE_SUPPORT=1"
          ;
          if  ! ( ( $(x_sanitizers) = "on" ) )
          {
            flags +=
              <linkflags>"-sSAFE_HEAP=1"
            ;
          }
        }
      }
      else
      {
        if $(x_control_flow) = "off"
        {
          if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ] )
          {
            flags +=
              <cxxflags>"-fcf-protection=none"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"-fno-sanitize=cfi"
              <cxxflags>"-fcf-protection=none"
              <cxxflags>"-fno-sanitize-cfi-cross-dso"
              <linkflags>"-fno-sanitize=cfi"
            ;
          }
        }
        else
        {
          if ( ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ] ) || $(JLN_NORMALIZED_CXX_COMP) != "gcc" )
          {
            if $(x_control_flow) = "branch"
            {
              flags +=
                <cxxflags>"-fcf-protection=branch"
              ;
            }
            else
            {
              if $(x_control_flow) = "return"
              {
                flags +=
                  <cxxflags>"-fcf-protection=return"
                ;
              }
              else
              {
                flags +=
                  <cxxflags>"-fcf-protection=full"
                ;
              }
            }
            if ( $(x_control_flow) = "allow-bugs" && $(JLN_NORMALIZED_CXX_COMP) = "clang" )
            {
              flags +=
                <cxxflags>"-fsanitize=cfi"
                <cxxflags>"-fvisibility=hidden"
                <cxxflags>"-flto"
                <linkflags>"-fsanitize=cfi"
                <linkflags>"-flto"
              ;
            }
          }
        }
      }
    }
    if $(x_color) != "default"
    {
      if ( ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400009 ] || $(JLN_NORMALIZED_CXX_COMP) != "gcc" )
      {
        if $(x_color) = "auto"
        {
          flags +=
            <cxxflags>"-fdiagnostics-color=auto"
          ;
        }
        else
        {
          if $(x_color) = "never"
          {
            flags +=
              <cxxflags>"-fdiagnostics-color=never"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"-fdiagnostics-color=always"
            ;
          }
        }
      }
    }
    if $(x_reproducible_build_warnings) != "default"
    {
      if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400009 ] )
      {
        if $(x_reproducible_build_warnings) = "on"
        {
          flags +=
            <cxxflags>"-Wdate-time"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-Wno-date-time"
          ;
        }
      }
    }
    if $(x_diagnostics_format) != "default"
    {
      if $(x_diagnostics_format) = "fixits"
      {
        if ( ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 700000 ] ) || ( $(JLN_NORMALIZED_CXX_COMP) != "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 500000 ] ) )
        {
          flags +=
            <cxxflags>"-fdiagnostics-parseable-fixits"
          ;
        }
      }
      else
      {
        if $(x_diagnostics_format) = "patch"
        {
          if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 700000 ] )
          {
            flags +=
              <cxxflags>"-fdiagnostics-generate-patch"
            ;
          }
        }
        else
        {
          if $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE)
          {
            flags +=
              <cxxflags>"-fdiagnostics-print-source-range-info"
            ;
          }
        }
      }
    }
    if $(x_fix_compiler_error) != "default"
    {
      if $(x_fix_compiler_error) = "on"
      {
        if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
        {
          if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400007 ]
          {
            flags +=
              <cxxflags>"-Werror=narrowing"
            ;
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 700001 ]
            {
              flags +=
                <cxxflags>"-Werror=literal-suffix"
              ;
            }
          }
        }
        flags +=
          <cxxflags>"-Werror=write-strings"
        ;
      }
      else
      {
        if $(JLN_NORMALIZED_CXX_COMP) != "gcc"
        {
          flags +=
            <cxxflags>"-Wno-error=c++11-narrowing"
            <cxxflags>"-Wno-reserved-user-defined-literal"
          ;
        }
      }
    }
    if $(x_lto) != "default"
    {
      if $(x_lto) = "off"
      {
        flags +=
          <cxxflags>"-fno-lto"
          <linkflags>"-fno-lto"
        ;
      }
      else
      {
        if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
        {
          flags +=
            <cxxflags>"-flto"
            <linkflags>"-flto"
          ;
          if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 500000 ]
          {
            if $(x_warnings) != "default"
            {
              if $(x_warnings) != "off"
              {
                flags +=
                  <cxxflags>"-flto-odr-type-merging"
                  <linkflags>"-flto-odr-type-merging"
                ;
              }
            }
            if $(x_lto) = "fat"
            {
              flags +=
                <cxxflags>"-ffat-lto-objects"
              ;
            }
            else
            {
              if $(x_lto) = "thin"
              {
                flags +=
                  <linkflags>"-fuse-linker-plugin"
                ;
              }
            }
          }
        }
        else
        {
          if $(JLN_NORMALIZED_CXX_COMP) = "clang-cl"
          {
            flags +=
              <linkflags>"-fuse-ld=lld"
            ;
          }
          if ( ( $(x_lto) = "thin" || $(x_lto) = "on" ) && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 600000 ] )
          {
            flags +=
              <cxxflags>"-flto=thin"
              <linkflags>"-flto=thin"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"-flto"
              <linkflags>"-flto"
            ;
          }
        }
      }
    }
    if $(x_shadow_warnings) != "default"
    {
      if $(x_shadow_warnings) = "off"
      {
        flags +=
          <cxxflags>"-Wno-shadow"
        ;
        if ( $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ] )
        {
          flags +=
            <cxxflags>"-Wno-shadow-field"
          ;
        }
      }
      else
      {
        if $(x_shadow_warnings) = "on"
        {
          flags +=
            <cxxflags>"-Wshadow"
          ;
        }
        else
        {
          if $(x_shadow_warnings) = "all"
          {
            if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
            {
              flags +=
                <cxxflags>"-Wshadow"
              ;
            }
            else
            {
              flags +=
                <cxxflags>"-Wshadow-all"
              ;
            }
          }
          else
          {
            if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 700001 ] )
            {
              if $(x_shadow_warnings) = "local"
              {
                flags +=
                  <cxxflags>"-Wshadow=local"
                ;
              }
              else
              {
                flags +=
                  <cxxflags>"-Wshadow=compatible-local"
                ;
              }
            }
          }
        }
      }
    }
    if $(x_float_sanitizers) != "default"
    {
      if ( ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 500000 ] ) || ( $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 500000 ] ) )
      {
        if $(x_float_sanitizers) = "on"
        {
          flags +=
            <cxxflags>"-fsanitize=float-divide-by-zero"
            <cxxflags>"-fsanitize=float-cast-overflow"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-fno-sanitize=float-divide-by-zero"
            <cxxflags>"-fno-sanitize=float-cast-overflow"
          ;
        }
      }
    }
    if $(x_integer_sanitizers) != "default"
    {
      if ( $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 500000 ] )
      {
        if $(x_integer_sanitizers) = "on"
        {
          flags +=
            <cxxflags>"-fsanitize=integer"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-fno-sanitize=integer"
          ;
        }
      }
      else
      {
        if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400009 ] )
        {
          if $(x_integer_sanitizers) = "on"
          {
            flags +=
              <cxxflags>"-ftrapv"
              <cxxflags>"-fsanitize=undefined"
            ;
          }
        }
      }
    }
  }
  if $(x_conversion_warnings) != "default"
  {
    if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" || $(JLN_NORMALIZED_CXX_IS_CLANG_LIKE) || $(JLN_NORMALIZED_CXX_COMP) = "intel' && $(original_version) = 'linux" )
    {
      if $(x_conversion_warnings) = "on"
      {
        flags +=
          <cxxflags>"-Wconversion"
          <cxxflags>"-Wsign-compare"
          <cxxflags>"-Wsign-conversion"
        ;
      }
      else
      {
        if $(x_conversion_warnings) = "conversion"
        {
          flags +=
            <cxxflags>"-Wconversion"
          ;
        }
        else
        {
          if $(x_conversion_warnings) = "sign"
          {
            flags +=
              <cxxflags>"-Wsign-compare"
              <cxxflags>"-Wsign-conversion"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"-Wno-conversion"
              <cxxflags>"-Wno-sign-compare"
              <cxxflags>"-Wno-sign-conversion"
            ;
          }
        }
      }
    }
  }
  if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" || $(JLN_NORMALIZED_CXX_COMP) = "clang" || $(JLN_NORMALIZED_CXX_COMP) = "clang-emcc" )
  {
    if $(x_stl_debug) != "default"
    {
      if $(x_stl_debug) != "off"
      {
        if $(x_stl_debug) = "assert-as-exception"
        {
          flags +=
            <cxxflags>"-D_LIBCPP_DEBUG_USE_EXCEPTIONS"
          ;
        }
        if ( $(x_stl_debug) = "allow-broken-abi" || $(x_stl_debug) = "allow-broken-abi-and-bugs" )
        {
          if $(JLN_NORMALIZED_CXX_COMP) = "clang"
          {
            if ( ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ] || $(x_stl_debug) = "allow-broken-abi-and-bugs" )
            {
              flags +=
                <cxxflags>"-D_LIBCPP_DEBUG=1"
              ;
            }
          }
          flags +=
            <cxxflags>"-D_GLIBCXX_DEBUG"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-D_GLIBCXX_ASSERTIONS"
          ;
        }
        if $(x_pedantic) != "default"
        {
          if $(x_pedantic) != "off"
          {
            flags +=
              <cxxflags>"-D_GLIBCXX_DEBUG_PEDANTIC"
            ;
          }
        }
      }
    }
    if $(x_pedantic) != "default"
    {
      if $(x_pedantic) != "off"
      {
        flags +=
          <cxxflags>"-pedantic"
        ;
        if $(x_pedantic) = "as-error"
        {
          flags +=
            <cxxflags>"-pedantic-errors"
          ;
        }
      }
    }
  }
  if $(JLN_NORMALIZED_CXX_COMP) = "clang-emcc"
  {
    if $(x_optimization) != "default"
    {
      if $(x_optimization) = "0"
      {
        flags +=
          <cxxflags>"-O0"
          <linkflags>"-O0"
        ;
      }
      else
      {
        if $(x_optimization) = "g"
        {
          flags +=
            <cxxflags>"-Og"
            <linkflags>"-Og"
          ;
        }
        else
        {
          if $(x_optimization) = "1"
          {
            flags +=
              <cxxflags>"-O1"
              <linkflags>"-O1"
            ;
          }
          else
          {
            if $(x_optimization) = "2"
            {
              flags +=
                <cxxflags>"-O2"
                <linkflags>"-O2"
              ;
            }
            else
            {
              if $(x_optimization) = "3"
              {
                flags +=
                  <cxxflags>"-O3"
                  <linkflags>"-O3"
                ;
              }
              else
              {
                if $(x_optimization) = "fast"
                {
                  flags +=
                    <cxxflags>"-O3"
                    <cxxflags>"-mnontrapping-fptoint"
                    <linkflags>"-O3"
                    <linkflags>"-mnontrapping-fptoint"
                  ;
                }
                else
                {
                  if $(x_optimization) = "size"
                  {
                    flags +=
                      <cxxflags>"-Os"
                      <linkflags>"-Os"
                    ;
                  }
                  else
                  {
                    flags +=
                      <cxxflags>"-Oz"
                      <linkflags>"-Oz"
                    ;
                  }
                }
              }
            }
          }
        }
      }
    }
    if $(x_debug) != "default"
    {
      if $(x_debug) = "off"
      {
        flags +=
          <cxxflags>"-g0"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"-g"
        ;
      }
    }
  }
  else
  {
    if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" || $(JLN_NORMALIZED_CXX_COMP) = "clang" )
    {
      if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1200000 ] )
      {
        flags +=
          <cxxflags>"-ffold-simple-inlines"
        ;
      }
      if $(x_coverage) != "default"
      {
        if $(x_coverage) = "on"
        {
          flags +=
            <cxxflags>"--coverage"
            <linkflags>"--coverage"
          ;
          if $(JLN_NORMALIZED_CXX_COMP) = "clang"
          {
            flags +=
              <linkflags>"-lprofile_rt"
            ;
          }
        }
      }
      if $(x_debug) != "default"
      {
        if $(x_debug) = "off"
        {
          flags +=
            <cxxflags>"-g0"
          ;
        }
        else
        {
          if $(x_debug) = "gdb"
          {
            flags +=
              <cxxflags>"-ggdb"
            ;
          }
          else
          {
            if $(JLN_NORMALIZED_CXX_COMP) = "clang"
            {
              if $(x_debug) = "line-tables-only"
              {
                flags +=
                  <cxxflags>"-gline-tables-only"
                ;
              }
              else
              {
                if $(x_debug) = "lldb"
                {
                  flags +=
                    <cxxflags>"-glldb"
                  ;
                }
                else
                {
                  if $(x_debug) = "sce"
                  {
                    flags +=
                      <cxxflags>"-gsce"
                    ;
                  }
                  else
                  {
                    flags +=
                      <cxxflags>"-g"
                    ;
                  }
                }
              }
            }
            else
            {
              flags +=
                <cxxflags>"-g"
              ;
            }
          }
        }
      }
      if $(x_optimization) != "default"
      {
        if $(x_optimization) = "0"
        {
          flags +=
            <cxxflags>"-O0"
          ;
        }
        else
        {
          if $(x_optimization) = "g"
          {
            flags +=
              <cxxflags>"-Og"
            ;
          }
          else
          {
            flags +=
              <linkflags>"-Wl,-O1"
            ;
            if $(x_optimization) = "1"
            {
              flags +=
                <cxxflags>"-O1"
              ;
            }
            else
            {
              if $(x_optimization) = "2"
              {
                flags +=
                  <cxxflags>"-O2"
                ;
              }
              else
              {
                if $(x_optimization) = "3"
                {
                  flags +=
                    <cxxflags>"-O3"
                  ;
                }
                else
                {
                  if $(x_optimization) = "size"
                  {
                    flags +=
                      <cxxflags>"-Os"
                    ;
                  }
                  else
                  {
                    if $(x_optimization) = "z"
                    {
                      if $(JLN_NORMALIZED_CXX_COMP) = "clang"
                      {
                        flags +=
                          <cxxflags>"-Oz"
                        ;
                      }
                      else
                      {
                        flags +=
                          <cxxflags>"-Os"
                        ;
                      }
                    }
                    else
                    {
                      flags +=
                        <cxxflags>"-Ofast"
                      ;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if $(x_cpu) != "default"
      {
        if $(x_cpu) = "generic"
        {
          flags +=
            <cxxflags>"-mtune=generic"
            <linkflags>"-mtune=generic"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-march=native"
            <cxxflags>"-mtune=native"
            <linkflags>"-march=native"
            <linkflags>"-mtune=native"
          ;
        }
      }
      if $(x_linker) != "default"
      {
        if $(x_linker) = "native"
        {
          if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
          {
            flags +=
              <linkflags>"-fuse-ld=gold"
            ;
          }
          else
          {
            flags +=
              <linkflags>"-fuse-ld=lld"
            ;
          }
        }
        else
        {
          if $(x_linker) = "bfd"
          {
            flags +=
              <linkflags>"-fuse-ld=bfd"
            ;
          }
          else
          {
            if ( $(x_linker) = "gold" || ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 900000 ] ) )
            {
              flags +=
                <linkflags>"-fuse-ld=gold"
              ;
            }
            else
            {
              if $(x_lto) != "default"
              {
                if ( $(x_lto) != "off" && $(JLN_NORMALIZED_CXX_COMP) = "gcc" )
                {
                  flags +=
                    <linkflags>"-fuse-ld=gold"
                  ;
                }
                else
                {
                  flags +=
                    <linkflags>"-fuse-ld=lld"
                  ;
                }
              }
              else
              {
                flags +=
                  <linkflags>"-fuse-ld=lld"
                ;
              }
            }
          }
        }
      }
      if $(x_whole_program) != "default"
      {
        if $(x_whole_program) = "off"
        {
          flags +=
            <cxxflags>"-fno-whole-program"
          ;
          if ( $(JLN_NORMALIZED_CXX_COMP) = "clang" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 300009 ] )
          {
            flags +=
              <cxxflags>"-fno-whole-program-vtables"
              <linkflags>"-fno-whole-program-vtables"
            ;
          }
        }
        else
        {
          if $(linker) = 'ld64'
          {
            flags +=
              <linkflags>"-Wl,-dead_strip"
              <linkflags>"-Wl,-S"
            ;
          }
          else
          {
            flags +=
              <linkflags>"-s"
            ;
            if $(x_whole_program) = "strip-all"
            {
              flags +=
                <linkflags>"-Wl,--gc-sections"
                <linkflags>"-Wl,--strip-all"
              ;
            }
          }
          if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
          {
            flags +=
              <cxxflags>"-fwhole-program"
              <linkflags>"-fwhole-program"
            ;
          }
          else
          {
            if $(JLN_NORMALIZED_CXX_COMP) = "clang"
            {
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 300009 ]
              {
                if $(x_lto) != "default"
                {
                  if $(x_lto) != "off"
                  {
                    flags +=
                      <cxxflags>"-fwhole-program-vtables"
                      <linkflags>"-fwhole-program-vtables"
                    ;
                  }
                }
                if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 700000 ]
                {
                  flags +=
                    <cxxflags>"-fforce-emit-vtables"
                    <linkflags>"-fforce-emit-vtables"
                  ;
                }
              }
            }
          }
        }
      }
      if $(x_stack_protector) != "default"
      {
        if $(x_stack_protector) = "off"
        {
          flags +=
            <cxxflags>"-Wno-stack-protector"
            <cxxflags>"-U_FORTIFY_SOURCE"
            <linkflags>"-Wno-stack-protector"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-D_FORTIFY_SOURCE=2"
            <cxxflags>"-Wstack-protector"
          ;
          if $(x_stack_protector) = "strong"
          {
            if $(JLN_NORMALIZED_CXX_COMP) = "gcc"
            {
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400009 ]
              {
                flags +=
                  <cxxflags>"-fstack-protector-strong"
                  <linkflags>"-fstack-protector-strong"
                ;
                if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ]
                {
                  flags +=
                    <cxxflags>"-fstack-clash-protection"
                    <linkflags>"-fstack-clash-protection"
                  ;
                }
              }
            }
            else
            {
              if $(JLN_NORMALIZED_CXX_COMP) = "clang"
              {
                flags +=
                  <cxxflags>"-fstack-protector-strong"
                  <cxxflags>"-fsanitize=safe-stack"
                  <linkflags>"-fstack-protector-strong"
                  <linkflags>"-fsanitize=safe-stack"
                ;
                if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1100000 ]
                {
                  flags +=
                    <cxxflags>"-fstack-clash-protection"
                    <linkflags>"-fstack-clash-protection"
                  ;
                }
              }
            }
          }
          else
          {
            if $(x_stack_protector) = "all"
            {
              flags +=
                <cxxflags>"-fstack-protector-all"
                <linkflags>"-fstack-protector-all"
              ;
              if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ] )
              {
                flags +=
                  <cxxflags>"-fstack-clash-protection"
                  <linkflags>"-fstack-clash-protection"
                ;
              }
              else
              {
                if $(JLN_NORMALIZED_CXX_COMP) = "clang"
                {
                  flags +=
                    <cxxflags>"-fsanitize=safe-stack"
                    <linkflags>"-fsanitize=safe-stack"
                  ;
                  if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1100000 ]
                  {
                    flags +=
                      <cxxflags>"-fstack-clash-protection"
                      <linkflags>"-fstack-clash-protection"
                    ;
                  }
                }
              }
            }
            else
            {
              flags +=
                <cxxflags>"-fstack-protector"
                <linkflags>"-fstack-protector"
              ;
            }
          }
          if $(JLN_NORMALIZED_CXX_COMP) = "clang"
          {
            flags +=
              <cxxflags>"-fsanitize=shadow-call-stack"
              <linkflags>"-fsanitize=shadow-call-stack"
            ;
          }
        }
      }
      if $(x_relro) != "default"
      {
        if $(x_relro) = "off"
        {
          flags +=
            <linkflags>"-Wl,-z,norelro"
          ;
        }
        else
        {
          if $(x_relro) = "on"
          {
            flags +=
              <linkflags>"-Wl,-z,relro"
            ;
          }
          else
          {
            flags +=
              <linkflags>"-Wl,-z,relro,-z,now,-z,noexecstack"
            ;
            if $(x_linker) != "default"
            {
              if ! ( ( $(x_linker) = "gold" || ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 900000 ] ) || ( $(x_linker) = "native" && $(JLN_NORMALIZED_CXX_COMP) = "gcc" ) ) )
              {
                flags +=
                  <linkflags>"-Wl,-z,separate-code"
                ;
              }
            }
          }
        }
      }
      if $(x_pie) != "default"
      {
        if $(x_pie) = "off"
        {
          flags +=
            <linkflags>"-no-pic"
          ;
        }
        else
        {
          if $(x_pie) = "on"
          {
            flags +=
              <linkflags>"-pie"
            ;
          }
          else
          {
            if $(x_pie) = "fpie"
            {
              flags +=
                <cxxflags>"-fpie"
              ;
            }
            else
            {
              if $(x_pie) = "fpic"
              {
                flags +=
                  <cxxflags>"-fpic"
                ;
              }
              else
              {
                if $(x_pie) = "fPIE"
                {
                  flags +=
                    <cxxflags>"-fPIE"
                  ;
                }
                else
                {
                  if $(x_pie) = "fPIC"
                  {
                    flags +=
                      <cxxflags>"-fPIC"
                    ;
                  }
                  else
                  {
                    flags +=
                      <linkflags>"-static-pie"
                    ;
                  }
                }
              }
            }
          }
        }
      }
      if $(x_other_sanitizers) != "default"
      {
        if $(x_other_sanitizers) = "thread"
        {
          flags +=
            <cxxflags>"-fsanitize=thread"
          ;
        }
        else
        {
          if $(x_other_sanitizers) = "memory"
          {
            if ( $(JLN_NORMALIZED_CXX_COMP) = "clang" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 500000 ] )
            {
              flags +=
                <cxxflags>"-fsanitize=memory"
                <cxxflags>"-fno-omit-frame-pointer"
              ;
            }
          }
          else
          {
            if $(x_other_sanitizers) = "pointer"
            {
              if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 800000 ] )
              {
                flags +=
                  <cxxflags>"-fsanitize=pointer-compare"
                  <cxxflags>"-fsanitize=pointer-subtract"
                ;
              }
            }
          }
        }
      }
      if $(x_noexcept_warnings) != "default"
      {
        if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 400009 ] )
        {
          if $(x_noexcept_warnings) = "on"
          {
            flags +=
              <cxxflags>"-Wnoexcept"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"-Wno-noexcept"
            ;
          }
        }
      }
      if $(x_analyzer) != "default"
      {
        if ( $(JLN_NORMALIZED_CXX_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1000000 ] )
        {
          if $(x_analyzer) = "off"
          {
            flags +=
              <cxxflags>"-fno-analyzer"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"-fanalyzer"
            ;
            if $(x_analyzer) = "taint"
            {
              flags +=
                <cxxflags>"-fanalyzer-checker=taint"
              ;
            }
            if $(x_analyzer_too_complex_warning) != "default"
            {
              if $(x_analyzer_too_complex_warning) = "on"
              {
                flags +=
                  <cxxflags>"-Wanalyzer-too-complex"
                ;
              }
              else
              {
                flags +=
                  <cxxflags>"-Wno-analyzer-too-complex"
                ;
              }
            }
            if $(x_analyzer_verbosity) != "default"
            {
              if $(x_analyzer_verbosity) = "0"
              {
                flags +=
                  <cxxflags>"-fanalyzer-verbosity=0"
                ;
              }
              else
              {
                if $(x_analyzer_verbosity) = "1"
                {
                  flags +=
                    <cxxflags>"-fanalyzer-verbosity=1"
                  ;
                }
                else
                {
                  if $(x_analyzer_verbosity) = "2"
                  {
                    flags +=
                      <cxxflags>"-fanalyzer-verbosity=2"
                    ;
                  }
                  else
                  {
                    flags +=
                      <cxxflags>"-fanalyzer-verbosity=3"
                    ;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if $(linker) = 'lld-link'
  {
    if $(x_lto) != "default"
    {
      if $(x_lto) = "off"
      {
        flags +=
          <cxxflags>"-fno-lto"
        ;
      }
      else
      {
        if ( $(x_lto) = "thin" || $(x_lto) = "on" )
        {
          flags +=
            <cxxflags>"-flto=thin"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-flto"
            <linkflags>"-flto"
          ;
        }
      }
    }
    if $(x_whole_program) != "default"
    {
      if $(x_whole_program) = "off"
      {
        flags +=
          <cxxflags>"-fno-whole-program"
        ;
      }
      else
      {
        if $(x_lto) != "default"
        {
          if $(x_lto) != "off"
          {
            flags +=
              <cxxflags>"-fwhole-program-vtables"
              <linkflags>"-fwhole-program-vtables"
            ;
          }
        }
      }
    }
  }
  if ( $(JLN_NORMALIZED_CXX_COMP) = "msvc" || $(JLN_NORMALIZED_CXX_COMP) = "clang-cl" || $(JLN_NORMALIZED_CXX_COMP) = "intel' && $(original_version) = 'windows" )
  {
    if $(x_exceptions) != "default"
    {
      if $(x_exceptions) = "on"
      {
        flags +=
          <cxxflags>"/EHsc"
          <cxxflags>"/D_HAS_EXCEPTIONS=1"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/EHs-"
          <cxxflags>"/D_HAS_EXCEPTIONS=0"
        ;
      }
    }
    if $(x_rtti) != "default"
    {
      if $(x_rtti) = "on"
      {
        flags +=
          <cxxflags>"/GR"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/GR-"
        ;
      }
    }
    if $(x_stl_debug) != "default"
    {
      if $(x_stl_debug) = "off"
      {
        flags +=
          <cxxflags>"/D_HAS_ITERATOR_DEBUGGING=0"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/D_DEBUG"
          <cxxflags>"/D_HAS_ITERATOR_DEBUGGING=1"
        ;
      }
    }
    if $(x_stl_fix) != "default"
    {
      if $(x_stl_fix) = "on"
      {
        flags +=
          <cxxflags>"/DNOMINMAX"
        ;
      }
    }
    if $(JLN_NORMALIZED_CXX_COMP) != "intel' && $(original_version) = 'windows"
    {
      if $(x_debug) != "default"
      {
        if $(x_debug) = "off"
        {
          flags +=
            <linkflags>"/DEBUG:NONE"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/RTC1"
            <cxxflags>"/Od"
          ;
          if $(x_debug) = "on"
          {
            flags +=
              <cxxflags>"/DEBUG"
            ;
          }
          else
          {
            if $(x_debug) = "line-tables-only"
            {
              if $(JLN_NORMALIZED_CXX_COMP) = "clang-cl"
              {
                flags +=
                  <cxxflags>"-gline-tables-only"
                ;
              }
              flags +=
                <cxxflags>"/DEBUG:FASTLINK"
              ;
            }
          }
          if $(x_optimization) != "default"
          {
            if $(x_optimization) = "g"
            {
              flags +=
                <cxxflags>"/Zi"
              ;
            }
            else
            {
              if $(x_whole_program) != "default"
              {
                if $(x_whole_program) = "off"
                {
                  flags +=
                    <cxxflags>"/ZI"
                  ;
                }
                else
                {
                  flags +=
                    <cxxflags>"/Zi"
                  ;
                }
              }
              else
              {
                flags +=
                  <cxxflags>"/ZI"
                ;
              }
            }
          }
          else
          {
            if $(x_whole_program) != "default"
            {
              if $(x_whole_program) = "off"
              {
                flags +=
                  <cxxflags>"/ZI"
                ;
              }
              else
              {
                flags +=
                  <cxxflags>"/Zi"
                ;
              }
            }
            else
            {
              flags +=
                <cxxflags>"/ZI"
              ;
            }
          }
        }
      }
      if $(x_optimization) != "default"
      {
        if $(x_optimization) = "0"
        {
          flags +=
            <cxxflags>"/Ob0"
            <cxxflags>"/Od"
            <cxxflags>"/Oi-"
            <cxxflags>"/Oy-"
          ;
        }
        else
        {
          if $(x_optimization) = "g"
          {
            flags +=
              <cxxflags>"/Ob1"
            ;
          }
          else
          {
            if $(x_optimization) = "1"
            {
              flags +=
                <cxxflags>"/O1"
              ;
            }
            else
            {
              if $(x_optimization) = "2"
              {
                flags +=
                  <cxxflags>"/O2"
                ;
              }
              else
              {
                if $(x_optimization) = "3"
                {
                  flags +=
                    <cxxflags>"/O2"
                  ;
                }
                else
                {
                  if ( $(x_optimization) = "size" || $(x_optimization) = "z" )
                  {
                    flags +=
                      <cxxflags>"/O1"
                      <cxxflags>"/GL"
                      <cxxflags>"/Gw"
                    ;
                  }
                  else
                  {
                    flags +=
                      <cxxflags>"/O2"
                      <cxxflags>"/fp:fast"
                    ;
                  }
                }
              }
            }
          }
        }
      }
      if $(x_linker) != "default"
      {
        if $(JLN_NORMALIZED_CXX_COMP) = "clang-cl"
        {
          if ( $(x_linker) = "lld" || $(x_linker) = "native" )
          {
            flags +=
              <linkflags>"-fuse-ld=lld"
            ;
          }
        }
      }
      if $(x_control_flow) != "default"
      {
        if $(x_control_flow) = "off"
        {
          flags +=
            <cxxflags>"/guard:cf-"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/guard:cf"
          ;
        }
      }
      if $(x_whole_program) != "default"
      {
        if $(x_whole_program) = "off"
        {
          flags +=
            <cxxflags>"/GL-"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/GL"
            <cxxflags>"/Gw"
            <linkflags>"/LTCG"
          ;
          if $(x_whole_program) = "strip-all"
          {
            flags +=
              <linkflags>"/OPT:REF"
            ;
          }
        }
      }
      if $(x_pedantic) != "default"
      {
        if $(x_pedantic) != "off"
        {
          flags +=
            <cxxflags>"/permissive-"
            <cxxflags>"/Zc:__cplusplus"
          ;
        }
      }
      if $(x_stack_protector) != "default"
      {
        if $(x_stack_protector) = "off"
        {
          flags +=
            <cxxflags>"/GS-"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/GS"
            <cxxflags>"/sdl"
          ;
          if $(x_stack_protector) = "strong"
          {
            flags +=
              <cxxflags>"/RTC1"
            ;
            if ( $(JLN_NORMALIZED_CXX_COMP) = "msvc" && ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1600007 ] )
            {
              flags +=
                <cxxflags>"/guard:ehcont"
                <linkflags>"/CETCOMPAT"
              ;
            }
          }
          else
          {
            if $(x_stack_protector) = "all"
            {
              flags +=
                <cxxflags>"/RTC1"
                <cxxflags>"/RTCc"
              ;
            }
          }
        }
      }
    }
  }
  if $(JLN_NORMALIZED_CXX_COMP) = "msvc"
  {
    if $(x_windows_bigobj) != "default"
    {
      flags +=
        <cxxflags>"/bigobj"
      ;
    }
    if $(x_msvc_conformance) != "default"
    {
      if ( $(x_msvc_conformance) = "all" || $(x_msvc_conformance) = "all-without-throwing-new" )
      {
        flags +=
          <cxxflags>"/Zc:inline"
          <cxxflags>"/Zc:referenceBinding"
        ;
        if $(x_msvc_conformance) = "all"
        {
          flags +=
            <cxxflags>"/Zc:throwingNew"
          ;
        }
        if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1500006 ]
        {
          flags +=
            <cxxflags>"/Zc:externConstexpr"
          ;
          if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1600005 ]
          {
            flags +=
              <cxxflags>"/Zc:preprocessor"
            ;
            if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1600008 ]
            {
              flags +=
                <cxxflags>"/Zc:lambda"
              ;
              if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1700004 ]
              {
                flags +=
                  <cxxflags>"/Zc:enumTypes"
                ;
                if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1700005 ]
                {
                  flags +=
                    <cxxflags>"/Zc:templateScope"
                  ;
                }
              }
            }
          }
        }
      }
    }
    if $(x_msvc_crt_secure_no_warnings) != "default"
    {
      if $(x_msvc_crt_secure_no_warnings) = "on"
      {
        flags +=
          <cxxflags>"/D_CRT_SECURE_NO_WARNINGS=1"
        ;
      }
      else
      {
        if $(x_msvc_crt_secure_no_warnings) = "off"
        {
          flags +=
            <cxxflags>"/U_CRT_SECURE_NO_WARNINGS"
          ;
        }
      }
    }
    if $(x_msvc_diagnostics_format) != "default"
    {
      if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1700000 ]
      {
        if $(x_msvc_diagnostics_format) = "classic"
        {
          flags +=
            <cxxflags>"/diagnostics:classic"
          ;
        }
        else
        {
          if $(x_msvc_diagnostics_format) = "column"
          {
            flags +=
              <cxxflags>"/diagnostics:column"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"/diagnostics:caret"
            ;
          }
        }
      }
    }
    if [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1500016 ]
    {
      x_msvc_isystem = "default" ;
    }
    if $(x_msvc_isystem) != "default"
    {
      if $(x_msvc_isystem) = "external-as-include-system-flag"
      {
        if [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1600010 ]
        {
          # unimplementable
        }
        else
        {
          # unimplementable
        }
      }
      else
      {
        if [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1600010 ]
        {
          flags +=
            <cxxflags>"/experimental:external"
          ;
        }
        flags +=
          <cxxflags>"/external:W0"
        ;
        if $(x_msvc_isystem) = "anglebrackets"
        {
          flags +=
            <cxxflags>"/external:anglebrackets"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/external:env:INCLUDE"
            <cxxflags>"/external:env:CAExcludePath"
          ;
        }
      }
      if $(x_msvc_isystem_with_template_from_non_external) != "default"
      {
        if $(x_msvc_isystem_with_template_from_non_external) = "off"
        {
          flags +=
            <cxxflags>"/external:template"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/external:template-"
          ;
        }
      }
      if $(x_warnings) != "default"
      {
        if $(x_warnings) = "off"
        {
          flags +=
            <cxxflags>"/W0"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/wd4710"
            <cxxflags>"/wd4711"
          ;
          if [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900021 ]
          {
            flags +=
              <cxxflags>"/wd4774"
            ;
          }
          if $(x_warnings) = "on"
          {
            flags +=
              <cxxflags>"/W4"
              <cxxflags>"/wd4514"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"/Wall"
              <cxxflags>"/wd4514"
              <cxxflags>"/wd4571"
              <cxxflags>"/wd4355"
              <cxxflags>"/wd4548"
              <cxxflags>"/wd4577"
              <cxxflags>"/wd4820"
              <cxxflags>"/wd5039"
              <cxxflags>"/wd4464"
              <cxxflags>"/wd4868"
              <cxxflags>"/wd5045"
            ;
            if $(x_warnings) = "strict"
            {
              flags +=
                <cxxflags>"/wd4583"
                <cxxflags>"/wd4619"
              ;
            }
          }
        }
      }
      if $(x_switch_warnings) != "default"
      {
        if ( $(x_switch_warnings) = "on" || $(x_switch_warnings) = "mandatory-default" )
        {
          flags +=
            <cxxflags>"/w14062"
          ;
        }
        else
        {
          if ( $(x_switch_warnings) = "exhaustive-enum" || $(x_switch_warnings) = "exhaustive-enum-and-mandatory-default" )
          {
            flags +=
              <cxxflags>"/w14061"
              <cxxflags>"/w14062"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"/wd4061"
              <cxxflags>"/wd4062"
            ;
          }
        }
      }
    }
    else
    {
      if $(x_warnings) != "default"
      {
        if $(x_warnings) = "off"
        {
          flags +=
            <cxxflags>"/W0"
          ;
        }
        else
        {
          if $(x_warnings) = "on"
          {
            flags +=
              <cxxflags>"/W4"
              <cxxflags>"/wd4514"
              <cxxflags>"/wd4711"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"/Wall"
              <cxxflags>"/wd4355"
              <cxxflags>"/wd4514"
              <cxxflags>"/wd4548"
              <cxxflags>"/wd4571"
              <cxxflags>"/wd4577"
              <cxxflags>"/wd4625"
              <cxxflags>"/wd4626"
              <cxxflags>"/wd4668"
              <cxxflags>"/wd4710"
              <cxxflags>"/wd4711"
            ;
            if [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1900021 ]
            {
              flags +=
                <cxxflags>"/wd4774"
              ;
            }
            flags +=
              <cxxflags>"/wd4820"
              <cxxflags>"/wd5026"
              <cxxflags>"/wd5027"
              <cxxflags>"/wd5039"
              <cxxflags>"/wd4464"
              <cxxflags>"/wd4868"
              <cxxflags>"/wd5045"
            ;
            if $(x_warnings) = "strict"
            {
              flags +=
                <cxxflags>"/wd4061"
                <cxxflags>"/wd4266"
                <cxxflags>"/wd4583"
                <cxxflags>"/wd4619"
                <cxxflags>"/wd4623"
                <cxxflags>"/wd5204"
              ;
            }
          }
        }
      }
    }
    if $(x_conversion_warnings) != "default"
    {
      if $(x_conversion_warnings) = "on"
      {
        flags +=
          <cxxflags>"/w14244"
          <cxxflags>"/w14245"
          <cxxflags>"/w14388"
          <cxxflags>"/w14365"
        ;
      }
      else
      {
        if $(x_conversion_warnings) = "conversion"
        {
          flags +=
            <cxxflags>"/w14244"
            <cxxflags>"/w14365"
          ;
        }
        else
        {
          if $(x_conversion_warnings) = "sign"
          {
            flags +=
              <cxxflags>"/w14388"
              <cxxflags>"/w14245"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"/wd4244"
              <cxxflags>"/wd4365"
              <cxxflags>"/wd4388"
              <cxxflags>"/wd4245"
            ;
          }
        }
      }
    }
    if $(x_shadow_warnings) != "default"
    {
      if $(x_shadow_warnings) = "off"
      {
        flags +=
          <cxxflags>"/wd4456"
          <cxxflags>"/wd4459"
        ;
      }
      else
      {
        if ( $(x_shadow_warnings) = "on" || $(x_shadow_warnings) = "all" )
        {
          flags +=
            <cxxflags>"/w4456"
            <cxxflags>"/w4459"
          ;
        }
        else
        {
          if $(x_shadow_warnings) = "local"
          {
            flags +=
              <cxxflags>"/w4456"
              <cxxflags>"/wd4459"
            ;
          }
        }
      }
    }
    if $(x_warnings_as_error) != "default"
    {
      if $(x_warnings_as_error) = "on"
      {
        flags +=
          <cxxflags>"/WX"
        ;
      }
      else
      {
        if $(x_warnings_as_error) = "off"
        {
          flags +=
            <cxxflags>"/WX-"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/we4455"
            <cxxflags>"/we4150"
            <cxxflags>"/we4716"
            <cxxflags>"/we2124"
          ;
        }
      }
    }
    if $(x_lto) != "default"
    {
      if $(x_lto) = "off"
      {
        flags +=
          <cxxflags>"/LTCG:OFF"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/GL"
          <linkflags>"/LTCG"
        ;
      }
    }
    if $(x_sanitizers) != "default"
    {
      if ! [ numbers.less $(JLN_NORMALIZED_CXX_COMP_VERSION) 1600009 ]
      {
        flags +=
          <cxxflags>"/fsanitize=address"
          <cxxflags>"/fsanitize-address-use-after-return"
        ;
      }
      else
      {
        if $(x_sanitizers) = "on"
        {
          flags +=
            <cxxflags>"/sdl"
          ;
        }
        else
        {
          if $(x_stack_protector) != "default"
          {
            if $(x_stack_protector) != "off"
            {
              flags +=
                <cxxflags>"/sdl-"
              ;
            }
          }
        }
      }
    }
  }
  if $(JLN_NORMALIZED_CXX_COMP) = "intel' && $(original_version) = 'windows"
  {
    if $(x_warnings) != "default"
    {
      if $(x_warnings) = "off"
      {
        flags +=
          <cxxflags>"/w"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/W2"
          <cxxflags>"/Qdiag-disable:1418,2259"
        ;
      }
    }
    if $(x_warnings_as_error) != "default"
    {
      if $(x_warnings_as_error) = "on"
      {
        flags +=
          <cxxflags>"/WX"
        ;
      }
      else
      {
        if $(x_warnings_as_error) = "basic"
        {
          flags +=
            <cxxflags>"/Qdiag-error:1079,39,109"
          ;
        }
      }
    }
    if $(x_windows_bigobj) != "default"
    {
      flags +=
        <cxxflags>"/bigobj"
      ;
    }
    if $(x_msvc_conformance) != "default"
    {
      if ( $(x_msvc_conformance) = "all" || $(x_msvc_conformance) = "all-without-throwing-new" )
      {
        flags +=
          <cxxflags>"/Zc:inline"
          <cxxflags>"/Zc:strictStrings"
        ;
        if $(x_msvc_conformance) = "all"
        {
          flags +=
            <cxxflags>"/Zc:throwingNew"
          ;
        }
      }
    }
    if $(x_debug) != "default"
    {
      if $(x_debug) = "off"
      {
        flags +=
          <linkflags>"/DEBUG:NONE"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/RTC1"
          <cxxflags>"/Od"
        ;
        if $(x_debug) = "on"
        {
          flags +=
            <cxxflags>"/debug:full"
          ;
        }
        else
        {
          if $(x_debug) = "line-tables-only"
          {
            flags +=
              <cxxflags>"/debug:minimal"
            ;
          }
        }
        if ( $(x_optimization) = "g" )
        {
          flags +=
            <cxxflags>"/Zi"
          ;
        }
        else
        {
          if $(x_whole_program) != "default"
          {
            if $(x_whole_program) = "off"
            {
              flags +=
                <cxxflags>"/ZI"
              ;
            }
            else
            {
              flags +=
                <cxxflags>"/Zi"
              ;
            }
          }
          else
          {
            flags +=
              <cxxflags>"/ZI"
            ;
          }
        }
      }
    }
    if $(x_optimization) != "default"
    {
      if $(x_optimization) = "0"
      {
        flags +=
          <cxxflags>"/Ob0"
          <cxxflags>"/Od"
          <cxxflags>"/Oi-"
          <cxxflags>"/Oy-"
        ;
      }
      else
      {
        if $(x_optimization) = "g"
        {
          flags +=
            <cxxflags>"/Ob1"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/GF"
          ;
          if $(x_optimization) = "1"
          {
            flags +=
              <cxxflags>"/O1"
            ;
          }
          else
          {
            if $(x_optimization) = "2"
            {
              flags +=
                <cxxflags>"/O2"
              ;
            }
            else
            {
              if $(x_optimization) = "3"
              {
                flags +=
                  <cxxflags>"/O2"
                ;
              }
              else
              {
                if $(x_optimization) = "z"
                {
                  flags +=
                    <cxxflags>"/O3"
                  ;
                }
                else
                {
                  if $(x_optimization) = "size"
                  {
                    flags +=
                      <cxxflags>"/Os"
                    ;
                  }
                  else
                  {
                    flags +=
                      <cxxflags>"/fast"
                    ;
                  }
                }
              }
            }
          }
        }
      }
    }
    if $(x_stack_protector) != "default"
    {
      if $(x_stack_protector) = "off"
      {
        flags +=
          <cxxflags>"/GS-"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/GS"
        ;
        if $(x_stack_protector) = "strong"
        {
          flags +=
            <cxxflags>"/RTC1"
          ;
        }
        else
        {
          if $(x_stack_protector) = "all"
          {
            flags +=
              <cxxflags>"/RTC1"
              <cxxflags>"/RTCc"
            ;
          }
        }
      }
    }
    if $(x_sanitizers) != "default"
    {
      if $(x_sanitizers) = "on"
      {
        flags +=
          <cxxflags>"/Qtrapuv"
        ;
      }
    }
    if $(x_float_sanitizers) != "default"
    {
      if $(x_float_sanitizers) = "on"
      {
        flags +=
          <cxxflags>"/Qfp-stack-check"
          <cxxflags>"/Qfp-trap:common"
        ;
      }
    }
    if $(x_control_flow) != "default"
    {
      if $(x_control_flow) = "off"
      {
        flags +=
          <cxxflags>"/guard:cf-"
          <cxxflags>"/mconditional-branch=keep"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/guard:cf"
        ;
        if $(x_control_flow) = "branch"
        {
          flags +=
            <cxxflags>"/mconditional-branch:all-fix"
            <cxxflags>"/Qcf-protection:branch"
          ;
        }
        else
        {
          if $(x_control_flow) = "on"
          {
            flags +=
              <cxxflags>"/mconditional-branch:all-fix"
              <cxxflags>"/Qcf-protection:full"
            ;
          }
        }
      }
    }
    if $(x_cpu) != "default"
    {
      if $(x_cpu) = "generic"
      {
        flags +=
          <cxxflags>"/Qtune:generic"
          <linkflags>"/Qtune:generic"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/QxHost"
          <linkflags>"/QxHost"
        ;
      }
    }
  }
  else
  {
    if $(JLN_NORMALIZED_CXX_COMP) = "intel' && $(original_version) = 'linux"
    {
      if $(x_warnings) != "default"
      {
        if $(x_warnings) = "off"
        {
          flags +=
            <cxxflags>"-w"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-Wall"
            <cxxflags>"-Warray-bounds"
            <cxxflags>"-Wcast-qual"
            <cxxflags>"-Wchar-subscripts"
            <cxxflags>"-Wdisabled-optimization"
            <cxxflags>"-Wenum-compare"
            <cxxflags>"-Wextra"
            <cxxflags>"-Wfloat-equal"
            <cxxflags>"-Wformat-security"
            <cxxflags>"-Wformat=2"
            <cxxflags>"-Winit-self"
            <cxxflags>"-Winvalid-pch"
            <cxxflags>"-Wmaybe-uninitialized"
            <cxxflags>"-Wmissing-include-dirs"
            <cxxflags>"-Wnarrowing"
            <cxxflags>"-Wnonnull"
            <cxxflags>"-Wparentheses"
            <cxxflags>"-Wpointer-sign"
            <cxxflags>"-Wreorder"
            <cxxflags>"-Wsequence-point"
            <cxxflags>"-Wtrigraphs"
            <cxxflags>"-Wundef"
            <cxxflags>"-Wunused-function"
            <cxxflags>"-Wunused-but-set-variable"
            <cxxflags>"-Wunused-variable"
            <cxxflags>"-Wpointer-arith"
            <cxxflags>"-Wdeprecated"
            <cxxflags>"-Wnon-virtual-dtor"
            <cxxflags>"-Woverloaded-virtual"
          ;
        }
      }
      if $(x_switch_warnings) != "default"
      {
        if ( $(x_switch_warnings) = "on" || $(x_switch_warnings) = "exhaustive-enum" )
        {
          flags +=
            <cxxflags>"-Wswitch-enum"
          ;
        }
        else
        {
          if $(x_switch_warnings) = "mandatory-default"
          {
            flags +=
              <cxxflags>"-Wswitch-default"
            ;
          }
          else
          {
            if $(x_switch_warnings) = "exhaustive-enum-and-mandatory-default"
            {
              flags +=
                <cxxflags>"-Wswitch"
              ;
            }
            else
            {
              flags +=
                <cxxflags>"-Wno-switch"
              ;
            }
          }
        }
      }
      if $(x_warnings_as_error) != "default"
      {
        if $(x_warnings_as_error) = "on"
        {
          flags +=
            <cxxflags>"-Werror"
          ;
        }
        else
        {
          if $(x_warnings_as_error) = "basic"
          {
            flags +=
              <cxxflags>"-diag-error=1079,39,109"
            ;
          }
        }
      }
      if $(x_pedantic) != "default"
      {
        if $(x_pedantic) = "off"
        {
          flags +=
            <cxxflags>"-fgnu-keywords"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-fno-gnu-keywords"
          ;
        }
      }
      if $(x_shadow_warnings) != "default"
      {
        if $(x_shadow_warnings) = "off"
        {
          flags +=
            <cxxflags>"-Wno-shadow"
          ;
        }
        else
        {
          if ( $(x_shadow_warnings) = "on" || $(x_shadow_warnings) = "all" )
          {
            flags +=
              <cxxflags>"-Wshadow"
            ;
          }
        }
      }
      if $(x_stl_debug) != "default"
      {
        if $(x_stl_debug) != "off"
        {
          if ( $(x_stl_debug) = "allow-broken-abi" || $(x_stl_debug) = "allow-broken-abi-and-bugs" )
          {
            flags +=
              <cxxflags>"-D_GLIBCXX_DEBUG"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"-D_GLIBCXX_ASSERTIONS"
            ;
          }
        }
      }
      if $(x_debug) != "default"
      {
        if $(x_debug) = "off"
        {
          flags +=
            <cxxflags>"-g0"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-g"
          ;
        }
      }
      if $(x_optimization) != "default"
      {
        if $(x_optimization) = "0"
        {
          flags +=
            <cxxflags>"-O0"
          ;
        }
        else
        {
          if $(x_optimization) = "g"
          {
            flags +=
              <cxxflags>"-O1"
            ;
          }
          else
          {
            if $(x_optimization) = "1"
            {
              flags +=
                <cxxflags>"-O1"
              ;
            }
            else
            {
              if $(x_optimization) = "2"
              {
                flags +=
                  <cxxflags>"-O2"
                ;
              }
              else
              {
                if $(x_optimization) = "3"
                {
                  flags +=
                    <cxxflags>"-O3"
                  ;
                }
                else
                {
                  if $(x_optimization) = "z"
                  {
                    flags +=
                      <cxxflags>"-fast"
                    ;
                  }
                  else
                  {
                    if $(x_optimization) = "size"
                    {
                      flags +=
                        <cxxflags>"-Os"
                      ;
                    }
                    else
                    {
                      flags +=
                        <cxxflags>"-Ofast"
                      ;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if $(x_stack_protector) != "default"
      {
        if $(x_stack_protector) = "off"
        {
          flags +=
            <cxxflags>"-fno-protector-strong"
            <cxxflags>"-U_FORTIFY_SOURCE"
            <linkflags>"-fno-protector-strong"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-D_FORTIFY_SOURCE=2"
          ;
          if $(x_stack_protector) = "strong"
          {
            flags +=
              <cxxflags>"-fstack-protector-strong"
              <linkflags>"-fstack-protector-strong"
            ;
          }
          else
          {
            if $(x_stack_protector) = "all"
            {
              flags +=
                <cxxflags>"-fstack-protector-all"
                <linkflags>"-fstack-protector-all"
              ;
            }
            else
            {
              flags +=
                <cxxflags>"-fstack-protector"
                <linkflags>"-fstack-protector"
              ;
            }
          }
        }
      }
      if $(x_relro) != "default"
      {
        if $(x_relro) = "off"
        {
          flags +=
            <linkflags>"-Xlinker-znorelro"
          ;
        }
        else
        {
          if $(x_relro) = "on"
          {
            flags +=
              <linkflags>"-Xlinker-zrelro"
            ;
          }
          else
          {
            flags +=
              <linkflags>"-Xlinker-zrelro"
              <linkflags>"-Xlinker-znow"
              <linkflags>"-Xlinker-znoexecstack"
            ;
          }
        }
      }
      if $(x_pie) != "default"
      {
        if $(x_pie) = "off"
        {
          flags +=
            <linkflags>"-no-pic"
          ;
        }
        else
        {
          if $(x_pie) = "on"
          {
            flags +=
              <linkflags>"-pie"
            ;
          }
          else
          {
            if $(x_pie) = "fpie"
            {
              flags +=
                <cxxflags>"-fpie"
              ;
            }
            else
            {
              if $(x_pie) = "fpic"
              {
                flags +=
                  <cxxflags>"-fpic"
                ;
              }
              else
              {
                if $(x_pie) = "fPIE"
                {
                  flags +=
                    <cxxflags>"-fPIE"
                  ;
                }
                else
                {
                  if $(x_pie) = "fPIC"
                  {
                    flags +=
                      <cxxflags>"-fPIC"
                    ;
                  }
                }
              }
            }
          }
        }
      }
      if $(x_sanitizers) != "default"
      {
        if $(x_sanitizers) = "on"
        {
          flags +=
            <cxxflags>"-ftrapuv"
          ;
        }
      }
      if $(x_integer_sanitizers) != "default"
      {
        if $(x_integer_sanitizers) = "on"
        {
          flags +=
            <cxxflags>"-funsigned-bitfields"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-fno-unsigned-bitfields"
          ;
        }
      }
      if $(x_float_sanitizers) != "default"
      {
        if $(x_float_sanitizers) = "on"
        {
          flags +=
            <cxxflags>"-fp-stack-check"
            <cxxflags>"-fp-trap=common"
          ;
        }
      }
      if $(x_linker) != "default"
      {
        if $(x_linker) = "bfd"
        {
          flags +=
            <linkflags>"-fuse-ld=bfd"
          ;
        }
        else
        {
          if $(x_linker) = "gold"
          {
            flags +=
              <linkflags>"-fuse-ld=gold"
            ;
          }
          else
          {
            flags +=
              <linkflags>"-fuse-ld=lld"
            ;
          }
        }
      }
      if $(x_lto) != "default"
      {
        if $(x_lto) = "off"
        {
          flags +=
            <cxxflags>"-no-ipo"
            <linkflags>"-no-ipo"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-ipo"
            <linkflags>"-ipo"
          ;
          if $(x_lto) = "fat"
          {
            if [ os.name ] = LINUX
            {
              flags +=
                <cxxflags>"-ffat-lto-objects"
                <linkflags>"-ffat-lto-objects"
              ;
            }
          }
        }
      }
      if $(x_control_flow) != "default"
      {
        if $(x_control_flow) = "off"
        {
          flags +=
            <cxxflags>"-mconditional-branch=keep"
            <cxxflags>"-fcf-protection=none"
          ;
        }
        else
        {
          if $(x_control_flow) = "branch"
          {
            flags +=
              <cxxflags>"-mconditional-branch=all-fix"
              <cxxflags>"-fcf-protection=branch"
            ;
          }
          else
          {
            if $(x_control_flow) = "on"
            {
              flags +=
                <cxxflags>"-mconditional-branch=all-fix"
                <cxxflags>"-fcf-protection=full"
              ;
            }
          }
        }
      }
      if $(x_exceptions) != "default"
      {
        if $(x_exceptions) = "on"
        {
          flags +=
            <cxxflags>"-fexceptions"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-fno-exceptions"
          ;
        }
      }
      if $(x_rtti) != "default"
      {
        if $(x_rtti) = "on"
        {
          flags +=
            <cxxflags>"-frtti"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-fno-rtti"
          ;
        }
      }
      if $(x_cpu) != "default"
      {
        if $(x_cpu) = "generic"
        {
          flags +=
            <cxxflags>"-mtune=generic"
            <linkflags>"-mtune=generic"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-xHost"
            <linkflags>"-xHost"
          ;
        }
      }
    }
  }
  if [ os.name ] = MINGW
  {
    if $(x_windows_bigobj) != "default"
    {
      flags +=
        <cxxflags>"-Wa,-mbig-obj"
      ;
    }
  }
  return $(flags) ;
}
