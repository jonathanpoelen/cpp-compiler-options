#  ```jam
#  # launch example: bjam -s jln_sanitizers=on
#
#  include cpp.jam ;
#
#  # rule jln_flags ( properties * )
#
#  project name : requirements
#    <jln-lto-default>on # enable jln-lto
#    <jln-relro-default>on
#    <conditional>@jln_flags
#  : default-build release ;
#
#  exe test : test.cpp : <jln-relro-incidental>off # incidental version of <jln-relro>off
#
#  # NOTE: for C, jln_flags becomes jln_c_flags
#  ```
#
#
#  # Options
#
#  Supported options are listed below by category.
#  The same option can be found in several categories.
#
#  The first value corresponds to the one used by default,
#  and the value `default` has no associated behavior.
#
#  Options with a default value other than `default` are listed below.
#
#  <!-- ./compiler-options.lua generators/list_options.lua --color --categorized -->
#  ```ini
#  # Warning:
#
#  warnings = on default off strict very_strict
#  warnings_as_error = default off on basic
#  conversion_warnings = on default off sign conversion
#  covered_switch_default_warnings = on default off
#  fix_compiler_error = on default off
#  msvc_crt_secure_no_warnings = on default off
#  noexcept_warnings = default off on
#  reproducible_build_warnings = default off on
#  shadow_warnings = off default on local compatible_local all
#  suggestions = default off on
#  switch_warnings = on default off exhaustive_enum mandatory_default exhaustive_enum_and_mandatory_default
#  unsafe_buffer_usage_warnings = default on off
#  windows_abi_compatibility_warnings = off default on
#
#  # Pedantic:
#
#  msvc_conformance = all default all_without_throwing_new
#  pedantic = on default off as_error
#  stl_fix = on default off
#
#  # Debug:
#
#  debug = default off on gdb lldb vms codeview dbx sce
#  debug_level = default 0 1 2 3 line_tables_only line_directives_only
#  stl_hardening = default off fast extensive debug debug_with_broken_abi
#  control_flow = default off on branch return allow_bugs
#  sanitizers = default off on
#  float_sanitizers = default off on
#  integer_sanitizers = default off on
#  other_sanitizers = default off thread pointer memory
#  var_init = default uninitialized pattern zero
#  ndebug = with_optimization_1_or_above default off on
#  optimization = default 0 g 1 2 3 fast size z
#
#  # Optimization:
#
#  cpu = default generic native
#  linker = default bfd gold lld mold native
#  lto = default off on normal fat thin
#  optimization = default 0 g 1 2 3 fast size z
#  whole_program = default off on strip_all
#
#  # C++:
#
#  exceptions = default off on
#  rtti = default off on
#
#  # Hardening:
#
#  control_flow = default off on branch return allow_bugs
#  relro = default off on full
#  stack_protector = default off on strong all
#  stl_hardening = default off fast extensive debug debug_with_broken_abi
#
#  # Analyzer:
#
#  analyzer = default off on
#  analyzer_too_complex_warning = default off on
#  analyzer_verbosity = default 0 1 2 3
#
#  # Other:
#
#  color = default auto never always
#  coverage = default off on
#  diagnostics_format = default fixits patch print_source_range_info
#  diagnostics_show_template_tree = default off on
#  elide_type = default off on
#  msvc_diagnostics_format = caret default classic column
#  msvc_isystem = default anglebrackets include_and_caexcludepath external_as_include_system_flag
#  msvc_isystem_with_template_from_non_external = default off on
#  pie = default off on static fpic fPIC fpie fPIE
#  windows_bigobj = on default
#  ```
#  <!-- ./compiler-options.lua -->
#
#  The value `default` does nothing.
#
#  If not specified:
#
#  - `msvc_conformance` is `all`
#  - `msvc_diagnostics_format` is `caret`
#  - `ndebug` is `with_optimization_1_or_above`
#  - The following values are `off`:
#    - `shadow_warnings`
#    - `windows_abi_compatibility_warnings`
#  - The following values are `on`:
#    - `conversion_warnings`
#    - `covered_switch_default_warnings`
#    - `fix_compiler_error`
#    - `msvc_crt_secure_no_warnings`
#    - `pedantic`
#    - `stl_fix`
#    - `switch_warnings`
#    - `warnings`
#    - `windows_bigobj`
#
#  <!-- enddefault -->
#
#  ### To know
#
#  - `control_flow=allow_bugs`
#    - clang: Can crash programs with "illegal hardware instruction" on totally unlikely lines. It can also cause link errors and force `-fvisibility=hidden` and `-flto`.
#  - `msvc_isystem=external_as_include_system_flag` is only available with `cmake`.
#  - `stl_hardening=debug`
#    - msvc: unlike `stl_hardening=debug_with_broken_abi`, STL debugging is not enabled by this option, as it breaks the ABI (only hardening mode is enabled on recent versions). However, as the `_DEBUG` macro can be defined in many different ways, STL debugging can be activated and the ABI broken.
#
#
#  ## Recommended options
#
#  category | options
#  ---------|---------
#  debug | `control_flow=on`<br>`debug=on`<br>`sanitizers=on`<br>`stl_hardening=debug_with_broken_abi` or `debug`<br>`optimization=g` or `optimization=0` + `debug_level=3`
#  release | `cpu=native`<br>`lto=on` or `thin`<br>`optimization=3`<br>`rtti=off`<br>`whole_program=strip_all`
#  security | `control_flow=on`<br>`relro=full`<br>`stack_protector=strong`<br>`pie=fPIE`<br>`stl_hardening=fast` or `extensive`
#  really strict warnings | `pedantic=as_error`<br>`shadow_warnings=local`<br>`suggestions=on`<br>`warnings=very_strict`
#
#  

# File generated with https://github.com/jonathanpoelen/cpp-compiler-options

# jam reference: https://www.boost.org/build/doc/html/index.html

import feature : feature ;
import modules ;
import numbers ;
import os ;
import property-set ;
import string ;

JLN_BJAM_YEAR_VERSION = [ modules.peek : JAMVERSION ] ;

# Enables an static analysis. It can have false positives and false negatives. It is a bug-finding tool, rather than a tool for proving program correctness. Available only with GCC and MSVC.
feature <jln-analyzer> : _ default off on : propagated ;
# By default, the analysis silently stops if the code is too complicated for the analyzer to fully explore and it reaches an internal limit. This option warns if this occurs. Available only with GCC.
feature <jln-analyzer-too-complex-warning> : _ default off on : propagated ;
# Controls the complexity of the control flow paths that are emitted for analyzer diagnostics. Available only with GCC.
#  - 0: At this level, interprocedural call and return events are displayed, along with the most pertinent state-change events relating to a diagnostic. For example, for a double-free diagnostic, both calls to free will be shown.
#  - 1: As per the previous level, but also show events for the entry to each function.
#  - 2: As per the previous level, but also show events relating to control flow that are significant to triggering the issue (e.g. “true path taken” at a conditional). This level is the default.
#  - 3: As per the previous level, but show all control flow events, not just significant ones.
feature <jln-analyzer-verbosity> : _ default 0 1 2 3 : propagated ;
feature <jln-color> : _ default auto never always : propagated ;
# Insert extra runtime security checks to detect attempts to compromise your code.
feature <jln-control-flow> : _ default off on branch return allow-bugs : incidental ;
# Warn for implicit conversions that may alter a value.
feature <jln-conversion-warnings> : _ on default off sign conversion : propagated ;
feature <jln-coverage> : _ default off on : incidental ;
# Warning for default label in switch which covers all enumeration values.
feature <jln-covered-switch-default-warnings> : _ on default off : propagated ;
feature <jln-cpu> : _ default generic native : incidental ;
# Produce debugging information in the operating system's.
feature <jln-debug> : _ default off on gdb lldb vms codeview dbx sce : incidental ;
# Specify debugging level
feature <jln-debug-level> : _ default 0 1 2 3 line-tables-only line-directives-only : incidental ;
# Emit fix-it hints in a machine-parseable format.
feature <jln-diagnostics-format> : _ default fixits patch print-source-range-info : propagated ;
# Enable C++ exceptions.
feature <jln-exceptions> : _ default off on : incidental ;
# Transforms some warnings into errors to comply with the standard.
feature <jln-fix-compiler-error> : _ on default off : propagated ;
feature <jln-float-sanitizers> : _ default off on : incidental ;
feature <jln-integer-sanitizers> : _ default off on : incidental ;
# Configure linker.
feature <jln-linker> : _ default bfd gold lld mold native : propagated ;
# Enable Link Time Optimization.
feature <jln-lto> : _ default off on normal fat thin : incidental ;
# Standard conformance options.
feature <jln-msvc-conformance> : _ all default all-without-throwing-new : incidental ;
# Disable CRT warnings with MSVC.
feature <jln-msvc-crt-secure-no-warnings> : _ on default off : propagated ;
# Controls the display of error and warning information (https://learn.microsoft.com/en-us/cpp/build/reference/diagnostics-compiler-diagnostic-options?view=msvc-170).
#  - classic: Which reports only the line number where the issue was found.
#  - column: Includes the column where the issue was found. This can help you identify the specific language construct or character that is causing the issue.
#  - caret: Includes the column where the issue was found and places a caret (^) under the location in the line of code where the issue was detected.
feature <jln-msvc-diagnostics-format> : _ caret default classic column : propagated ;
# Warnings concerning external header (https://devblogs.microsoft.com/cppblog/broken-warnings-theory).
feature <jln-msvc-isystem> : _ default anglebrackets include-and-caexcludepath : propagated ;
# Enable NDEBUG macro (disable assert macro).
feature <jln-ndebug> : _ with-optimization-1-or-above default off on : incidental ;
# Optimization level.
#  - 0: Not optimize.
#  - g: Enable debugging experience.
#  - 1: Optimize.
#  - 2: Optimize even more.
#  - 3: Optimize yet more.
#  - fast: Enables all optimization=3 and disregard strict standards compliance.
#  - size: Optimize for size.
#  - z: Optimize for size aggressively (/!\ possible slow compilation with emcc).
feature <jln-optimization> : _ default 0 g 1 2 3 fast size z : incidental ;
# Enable other sanitizers.
feature <jln-other-sanitizers> : _ default off thread pointer memory : incidental ;
# Issue all the warnings demanded by strict ISO C and ISO C++.
feature <jln-pedantic> : _ on default off as-error : incidental ;
# Controls position-independent code generation.
feature <jln-pie> : _ default off on static fpic fPIC fpie fPIE : incidental ;
# Specifies a memory segment that should be made read-only after relocation, if supported.
feature <jln-relro> : _ default off on full : incidental ;
# Warn when macros "__TIME__", "__DATE__" or "__TIMESTAMP__" are encountered as they might prevent bit-wise-identical reproducible compilations.
feature <jln-reproducible-build-warnings> : _ default off on : propagated ;
# Enable sanitizers (asan, ubsan, etc).
feature <jln-sanitizers> : _ default off on : incidental ;
feature <jln-shadow-warnings> : _ off default on local compatible-local all : propagated ;
# Emit extra code to check for buffer overflows, such as stack smashing attacks.
feature <jln-stack-protector> : _ default off on strong all : incidental ;
# Enable /DNOMINMAX with msvc.
feature <jln-stl-fix> : _ on default off : incidental ;
# Warn for cases where adding an attribute may be beneficial.
feature <jln-suggestions> : _ default off on : propagated ;
# Warnings concerning the switch keyword.
feature <jln-switch-warnings> : _ on default off exhaustive-enum mandatory-default exhaustive-enum-and-mandatory-default : propagated ;
# Enable -Wunsafe-buffer-usage with clang (https://clang.llvm.org/docs/SafeBuffers.html).
feature <jln-unsafe-buffer-usage-warnings> : _ default on off : propagated ;
# Initialize all stack variables implicitly, including padding.
#  - uninitialized: Doesn't initialize any automatic variables (default behavior of Gcc and Clang).
#  - pattern: Initialize automatic variables with byte-repeatable pattern (0xFE for Gcc, 0xAA for Clang).
#  - zero: zero Initialize automatic variables with zeroes.
feature <jln-var-init> : _ default uninitialized pattern zero : incidental ;
# Warning level.
feature <jln-warnings> : _ on default off strict very-strict : propagated ;
# Make all or some warnings into errors.
feature <jln-warnings-as-error> : _ default off on basic : incidental ;
# Assume that the current compilation unit represents the whole program being compiled. This option should not be used in combination with lto.
feature <jln-whole-program> : _ default off on strip-all : incidental ;
# Increases that addressable sections capacity.
feature <jln-windows-bigobj> : _ on default : incidental ;

feature <jln-control-flow-incidental> : _ default off on branch return allow-bugs : incidental ;
feature <jln-coverage-incidental> : _ default off on : incidental ;
feature <jln-cpu-incidental> : _ default generic native : incidental ;
feature <jln-debug-incidental> : _ default off on gdb lldb vms codeview dbx sce : incidental ;
feature <jln-debug-level-incidental> : _ default 0 1 2 3 line-tables-only line-directives-only : incidental ;
feature <jln-exceptions-incidental> : _ default off on : incidental ;
feature <jln-float-sanitizers-incidental> : _ default off on : incidental ;
feature <jln-integer-sanitizers-incidental> : _ default off on : incidental ;
feature <jln-lto-incidental> : _ default off on normal fat thin : incidental ;
feature <jln-msvc-conformance-incidental> : _ all default all-without-throwing-new : incidental ;
feature <jln-ndebug-incidental> : _ with-optimization-1-or-above default off on : incidental ;
feature <jln-optimization-incidental> : _ default 0 g 1 2 3 fast size z : incidental ;
feature <jln-other-sanitizers-incidental> : _ default off thread pointer memory : incidental ;
feature <jln-pedantic-incidental> : _ on default off as-error : incidental ;
feature <jln-pie-incidental> : _ default off on static fpic fPIC fpie fPIE : incidental ;
feature <jln-relro-incidental> : _ default off on full : incidental ;
feature <jln-sanitizers-incidental> : _ default off on : incidental ;
feature <jln-stack-protector-incidental> : _ default off on strong all : incidental ;
feature <jln-stl-fix-incidental> : _ on default off : incidental ;
feature <jln-var-init-incidental> : _ default uninitialized pattern zero : incidental ;
feature <jln-warnings-as-error-incidental> : _ default off on basic : incidental ;
feature <jln-whole-program-incidental> : _ default off on strip-all : incidental ;
feature <jln-windows-bigobj-incidental> : _ on default : incidental ;

feature <jln-analyzer-default> : default off on : incidental ;
feature <jln-analyzer-too-complex-warning-default> : default off on : incidental ;
feature <jln-analyzer-verbosity-default> : default 0 1 2 3 : incidental ;
feature <jln-color-default> : default auto never always : incidental ;
feature <jln-control-flow-default> : default off on branch return allow-bugs : incidental ;
feature <jln-conversion-warnings-default> : on default off sign conversion : incidental ;
feature <jln-coverage-default> : default off on : incidental ;
feature <jln-covered-switch-default-warnings-default> : on default off : incidental ;
feature <jln-cpu-default> : default generic native : incidental ;
feature <jln-debug-default> : default off on gdb lldb vms codeview dbx sce : incidental ;
feature <jln-debug-level-default> : default 0 1 2 3 line-tables-only line-directives-only : incidental ;
feature <jln-diagnostics-format-default> : default fixits patch print-source-range-info : incidental ;
feature <jln-exceptions-default> : default off on : incidental ;
feature <jln-fix-compiler-error-default> : on default off : incidental ;
feature <jln-float-sanitizers-default> : default off on : incidental ;
feature <jln-integer-sanitizers-default> : default off on : incidental ;
feature <jln-linker-default> : default bfd gold lld mold native : incidental ;
feature <jln-lto-default> : default off on normal fat thin : incidental ;
feature <jln-msvc-conformance-default> : all default all-without-throwing-new : incidental ;
feature <jln-msvc-crt-secure-no-warnings-default> : on default off : incidental ;
feature <jln-msvc-diagnostics-format-default> : caret default classic column : incidental ;
feature <jln-msvc-isystem-default> : default anglebrackets include-and-caexcludepath : incidental ;
feature <jln-ndebug-default> : with-optimization-1-or-above default off on : incidental ;
feature <jln-optimization-default> : default 0 g 1 2 3 fast size z : incidental ;
feature <jln-other-sanitizers-default> : default off thread pointer memory : incidental ;
feature <jln-pedantic-default> : on default off as-error : incidental ;
feature <jln-pie-default> : default off on static fpic fPIC fpie fPIE : incidental ;
feature <jln-relro-default> : default off on full : incidental ;
feature <jln-reproducible-build-warnings-default> : default off on : incidental ;
feature <jln-sanitizers-default> : default off on : incidental ;
feature <jln-shadow-warnings-default> : off default on local compatible-local all : incidental ;
feature <jln-stack-protector-default> : default off on strong all : incidental ;
feature <jln-stl-fix-default> : on default off : incidental ;
feature <jln-suggestions-default> : default off on : incidental ;
feature <jln-switch-warnings-default> : on default off exhaustive-enum mandatory-default exhaustive-enum-and-mandatory-default : incidental ;
feature <jln-unsafe-buffer-usage-warnings-default> : default on off : incidental ;
feature <jln-var-init-default> : default uninitialized pattern zero : incidental ;
feature <jln-warnings-default> : on default off strict very-strict : incidental ;
feature <jln-warnings-as-error-default> : default off on basic : incidental ;
feature <jln-whole-program-default> : default off on strip-all : incidental ;
feature <jln-windows-bigobj-default> : on default : incidental ;


rule jln_c-get-env ( env : values * )
{
  local x = [ os.environ $(env) ] ;
  if $(x)
  {
    if $(x) in $(values)
    {
      return $(x) ;
    }
    else
    {
      EXIT "Unknown '$(x)' for $(env)" : 7 ;
    }
  }
  else
  {
    return "" ;
  }
}

constant jln_c_env_analyzer : [ jln_c-get-env jln_analyzer : default off on ] ;
constant jln_c_env_analyzer_too_complex_warning : [ jln_c-get-env jln_analyzer_too_complex_warning : default off on ] ;
constant jln_c_env_analyzer_verbosity : [ jln_c-get-env jln_analyzer_verbosity : default 0 1 2 3 ] ;
constant jln_c_env_color : [ jln_c-get-env jln_color : default auto never always ] ;
constant jln_c_env_control_flow : [ jln_c-get-env jln_control_flow : default off on branch return allow-bugs ] ;
constant jln_c_env_conversion_warnings : [ jln_c-get-env jln_conversion_warnings : on default off sign conversion ] ;
constant jln_c_env_coverage : [ jln_c-get-env jln_coverage : default off on ] ;
constant jln_c_env_covered_switch_default_warnings : [ jln_c-get-env jln_covered_switch_default_warnings : on default off ] ;
constant jln_c_env_cpu : [ jln_c-get-env jln_cpu : default generic native ] ;
constant jln_c_env_debug : [ jln_c-get-env jln_debug : default off on gdb lldb vms codeview dbx sce ] ;
constant jln_c_env_debug_level : [ jln_c-get-env jln_debug_level : default 0 1 2 3 line-tables-only line-directives-only ] ;
constant jln_c_env_diagnostics_format : [ jln_c-get-env jln_diagnostics_format : default fixits patch print-source-range-info ] ;
constant jln_c_env_exceptions : [ jln_c-get-env jln_exceptions : default off on ] ;
constant jln_c_env_fix_compiler_error : [ jln_c-get-env jln_fix_compiler_error : on default off ] ;
constant jln_c_env_float_sanitizers : [ jln_c-get-env jln_float_sanitizers : default off on ] ;
constant jln_c_env_integer_sanitizers : [ jln_c-get-env jln_integer_sanitizers : default off on ] ;
constant jln_c_env_linker : [ jln_c-get-env jln_linker : default bfd gold lld mold native ] ;
constant jln_c_env_lto : [ jln_c-get-env jln_lto : default off on normal fat thin ] ;
constant jln_c_env_msvc_conformance : [ jln_c-get-env jln_msvc_conformance : all default all-without-throwing-new ] ;
constant jln_c_env_msvc_crt_secure_no_warnings : [ jln_c-get-env jln_msvc_crt_secure_no_warnings : on default off ] ;
constant jln_c_env_msvc_diagnostics_format : [ jln_c-get-env jln_msvc_diagnostics_format : caret default classic column ] ;
constant jln_c_env_msvc_isystem : [ jln_c-get-env jln_msvc_isystem : default anglebrackets include-and-caexcludepath ] ;
constant jln_c_env_ndebug : [ jln_c-get-env jln_ndebug : with-optimization-1-or-above default off on ] ;
constant jln_c_env_optimization : [ jln_c-get-env jln_optimization : default 0 g 1 2 3 fast size z ] ;
constant jln_c_env_other_sanitizers : [ jln_c-get-env jln_other_sanitizers : default off thread pointer memory ] ;
constant jln_c_env_pedantic : [ jln_c-get-env jln_pedantic : on default off as-error ] ;
constant jln_c_env_pie : [ jln_c-get-env jln_pie : default off on static fpic fPIC fpie fPIE ] ;
constant jln_c_env_relro : [ jln_c-get-env jln_relro : default off on full ] ;
constant jln_c_env_reproducible_build_warnings : [ jln_c-get-env jln_reproducible_build_warnings : default off on ] ;
constant jln_c_env_sanitizers : [ jln_c-get-env jln_sanitizers : default off on ] ;
constant jln_c_env_shadow_warnings : [ jln_c-get-env jln_shadow_warnings : off default on local compatible-local all ] ;
constant jln_c_env_stack_protector : [ jln_c-get-env jln_stack_protector : default off on strong all ] ;
constant jln_c_env_stl_fix : [ jln_c-get-env jln_stl_fix : on default off ] ;
constant jln_c_env_suggestions : [ jln_c-get-env jln_suggestions : default off on ] ;
constant jln_c_env_switch_warnings : [ jln_c-get-env jln_switch_warnings : on default off exhaustive-enum mandatory-default exhaustive-enum-and-mandatory-default ] ;
constant jln_c_env_unsafe_buffer_usage_warnings : [ jln_c-get-env jln_unsafe_buffer_usage_warnings : default on off ] ;
constant jln_c_env_var_init : [ jln_c-get-env jln_var_init : default uninitialized pattern zero ] ;
constant jln_c_env_warnings : [ jln_c-get-env jln_warnings : on default off strict very-strict ] ;
constant jln_c_env_warnings_as_error : [ jln_c-get-env jln_warnings_as_error : default off on basic ] ;
constant jln_c_env_whole_program : [ jln_c-get-env jln_whole_program : default off on strip-all ] ;
constant jln_c_env_windows_bigobj : [ jln_c-get-env jln_windows_bigobj : on default ] ;

if $(JLN_BJAM_YEAR_VERSION) < 2016.00
{
  import toolset ;
  toolset.flags jln-control-flow JLN_CONTROL_FLOW : <jln-control-flow> ;
  toolset.flags jln-control-flow-incidental JLN_CONTROL_FLOW_INCIDENTAL : <jln-control-flow-incidental> ;
  toolset.flags jln-coverage JLN_COVERAGE : <jln-coverage> ;
  toolset.flags jln-coverage-incidental JLN_COVERAGE_INCIDENTAL : <jln-coverage-incidental> ;
  toolset.flags jln-cpu JLN_CPU : <jln-cpu> ;
  toolset.flags jln-cpu-incidental JLN_CPU_INCIDENTAL : <jln-cpu-incidental> ;
  toolset.flags jln-debug JLN_DEBUG : <jln-debug> ;
  toolset.flags jln-debug-incidental JLN_DEBUG_INCIDENTAL : <jln-debug-incidental> ;
  toolset.flags jln-debug-level JLN_DEBUG_LEVEL : <jln-debug-level> ;
  toolset.flags jln-debug-level-incidental JLN_DEBUG_LEVEL_INCIDENTAL : <jln-debug-level-incidental> ;
  toolset.flags jln-exceptions JLN_EXCEPTIONS : <jln-exceptions> ;
  toolset.flags jln-exceptions-incidental JLN_EXCEPTIONS_INCIDENTAL : <jln-exceptions-incidental> ;
  toolset.flags jln-float-sanitizers JLN_FLOAT_SANITIZERS : <jln-float-sanitizers> ;
  toolset.flags jln-float-sanitizers-incidental JLN_FLOAT_SANITIZERS_INCIDENTAL : <jln-float-sanitizers-incidental> ;
  toolset.flags jln-integer-sanitizers JLN_INTEGER_SANITIZERS : <jln-integer-sanitizers> ;
  toolset.flags jln-integer-sanitizers-incidental JLN_INTEGER_SANITIZERS_INCIDENTAL : <jln-integer-sanitizers-incidental> ;
  toolset.flags jln-lto JLN_LTO : <jln-lto> ;
  toolset.flags jln-lto-incidental JLN_LTO_INCIDENTAL : <jln-lto-incidental> ;
  toolset.flags jln-msvc-conformance JLN_MSVC_CONFORMANCE : <jln-msvc-conformance> ;
  toolset.flags jln-msvc-conformance-incidental JLN_MSVC_CONFORMANCE_INCIDENTAL : <jln-msvc-conformance-incidental> ;
  toolset.flags jln-ndebug JLN_NDEBUG : <jln-ndebug> ;
  toolset.flags jln-ndebug-incidental JLN_NDEBUG_INCIDENTAL : <jln-ndebug-incidental> ;
  toolset.flags jln-optimization JLN_OPTIMIZATION : <jln-optimization> ;
  toolset.flags jln-optimization-incidental JLN_OPTIMIZATION_INCIDENTAL : <jln-optimization-incidental> ;
  toolset.flags jln-other-sanitizers JLN_OTHER_SANITIZERS : <jln-other-sanitizers> ;
  toolset.flags jln-other-sanitizers-incidental JLN_OTHER_SANITIZERS_INCIDENTAL : <jln-other-sanitizers-incidental> ;
  toolset.flags jln-pedantic JLN_PEDANTIC : <jln-pedantic> ;
  toolset.flags jln-pedantic-incidental JLN_PEDANTIC_INCIDENTAL : <jln-pedantic-incidental> ;
  toolset.flags jln-pie JLN_PIE : <jln-pie> ;
  toolset.flags jln-pie-incidental JLN_PIE_INCIDENTAL : <jln-pie-incidental> ;
  toolset.flags jln-relro JLN_RELRO : <jln-relro> ;
  toolset.flags jln-relro-incidental JLN_RELRO_INCIDENTAL : <jln-relro-incidental> ;
  toolset.flags jln-sanitizers JLN_SANITIZERS : <jln-sanitizers> ;
  toolset.flags jln-sanitizers-incidental JLN_SANITIZERS_INCIDENTAL : <jln-sanitizers-incidental> ;
  toolset.flags jln-stack-protector JLN_STACK_PROTECTOR : <jln-stack-protector> ;
  toolset.flags jln-stack-protector-incidental JLN_STACK_PROTECTOR_INCIDENTAL : <jln-stack-protector-incidental> ;
  toolset.flags jln-stl-fix JLN_STL_FIX : <jln-stl-fix> ;
  toolset.flags jln-stl-fix-incidental JLN_STL_FIX_INCIDENTAL : <jln-stl-fix-incidental> ;
  toolset.flags jln-var-init JLN_VAR_INIT : <jln-var-init> ;
  toolset.flags jln-var-init-incidental JLN_VAR_INIT_INCIDENTAL : <jln-var-init-incidental> ;
  toolset.flags jln-warnings-as-error JLN_WARNINGS_AS_ERROR : <jln-warnings-as-error> ;
  toolset.flags jln-warnings-as-error-incidental JLN_WARNINGS_AS_ERROR_INCIDENTAL : <jln-warnings-as-error-incidental> ;
  toolset.flags jln-whole-program JLN_WHOLE_PROGRAM : <jln-whole-program> ;
  toolset.flags jln-whole-program-incidental JLN_WHOLE_PROGRAM_INCIDENTAL : <jln-whole-program-incidental> ;
  toolset.flags jln-windows-bigobj JLN_WINDOWS_BIGOBJ : <jln-windows-bigobj> ;
  toolset.flags jln-windows-bigobj-incidental JLN_WINDOWS_BIGOBJ_INCIDENTAL : <jln-windows-bigobj-incidental> ;

}

JLN_ORIGINAL_C_TOOLSET = "" ;
JLN_NORMALIZED_C_COMP = "" ;
JLN_NORMALIZED_C_COMP_VERSION = 100000 ;
JLN_NORMALIZED_C_IS_CLANG_LIKE = 0 ;

rule jln_c-update-normalized-compiler ( toolset : version )
{
  if $(JLN_ORIGINAL_C_TOOLSET) != $(toolset)
  {
    JLN_ORIGINAL_C_TOOLSET = $(toolset) ;

    local is_emcc = 0 ;
    local is_intel = 0 ;
    local is_clang = 0 ;
    switch $(toolset)  {
      case emscripten* : is_emcc = 1 ;
      case emcc* : is_emcc = 1 ;
      case intel : is_intel = 1 ;
      case icx* : is_intel = 1 ;
      case icpx* : is_intel = 1 ;
      case dpcpp* : is_intel = 1 ;
      case clang* : is_clang = 1 ;
    }

    if $(is_emcc) = 1 {
      JLN_NORMALIZED_C_COMP = clang-emcc ;
      JLN_NORMALIZED_C_IS_CLANG_LIKE = 1 ;
      # get clang version. Assume emcc exists
      version = [ MATCH "clang version ([0-9]+\\.[0-9]+\\.[0-9]+)" : [ SHELL "emcc -v 2>&1" ] ] ;
    }
    # icx / icpx
    else if $(is_intel) = 1 {
      JLN_NORMALIZED_C_COMP = clang ;
      JLN_NORMALIZED_C_IS_CLANG_LIKE = 1 ;
      switch $(version)  {
        case 2021* : JLN_NORMALIZED_C_COMP_VERSION = 1200000 ;
        case 2022* : JLN_NORMALIZED_C_COMP_VERSION = 1400000 ;
        case 2023* : JLN_NORMALIZED_C_COMP_VERSION = 1600000 ;
        case 2024* : JLN_NORMALIZED_C_COMP_VERSION = 1800000 ;
        case 2025* : JLN_NORMALIZED_C_COMP_VERSION = 2000000 ;
        case 2026* : JLN_NORMALIZED_C_COMP_VERSION = 2200000 ;
        case 2027* : JLN_NORMALIZED_C_COMP_VERSION = 2400000 ;
        case 2028* : JLN_NORMALIZED_C_COMP_VERSION = 2600000 ;
        case 2029* : JLN_NORMALIZED_C_COMP_VERSION = 2800000 ;
        case 2030* : JLN_NORMALIZED_C_COMP_VERSION = 3000000 ;
      }
    }
    else {
      JLN_NORMALIZED_C_IS_CLANG_LIKE = $(is_clang) ;
      # TODO `version` is not the real version.
      # For toolset=gcc-5, version is 5 ; for clang-scan, version is ''
      JLN_NORMALIZED_C_COMP = $(toolset) ;
      version = [ MATCH "^[^0-9]*(.*)$" : $(version) ] ;
      if ! $(version) {
        version = [ MATCH "([0-9]+\\.[0-9]+\\.[0-9]+)" : [ SHELL "$(toolset) --version" ] ] ;
      }
    }

    if $(is_intel) = 0 {
      local match = [ MATCH "^([0-9]+)(\\.([0-9]+))?" : $(version) ] ;
      local major = $(match[1]) ;
      local minor = [ MATCH "(.....)$" : [ string.join 00000 $(match[3]) ] ] ;
      JLN_NORMALIZED_C_COMP_VERSION = $(major)$(minor) ;
    }
  }
}

rule jln_c-get-value ( ps : opt : env )
{
  local x = [ $(ps).get <$(opt)> ] ;
  if $(x) = "_"
  {
    x = $(env) ;
    if $(x) = ""
    {
      x = [ $(ps).get <$(opt)-default> ] ;
    }
  }
  return $(x) ;
}

rule jln_c-get-value2 ( ps : opt : iopt : env )
{
  local x = [ $(ps).get <$(opt)> ] ;
  if $(x) = "_"
  {
    x = [ $(ps).get <$(iopt)> ] ;
    if $(x) = "_"
    {
      x = $(env) ;
      if $(x) = ""
      {
        x = [ $(ps).get <$(opt)-default> ] ;
      }
    }
  }
  return $(x) ;
}

rule jln_c_flags ( properties * )
{
  local ps = [ property-set.create $(properties) ] ;
  local toolset = [ $(ps).get <toolset> ] ;
  local original_version = [ $(ps).get <toolset-$(toolset):version> ] ;
  jln_c-update-normalized-compiler $(toolset) : $(original_version) ;
  local linker = [ $(ps).get <linker> ] ;

  local flags = ;
  if $(JLN_BJAM_YEAR_VERSION) >= 2016.00
  {
    flags += 
      <relevant>jln-control-flow
      <relevant>jln-coverage
      <relevant>jln-cpu
      <relevant>jln-debug
      <relevant>jln-debug-level
      <relevant>jln-exceptions
      <relevant>jln-float-sanitizers
      <relevant>jln-integer-sanitizers
      <relevant>jln-lto
      <relevant>jln-msvc-conformance
      <relevant>jln-ndebug
      <relevant>jln-optimization
      <relevant>jln-other-sanitizers
      <relevant>jln-pedantic
      <relevant>jln-pie
      <relevant>jln-relro
      <relevant>jln-sanitizers
      <relevant>jln-stack-protector
      <relevant>jln-stl-fix
      <relevant>jln-var-init
      <relevant>jln-warnings-as-error
      <relevant>jln-whole-program
      <relevant>jln-windows-bigobj
    ;
  }

  local x_analyzer = [ jln_c-get-value $(ps) : jln-analyzer : $(jln_c_env_analyzer) ] ;
  local x_analyzer_too_complex_warning = [ jln_c-get-value $(ps) : jln-analyzer-too-complex-warning : $(jln_c_env_analyzer_too_complex_warning) ] ;
  local x_analyzer_verbosity = [ jln_c-get-value $(ps) : jln-analyzer-verbosity : $(jln_c_env_analyzer_verbosity) ] ;
  local x_color = [ jln_c-get-value $(ps) : jln-color : $(jln_c_env_color) ] ;
  local x_control_flow = [ jln_c-get-value2 $(ps) : jln-control-flow : jln-control-flow-incidental : $(jln_c_env_control_flow) ] ;
  local x_conversion_warnings = [ jln_c-get-value $(ps) : jln-conversion-warnings : $(jln_c_env_conversion_warnings) ] ;
  local x_coverage = [ jln_c-get-value2 $(ps) : jln-coverage : jln-coverage-incidental : $(jln_c_env_coverage) ] ;
  local x_covered_switch_default_warnings = [ jln_c-get-value $(ps) : jln-covered-switch-default-warnings : $(jln_c_env_covered_switch_default_warnings) ] ;
  local x_cpu = [ jln_c-get-value2 $(ps) : jln-cpu : jln-cpu-incidental : $(jln_c_env_cpu) ] ;
  local x_debug = [ jln_c-get-value2 $(ps) : jln-debug : jln-debug-incidental : $(jln_c_env_debug) ] ;
  local x_debug_level = [ jln_c-get-value2 $(ps) : jln-debug-level : jln-debug-level-incidental : $(jln_c_env_debug_level) ] ;
  local x_diagnostics_format = [ jln_c-get-value $(ps) : jln-diagnostics-format : $(jln_c_env_diagnostics_format) ] ;
  local x_exceptions = [ jln_c-get-value2 $(ps) : jln-exceptions : jln-exceptions-incidental : $(jln_c_env_exceptions) ] ;
  local x_fix_compiler_error = [ jln_c-get-value $(ps) : jln-fix-compiler-error : $(jln_c_env_fix_compiler_error) ] ;
  local x_float_sanitizers = [ jln_c-get-value2 $(ps) : jln-float-sanitizers : jln-float-sanitizers-incidental : $(jln_c_env_float_sanitizers) ] ;
  local x_integer_sanitizers = [ jln_c-get-value2 $(ps) : jln-integer-sanitizers : jln-integer-sanitizers-incidental : $(jln_c_env_integer_sanitizers) ] ;
  local x_linker = [ jln_c-get-value $(ps) : jln-linker : $(jln_c_env_linker) ] ;
  local x_lto = [ jln_c-get-value2 $(ps) : jln-lto : jln-lto-incidental : $(jln_c_env_lto) ] ;
  local x_msvc_conformance = [ jln_c-get-value2 $(ps) : jln-msvc-conformance : jln-msvc-conformance-incidental : $(jln_c_env_msvc_conformance) ] ;
  local x_msvc_crt_secure_no_warnings = [ jln_c-get-value $(ps) : jln-msvc-crt-secure-no-warnings : $(jln_c_env_msvc_crt_secure_no_warnings) ] ;
  local x_msvc_diagnostics_format = [ jln_c-get-value $(ps) : jln-msvc-diagnostics-format : $(jln_c_env_msvc_diagnostics_format) ] ;
  local x_msvc_isystem = [ jln_c-get-value $(ps) : jln-msvc-isystem : $(jln_c_env_msvc_isystem) ] ;
  local x_ndebug = [ jln_c-get-value2 $(ps) : jln-ndebug : jln-ndebug-incidental : $(jln_c_env_ndebug) ] ;
  local x_optimization = [ jln_c-get-value2 $(ps) : jln-optimization : jln-optimization-incidental : $(jln_c_env_optimization) ] ;
  local x_other_sanitizers = [ jln_c-get-value2 $(ps) : jln-other-sanitizers : jln-other-sanitizers-incidental : $(jln_c_env_other_sanitizers) ] ;
  local x_pedantic = [ jln_c-get-value2 $(ps) : jln-pedantic : jln-pedantic-incidental : $(jln_c_env_pedantic) ] ;
  local x_pie = [ jln_c-get-value2 $(ps) : jln-pie : jln-pie-incidental : $(jln_c_env_pie) ] ;
  local x_relro = [ jln_c-get-value2 $(ps) : jln-relro : jln-relro-incidental : $(jln_c_env_relro) ] ;
  local x_reproducible_build_warnings = [ jln_c-get-value $(ps) : jln-reproducible-build-warnings : $(jln_c_env_reproducible_build_warnings) ] ;
  local x_sanitizers = [ jln_c-get-value2 $(ps) : jln-sanitizers : jln-sanitizers-incidental : $(jln_c_env_sanitizers) ] ;
  local x_shadow_warnings = [ jln_c-get-value $(ps) : jln-shadow-warnings : $(jln_c_env_shadow_warnings) ] ;
  local x_stack_protector = [ jln_c-get-value2 $(ps) : jln-stack-protector : jln-stack-protector-incidental : $(jln_c_env_stack_protector) ] ;
  local x_stl_fix = [ jln_c-get-value2 $(ps) : jln-stl-fix : jln-stl-fix-incidental : $(jln_c_env_stl_fix) ] ;
  local x_suggestions = [ jln_c-get-value $(ps) : jln-suggestions : $(jln_c_env_suggestions) ] ;
  local x_switch_warnings = [ jln_c-get-value $(ps) : jln-switch-warnings : $(jln_c_env_switch_warnings) ] ;
  local x_unsafe_buffer_usage_warnings = [ jln_c-get-value $(ps) : jln-unsafe-buffer-usage-warnings : $(jln_c_env_unsafe_buffer_usage_warnings) ] ;
  local x_var_init = [ jln_c-get-value2 $(ps) : jln-var-init : jln-var-init-incidental : $(jln_c_env_var_init) ] ;
  local x_warnings = [ jln_c-get-value $(ps) : jln-warnings : $(jln_c_env_warnings) ] ;
  local x_warnings_as_error = [ jln_c-get-value2 $(ps) : jln-warnings-as-error : jln-warnings-as-error-incidental : $(jln_c_env_warnings_as_error) ] ;
  local x_whole_program = [ jln_c-get-value2 $(ps) : jln-whole-program : jln-whole-program-incidental : $(jln_c_env_whole_program) ] ;
  local x_windows_bigobj = [ jln_c-get-value2 $(ps) : jln-windows-bigobj : jln-windows-bigobj-incidental : $(jln_c_env_windows_bigobj) ] ;

  if $(x_ndebug) != "default"
  {
    if ( $(JLN_NORMALIZED_C_COMP) = "msvc" || $(JLN_NORMALIZED_C_COMP) = "intel' && $(original_version) = 'windows" )
    {
      if $(x_ndebug) = "off"
      {
        flags +=
          <cflags>"/UNDEBUG"
        ;
      }
      else
      {
        if $(x_ndebug) = "on"
        {
          flags +=
            <cflags>"/DNDEBUG"
          ;
        }
        else
        {
          if $(x_optimization) != "default" && ! ( $(x_optimization) = "0" || $(x_optimization) = "g" )
          {
            flags +=
              <cflags>"/DNDEBUG"
            ;
          }
        }
      }
    }
    else
    {
      if $(x_ndebug) = "off"
      {
        flags +=
          <cflags>"-UNDEBUG"
        ;
      }
      else
      {
        if $(x_ndebug) = "on"
        {
          flags +=
            <cflags>"-DNDEBUG"
          ;
        }
        else
        {
          if $(x_optimization) != "default" && ! ( $(x_optimization) = "0" || $(x_optimization) = "g" )
          {
            flags +=
              <cflags>"-DNDEBUG"
            ;
          }
        }
      }
    }
  }
  if ( $(JLN_NORMALIZED_C_COMP) = "gcc" || $(JLN_NORMALIZED_C_IS_CLANG_LIKE) )
  {
    if $(x_warnings) != "default"
    {
      if $(x_warnings) = "off"
      {
        flags +=
          <cflags>"-w"
        ;
      }
      else
      {
        if $(JLN_NORMALIZED_C_COMP) = "gcc"
        {
          flags +=
            <cflags>"-Wall"
            <cflags>"-Wextra"
            <cflags>"-Wcast-align"
            <cflags>"-Wcast-qual"
            <cflags>"-Wdisabled-optimization"
            <cflags>"-Wfloat-equal"
            <cflags>"-Wformat-security"
            <cflags>"-Wformat=2"
            <cflags>"-Winvalid-pch"
            <cflags>"-Wmissing-include-dirs"
            <cflags>"-Wpacked"
            <cflags>"-Wredundant-decls"
            <cflags>"-Wundef"
            <cflags>"-Wunused-macros"
            <cflags>"-Wpointer-arith"
            <cflags>"-Wbad-function-cast"
            <cflags>"-Winit-self"
            <cflags>"-Wjump-misses-init"
            <cflags>"-Wnested-externs"
            <cflags>"-Wold-style-definition"
            <cflags>"-Wstrict-prototypes"
            <cflags>"-Wwrite-strings"
          ;
          if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 400007 ]
          {
            flags +=
              <cflags>"-Wsuggest-attribute=noreturn"
              <cflags>"-Wlogical-op"
              <cflags>"-Wvector-operation-performance"
              <cflags>"-Wdouble-promotion"
              <cflags>"-Wtrampolines"
            ;
            if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 400008 ]
            {
              if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 400009 ]
              {
                flags +=
                  <cflags>"-Wfloat-conversion"
                ;
                if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 500001 ]
                {
                  flags +=
                    <cflags>"-Wformat-signedness"
                    <cflags>"-Warray-bounds=2"
                  ;
                  if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 600001 ]
                  {
                    flags +=
                      <cflags>"-Wduplicated-cond"
                      <cflags>"-Wnull-dereference"
                    ;
                    if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 700000 ]
                    {
                      if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 700001 ]
                      {
                        flags +=
                          <cflags>"-Walloc-zero"
                          <cflags>"-Walloca"
                          <cflags>"-Wformat-overflow=2"
                          <cflags>"-Wduplicated-branches"
                        ;
                        if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 800000 ]
                        {
                          if ( $(x_warnings) = "strict" || $(x_warnings) = "very-strict" )
                          {
                            flags +=
                              <cflags>"-Wcast-align=strict"
                            ;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          flags +=
            <cflags>"-Weverything"
            <cflags>"-Wno-documentation"
            <cflags>"-Wno-documentation-unknown-command"
            <cflags>"-Wno-newline-eof"
            <cflags>"-Wno-padded"
            <cflags>"-Wno-global-constructors"
          ;
          if  ! ( ( $(x_switch_warnings) = "off" || $(x_switch_warnings) = "exhaustive-enum" || $(x_switch_warnings) = "exhaustive-enum-and-mandatory-default" ) )
          {
            flags +=
              <cflags>"-Wno-switch-enum"
            ;
          }
          if $(x_covered_switch_default_warnings) = "default"
          {
            flags +=
              <cflags>"-Wno-covered-switch-default"
            ;
          }
          if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 300009 ]
          {
            if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 500000 ]
            {
              if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 900000 ]
              {
                if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 1000000 ]
                {
                  if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 1100000 ]
                  {
                    if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 1600000 ]
                    {
                      if $(x_unsafe_buffer_usage_warnings) = "default"
                      {
                        flags +=
                          <cflags>"-Wno-unsafe-buffer-usage"
                        ;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if $(JLN_NORMALIZED_C_COMP) = "gcc"
    {
      if $(x_switch_warnings) != "default"
      {
        if $(x_switch_warnings) = "on"
        {
          flags +=
            <cflags>"-Wswitch"
          ;
        }
        else
        {
          if $(x_switch_warnings) = "exhaustive-enum"
          {
            flags +=
              <cflags>"-Wswitch-enum"
            ;
          }
          else
          {
            if $(x_switch_warnings) = "mandatory-default"
            {
              flags +=
                <cflags>"-Wswitch-default"
              ;
            }
            else
            {
              if $(x_switch_warnings) = "exhaustive-enum-and-mandatory-default"
              {
                flags +=
                  <cflags>"-Wswitch-default"
                  <cflags>"-Wswitch-enum"
                ;
              }
              else
              {
                flags +=
                  <cflags>"-Wno-switch"
                  <cflags>"-Wno-switch-enum"
                  <cflags>"-Wno-switch-default"
                ;
              }
            }
          }
        }
      }
    }
    else
    {
      if $(x_switch_warnings) != "default"
      {
        if $(x_switch_warnings) = "on"
        {
          flags +=
            <cflags>"-Wswitch"
            <cflags>"-Wno-switch-default"
          ;
        }
        else
        {
          if $(x_switch_warnings) = "mandatory-default"
          {
            flags +=
              <cflags>"-Wswitch"
              <cflags>"-Wswitch-default"
            ;
          }
          else
          {
            if $(x_switch_warnings) = "exhaustive-enum"
            {
              flags +=
                <cflags>"-Wswitch"
                <cflags>"-Wswitch-enum"
                <cflags>"-Wno-switch-default"
              ;
            }
            else
            {
              if $(x_switch_warnings) = "exhaustive-enum-and-mandatory-default"
              {
                flags +=
                  <cflags>"-Wswitch"
                  <cflags>"-Wswitch-enum"
                  <cflags>"-Wswitch-default"
                ;
              }
              else
              {
                flags +=
                  <cflags>"-Wno-switch"
                  <cflags>"-Wno-switch-enum"
                  <cflags>"-Wno-switch-default"
                ;
              }
            }
          }
        }
      }
      if $(x_covered_switch_default_warnings) != "default"
      {
        if $(x_covered_switch_default_warnings) = "off"
        {
          flags +=
            <cflags>"-Wno-covered-switch-default"
          ;
        }
        else
        {
          flags +=
            <cflags>"-Wcovered-switch-default"
          ;
        }
      }
    }
    if $(x_unsafe_buffer_usage_warnings) != "default"
    {
      if ( $(JLN_NORMALIZED_C_IS_CLANG_LIKE) && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 1600000 ] )
      {
        if $(x_unsafe_buffer_usage_warnings) = "off"
        {
          flags +=
            <cflags>"-Wno-unsafe-buffer-usage"
          ;
        }
      }
    }
    if $(x_exceptions) != "default"
    {
      if $(x_exceptions) = "on"
      {
        flags +=
          <cflags>"-fexceptions"
        ;
        if $(JLN_NORMALIZED_C_COMP) = "clang-emcc"
        {
          flags +=
            <cflags>"-sDISABLE_EXCEPTION_CATCHING=0"
          ;
        }
      }
      else
      {
        flags +=
          <cflags>"-fno-exceptions"
        ;
      }
    }
    if $(x_var_init) != "default"
    {
      if ( ( $(JLN_NORMALIZED_C_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 1200000 ] ) || ( $(JLN_NORMALIZED_C_IS_CLANG_LIKE) && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 800000 ] ) )
      {
        if ( $(JLN_NORMALIZED_C_IS_CLANG_LIKE) && ! [ numbers.less 1500000 $(JLN_NORMALIZED_C_COMP_VERSION) ] )
        {
          flags +=
            <cflags>"-enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang"
          ;
        }
        if $(x_var_init) = "pattern"
        {
          flags +=
            <cflags>"-ftrivial-auto-var-init=pattern"
          ;
        }
        else
        {
          if $(x_var_init) = "zero"
          {
            flags +=
              <cflags>"-ftrivial-auto-var-init=zero"
            ;
          }
          else
          {
            flags +=
              <cflags>"-ftrivial-auto-var-init=uninitialized"
            ;
          }
        }
      }
    }
    if $(x_warnings_as_error) != "default"
    {
      if $(x_warnings_as_error) = "on"
      {
        flags +=
          <cflags>"-Werror"
        ;
      }
      else
      {
        if $(x_warnings_as_error) = "basic"
        {
          flags +=
            <cflags>"-Werror=return-type"
            <cflags>"-Werror=init-self"
          ;
          if $(JLN_NORMALIZED_C_COMP) = "gcc"
          {
            flags +=
              <cflags>"-Werror=div-by-zero"
            ;
            if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 500001 ]
            {
              flags +=
                <cflags>"-Werror=array-bounds"
                <cflags>"-Werror=logical-op"
                <cflags>"-Werror=logical-not-parentheses"
              ;
            }
          }
          else
          {
            flags +=
              <cflags>"-Werror=array-bounds"
              <cflags>"-Werror=division-by-zero"
            ;
            if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 300004 ]
            {
              flags +=
                <cflags>"-Werror=logical-not-parentheses"
              ;
            }
          }
        }
        else
        {
          flags +=
            <cflags>"-Wno-error"
          ;
        }
      }
    }
    if $(x_suggestions) != "default"
    {
      if $(x_suggestions) != "off"
      {
        if $(JLN_NORMALIZED_C_COMP) = "gcc"
        {
          flags +=
            <cflags>"-Wsuggest-attribute=pure"
            <cflags>"-Wsuggest-attribute=const"
          ;
        }
      }
    }
    if $(x_sanitizers) != "default"
    {
      if $(x_sanitizers) = "off"
      {
        flags +=
          <cflags>"-fno-sanitize=all"
          <linkflags>"-fno-sanitize=all"
        ;
      }
      else
      {
        if $(JLN_NORMALIZED_C_COMP) = "clang-cl"
        {
          flags +=
            <cflags>"-fsanitize=undefined"
            <cflags>"-fsanitize=address"
            <cflags>"-fsanitize-address-use-after-scope"
          ;
        }
        else
        {
          if ( $(JLN_NORMALIZED_C_COMP) = "clang" || $(JLN_NORMALIZED_C_COMP) = "clang-emcc" )
          {
            if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 300001 ]
            {
              flags +=
                <cflags>"-fsanitize=undefined"
                <cflags>"-fsanitize=address"
                <cflags>"-fsanitize-address-use-after-scope"
                <cflags>"-fno-omit-frame-pointer"
                <cflags>"-fno-optimize-sibling-calls"
                <linkflags>"-fsanitize=undefined"
                <linkflags>"-fsanitize=address"
              ;
              if $(JLN_NORMALIZED_C_COMP) = "clang"
              {
                if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 300004 ]
                {
                  flags +=
                    <cflags>"-fsanitize=leak"
                    <linkflags>"-fsanitize=leak"
                  ;
                }
                if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 600000 ]
                {
                  if $(x_stack_protector) != "default"
                  {
                    if $(x_stack_protector) != "off"
                    {
                      flags +=
                        <cflags>"-fsanitize-minimal-runtime"
                      ;
                    }
                  }
                }
              }
            }
          }
          else
          {
            if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 400008 ]
            {
              flags +=
                <cflags>"-fsanitize=address"
                <cflags>"-fno-omit-frame-pointer"
                <cflags>"-fno-optimize-sibling-calls"
                <linkflags>"-fsanitize=address"
              ;
              if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 400009 ]
              {
                flags +=
                  <cflags>"-fsanitize=undefined"
                  <cflags>"-fsanitize=leak"
                  <linkflags>"-fsanitize=undefined"
                  <linkflags>"-fsanitize=leak"
                ;
                if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 1200000 ]
                {
                  flags +=
                    <cflags>"-fsanitize=bounds-strict"
                    <linkflags>"-fsanitize=bounds-strict"
                  ;
                }
              }
            }
          }
        }
      }
    }
    if $(x_control_flow) != "default"
    {
      if $(JLN_NORMALIZED_C_COMP) = "clang-emcc"
      {
        if $(x_control_flow) = "off"
        {
          flags +=
            <linkflags>"-sASSERTIONS=0"
            <linkflags>"-sSAFE_HEAP=0"
          ;
        }
        else
        {
          flags +=
            <linkflags>"-sASSERTIONS=1"
            <linkflags>"-sDEMANGLE_SUPPORT=1"
          ;
          if  ! ( ( $(x_sanitizers) = "on" ) )
          {
            flags +=
              <linkflags>"-sSAFE_HEAP=1"
            ;
          }
        }
      }
      else
      {
        if $(x_control_flow) = "off"
        {
          if ( $(JLN_NORMALIZED_C_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 800000 ] )
          {
            flags +=
              <cflags>"-fcf-protection=none"
            ;
          }
          else
          {
            flags +=
              <cflags>"-fno-sanitize=cfi"
              <cflags>"-fcf-protection=none"
              <cflags>"-fno-sanitize-cfi-cross-dso"
              <linkflags>"-fno-sanitize=cfi"
            ;
          }
        }
        else
        {
          if ( ( $(JLN_NORMALIZED_C_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 800000 ] ) || $(JLN_NORMALIZED_C_COMP) != "gcc" )
          {
            if $(x_control_flow) = "branch"
            {
              flags +=
                <cflags>"-fcf-protection=branch"
              ;
            }
            else
            {
              if $(x_control_flow) = "return"
              {
                flags +=
                  <cflags>"-fcf-protection=return"
                ;
              }
              else
              {
                flags +=
                  <cflags>"-fcf-protection=full"
                ;
              }
            }
            if ( $(x_control_flow) = "allow-bugs" && $(JLN_NORMALIZED_C_COMP) = "clang" )
            {
              flags +=
                <cflags>"-fsanitize=cfi"
                <cflags>"-fvisibility=hidden"
                <cflags>"-flto"
                <linkflags>"-fsanitize=cfi"
                <linkflags>"-flto"
              ;
            }
          }
        }
      }
    }
    if $(x_color) != "default"
    {
      if ( ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 400009 ] || $(JLN_NORMALIZED_C_COMP) != "gcc" )
      {
        if $(x_color) = "auto"
        {
          flags +=
            <cflags>"-fdiagnostics-color=auto"
          ;
        }
        else
        {
          if $(x_color) = "never"
          {
            flags +=
              <cflags>"-fdiagnostics-color=never"
            ;
          }
          else
          {
            flags +=
              <cflags>"-fdiagnostics-color=always"
            ;
          }
        }
      }
    }
    if $(x_reproducible_build_warnings) != "default"
    {
      if ( $(JLN_NORMALIZED_C_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 400009 ] )
      {
        if $(x_reproducible_build_warnings) = "on"
        {
          flags +=
            <cflags>"-Wdate-time"
          ;
        }
        else
        {
          flags +=
            <cflags>"-Wno-date-time"
          ;
        }
      }
    }
    if $(x_diagnostics_format) != "default"
    {
      if $(x_diagnostics_format) = "fixits"
      {
        if ( ( $(JLN_NORMALIZED_C_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 700000 ] ) || ( $(JLN_NORMALIZED_C_COMP) != "gcc" && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 500000 ] ) )
        {
          flags +=
            <cflags>"-fdiagnostics-parseable-fixits"
          ;
        }
      }
      else
      {
        if $(x_diagnostics_format) = "patch"
        {
          if ( $(JLN_NORMALIZED_C_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 700000 ] )
          {
            flags +=
              <cflags>"-fdiagnostics-generate-patch"
            ;
          }
        }
        else
        {
          if $(JLN_NORMALIZED_C_IS_CLANG_LIKE)
          {
            flags +=
              <cflags>"-fdiagnostics-print-source-range-info"
            ;
          }
        }
      }
    }
    if $(x_fix_compiler_error) != "default"
    {
      if $(x_fix_compiler_error) = "on"
      {
        flags +=
          <cflags>"-Werror=write-strings"
        ;
      }
      else
      {
        if $(JLN_NORMALIZED_C_COMP) != "gcc"
        {
          flags +=
            <cflags>"-Wno-error=c++11-narrowing"
            <cflags>"-Wno-reserved-user-defined-literal"
          ;
        }
      }
    }
    if $(x_lto) != "default"
    {
      if $(x_lto) = "off"
      {
        flags +=
          <cflags>"-fno-lto"
          <linkflags>"-fno-lto"
        ;
      }
      else
      {
        if $(JLN_NORMALIZED_C_COMP) = "gcc"
        {
          flags +=
            <cflags>"-flto"
            <linkflags>"-flto"
          ;
          if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 500000 ]
          {
            if $(x_warnings) != "default"
            {
              if $(x_warnings) != "off"
              {
                flags +=
                  <cflags>"-flto-odr-type-merging"
                  <linkflags>"-flto-odr-type-merging"
                ;
              }
            }
            if $(x_lto) = "fat"
            {
              flags +=
                <cflags>"-ffat-lto-objects"
              ;
            }
            else
            {
              if $(x_lto) = "thin"
              {
                flags +=
                  <linkflags>"-fuse-linker-plugin"
                ;
              }
            }
          }
        }
        else
        {
          if $(JLN_NORMALIZED_C_COMP) = "clang-cl"
          {
            flags +=
              <linkflags>"-fuse-ld=lld"
            ;
          }
          if ( ( $(x_lto) = "thin" || $(x_lto) = "on" ) && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 600000 ] )
          {
            flags +=
              <cflags>"-flto=thin"
              <linkflags>"-flto=thin"
            ;
          }
          else
          {
            flags +=
              <cflags>"-flto"
              <linkflags>"-flto"
            ;
          }
        }
      }
    }
    if $(x_shadow_warnings) != "default"
    {
      if $(x_shadow_warnings) = "off"
      {
        flags +=
          <cflags>"-Wno-shadow"
        ;
        if ( $(JLN_NORMALIZED_C_IS_CLANG_LIKE) && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 800000 ] )
        {
          flags +=
            <cflags>"-Wno-shadow-field"
          ;
        }
      }
      else
      {
        if $(x_shadow_warnings) = "on"
        {
          flags +=
            <cflags>"-Wshadow"
          ;
        }
        else
        {
          if $(x_shadow_warnings) = "all"
          {
            if $(JLN_NORMALIZED_C_COMP) = "gcc"
            {
              flags +=
                <cflags>"-Wshadow"
              ;
            }
            else
            {
              flags +=
                <cflags>"-Wshadow-all"
              ;
            }
          }
          else
          {
            if ( $(JLN_NORMALIZED_C_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 700001 ] )
            {
              if $(x_shadow_warnings) = "local"
              {
                flags +=
                  <cflags>"-Wshadow=local"
                ;
              }
              else
              {
                flags +=
                  <cflags>"-Wshadow=compatible-local"
                ;
              }
            }
          }
        }
      }
    }
    if $(x_float_sanitizers) != "default"
    {
      if ( ( $(JLN_NORMALIZED_C_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 500000 ] ) || ( $(JLN_NORMALIZED_C_IS_CLANG_LIKE) && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 500000 ] ) )
      {
        if $(x_float_sanitizers) = "on"
        {
          flags +=
            <cflags>"-fsanitize=float-divide-by-zero"
            <cflags>"-fsanitize=float-cast-overflow"
          ;
        }
        else
        {
          flags +=
            <cflags>"-fno-sanitize=float-divide-by-zero"
            <cflags>"-fno-sanitize=float-cast-overflow"
          ;
        }
      }
    }
    if $(x_integer_sanitizers) != "default"
    {
      if ( $(JLN_NORMALIZED_C_IS_CLANG_LIKE) && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 500000 ] )
      {
        if $(x_integer_sanitizers) = "on"
        {
          flags +=
            <cflags>"-fsanitize=integer"
          ;
        }
        else
        {
          flags +=
            <cflags>"-fno-sanitize=integer"
          ;
        }
      }
      else
      {
        if ( $(JLN_NORMALIZED_C_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 400009 ] )
        {
          if $(x_integer_sanitizers) = "on"
          {
            flags +=
              <cflags>"-ftrapv"
              <cflags>"-fsanitize=undefined"
            ;
          }
        }
      }
    }
  }
  if $(x_conversion_warnings) != "default"
  {
    if ( $(JLN_NORMALIZED_C_COMP) = "gcc" || $(JLN_NORMALIZED_C_IS_CLANG_LIKE) || $(JLN_NORMALIZED_C_COMP) = "intel' && $(original_version) = 'linux" )
    {
      if $(x_conversion_warnings) = "on"
      {
        flags +=
          <cflags>"-Wconversion"
          <cflags>"-Wsign-compare"
          <cflags>"-Wsign-conversion"
        ;
      }
      else
      {
        if $(x_conversion_warnings) = "conversion"
        {
          flags +=
            <cflags>"-Wconversion"
          ;
        }
        else
        {
          if $(x_conversion_warnings) = "sign"
          {
            flags +=
              <cflags>"-Wsign-compare"
              <cflags>"-Wsign-conversion"
            ;
          }
          else
          {
            flags +=
              <cflags>"-Wno-conversion"
              <cflags>"-Wno-sign-compare"
              <cflags>"-Wno-sign-conversion"
            ;
          }
        }
      }
    }
  }
  if ( $(JLN_NORMALIZED_C_COMP) = "gcc" || $(JLN_NORMALIZED_C_COMP) = "clang" || $(JLN_NORMALIZED_C_COMP) = "clang-emcc" )
  {
    if $(x_pedantic) != "default"
    {
      if $(x_pedantic) != "off"
      {
        flags +=
          <cflags>"-pedantic"
        ;
        if $(x_pedantic) = "as-error"
        {
          flags +=
            <cflags>"-pedantic-errors"
          ;
        }
      }
    }
    if $(JLN_NORMALIZED_C_COMP) = "clang-emcc"
    {
      if $(x_optimization) != "default"
      {
        if $(x_optimization) = "0"
        {
          flags +=
            <cflags>"-O0"
            <linkflags>"-O0"
          ;
        }
        else
        {
          if $(x_optimization) = "g"
          {
            flags +=
              <cflags>"-Og"
              <linkflags>"-Og"
            ;
          }
          else
          {
            if $(x_optimization) = "1"
            {
              flags +=
                <cflags>"-O1"
                <linkflags>"-O1"
              ;
            }
            else
            {
              if $(x_optimization) = "2"
              {
                flags +=
                  <cflags>"-O2"
                  <linkflags>"-O2"
                ;
              }
              else
              {
                if $(x_optimization) = "3"
                {
                  flags +=
                    <cflags>"-O3"
                    <linkflags>"-O3"
                  ;
                }
                else
                {
                  if $(x_optimization) = "fast"
                  {
                    flags +=
                      <cflags>"-O3"
                      <cflags>"-mnontrapping-fptoint"
                      <linkflags>"-O3"
                      <linkflags>"-mnontrapping-fptoint"
                    ;
                  }
                  else
                  {
                    if $(x_optimization) = "size"
                    {
                      flags +=
                        <cflags>"-Os"
                        <linkflags>"-Os"
                      ;
                    }
                    else
                    {
                      flags +=
                        <cflags>"-Oz"
                        <linkflags>"-Oz"
                      ;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if $(x_debug_level) != "default"
      {
        if $(x_debug_level) = "0"
        {
          flags +=
            <cflags>"-g0"
          ;
        }
        else
        {
          if $(x_debug_level) = "1"
          {
            flags +=
              <cflags>"-g1"
            ;
          }
          else
          {
            if $(x_debug_level) = "2"
            {
              flags +=
                <cflags>"-g2"
              ;
            }
            else
            {
              if $(x_debug_level) = "3"
              {
                flags +=
                  <cflags>"-g3"
                ;
              }
            }
          }
        }
      }
      if $(x_debug) != "default"
      {
        if $(x_debug) = "off"
        {
          flags +=
            <cflags>"-g0"
          ;
        }
        else
        {
          if $(x_debug_level) = "default"
          {
            flags +=
              <cflags>"-g"
            ;
          }
        }
      }
    }
    else
    {
      if $(x_coverage) != "default"
      {
        if $(x_coverage) = "on"
        {
          flags +=
            <cflags>"--coverage"
            <linkflags>"--coverage"
          ;
          if $(JLN_NORMALIZED_C_COMP) = "clang"
          {
            flags +=
              <linkflags>"-lprofile_rt"
            ;
          }
        }
      }
      if $(x_debug_level) != "default"
      {
        if $(x_debug_level) = "0"
        {
          flags +=
            <cflags>"-g0"
          ;
        }
        else
        {
          if $(x_debug_level) = "1"
          {
            if ( $(x_debug) = "gdb" )
            {
              flags +=
                <cflags>"-ggdb1"
              ;
            }
            else
            {
              flags +=
                <cflags>"-g1"
              ;
            }
          }
          else
          {
            if $(x_debug_level) = "2"
            {
              if ( $(x_debug) = "gdb" )
              {
                flags +=
                  <cflags>"-ggdb2"
                ;
              }
              else
              {
                flags +=
                  <cflags>"-g2"
                ;
              }
            }
            else
            {
              if $(x_debug_level) = "3"
              {
                if ( $(x_debug) = "gdb" )
                {
                  flags +=
                    <cflags>"-ggdb3"
                  ;
                }
                else
                {
                  flags +=
                    <cflags>"-g3"
                  ;
                }
              }
              else
              {
                if $(x_debug_level) = "line-tables-only"
                {
                  if $(JLN_NORMALIZED_C_COMP) = "clang"
                  {
                    flags +=
                      <cflags>"-gline-tables-only"
                    ;
                  }
                  else
                  {
                    flags +=
                      <cflags>"-g"
                    ;
                  }
                }
                else
                {
                  if $(x_debug_level) = "line-directives-only"
                  {
                    if $(JLN_NORMALIZED_C_COMP) = "clang"
                    {
                      flags +=
                        <cflags>"-gline-directives-only"
                      ;
                    }
                    else
                    {
                      flags +=
                        <cflags>"-g"
                      ;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if $(x_debug) != "default"
      {
        if $(x_debug) = "off"
        {
          flags +=
            <cflags>"-g0"
          ;
        }
        else
        {
          if $(x_debug) = "on"
          {
            if $(x_debug_level) = "default"
            {
              flags +=
                <cflags>"-g"
              ;
            }
          }
          else
          {
            if $(x_debug) = "gdb"
            {
              if $(x_debug_level) = "default"
              {
                flags +=
                  <cflags>"-ggdb"
                ;
              }
            }
            else
            {
              if $(JLN_NORMALIZED_C_COMP) = "clang"
              {
                if $(x_debug) = "lldb"
                {
                  flags +=
                    <cflags>"-glldb"
                  ;
                }
                else
                {
                  if $(x_debug) = "sce"
                  {
                    flags +=
                      <cflags>"-gsce"
                    ;
                  }
                  else
                  {
                    if $(x_debug) = "dbx"
                    {
                      flags +=
                        <cflags>"-gdbx"
                      ;
                    }
                    else
                    {
                      flags +=
                        <cflags>"-g"
                      ;
                    }
                  }
                }
              }
              else
              {
                if $(x_debug) = "vms"
                {
                  flags +=
                    <cflags>"-gvms"
                  ;
                }
              }
            }
          }
        }
      }
      if $(x_optimization) != "default"
      {
        if $(x_optimization) = "0"
        {
          flags +=
            <cflags>"-O0"
          ;
        }
        else
        {
          if $(x_optimization) = "g"
          {
            flags +=
              <cflags>"-Og"
            ;
          }
          else
          {
            flags +=
              <linkflags>"-Wl,-O1"
            ;
            if $(x_optimization) = "1"
            {
              flags +=
                <cflags>"-O1"
              ;
            }
            else
            {
              if $(x_optimization) = "2"
              {
                flags +=
                  <cflags>"-O2"
                ;
              }
              else
              {
                if $(x_optimization) = "3"
                {
                  flags +=
                    <cflags>"-O3"
                  ;
                }
                else
                {
                  if $(x_optimization) = "size"
                  {
                    flags +=
                      <cflags>"-Os"
                    ;
                  }
                  else
                  {
                    if $(x_optimization) = "z"
                    {
                      if ( $(JLN_NORMALIZED_C_COMP) = "clang" || ( $(JLN_NORMALIZED_C_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 1200000 ] ) )
                      {
                        flags +=
                          <cflags>"-Oz"
                        ;
                      }
                      else
                      {
                        flags +=
                          <cflags>"-Os"
                        ;
                      }
                    }
                    else
                    {
                      if $(JLN_NORMALIZED_C_COMP) = "clang"
                      {
                        flags +=
                          <cflags>"-O3"
                          <cflags>"-ffast-math"
                        ;
                      }
                      else
                      {
                        flags +=
                          <cflags>"-Ofast"
                        ;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if $(x_cpu) != "default"
      {
        if $(x_cpu) = "generic"
        {
          flags +=
            <cflags>"-mtune=generic"
            <linkflags>"-mtune=generic"
          ;
        }
        else
        {
          flags +=
            <cflags>"-march=native"
            <cflags>"-mtune=native"
            <linkflags>"-march=native"
            <linkflags>"-mtune=native"
          ;
        }
      }
      if $(x_linker) != "default"
      {
        if $(x_linker) = "mold"
        {
          flags +=
            <linkflags>"-fuse-ld=mold"
          ;
        }
        else
        {
          if $(x_linker) = "native"
          {
            if $(JLN_NORMALIZED_C_COMP) = "gcc"
            {
              flags +=
                <linkflags>"-fuse-ld=gold"
              ;
            }
            else
            {
              flags +=
                <linkflags>"-fuse-ld=lld"
              ;
            }
          }
          else
          {
            if $(x_linker) = "bfd"
            {
              flags +=
                <linkflags>"-fuse-ld=bfd"
              ;
            }
            else
            {
              if ( $(x_linker) = "gold" || ( $(JLN_NORMALIZED_C_COMP) = "gcc" && [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 900000 ] ) )
              {
                flags +=
                  <linkflags>"-fuse-ld=gold"
                ;
              }
              else
              {
                if $(x_lto) != "default"
                {
                  if ( $(x_lto) != "off" && $(JLN_NORMALIZED_C_COMP) = "gcc" )
                  {
                    flags +=
                      <linkflags>"-fuse-ld=gold"
                    ;
                  }
                  else
                  {
                    flags +=
                      <linkflags>"-fuse-ld=lld"
                    ;
                  }
                }
                else
                {
                  flags +=
                    <linkflags>"-fuse-ld=lld"
                  ;
                }
              }
            }
          }
        }
      }
      if $(x_whole_program) != "default"
      {
        if $(x_whole_program) = "off"
        {
          flags +=
            <cflags>"-fno-whole-program"
          ;
          if ( $(JLN_NORMALIZED_C_COMP) = "clang" && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 300009 ] )
          {
            flags +=
              <cflags>"-fno-whole-program-vtables"
              <linkflags>"-fno-whole-program-vtables"
            ;
          }
        }
        else
        {
          if $(linker) = 'ld64'
          {
            flags +=
              <linkflags>"-Wl,-dead_strip"
              <linkflags>"-Wl,-S"
            ;
          }
          else
          {
            flags +=
              <linkflags>"-s"
            ;
            if $(x_whole_program) = "strip-all"
            {
              flags +=
                <linkflags>"-Wl,--gc-sections"
                <linkflags>"-Wl,--strip-all"
              ;
            }
          }
          if $(JLN_NORMALIZED_C_COMP) = "gcc"
          {
            flags +=
              <cflags>"-fwhole-program"
              <linkflags>"-fwhole-program"
            ;
          }
          else
          {
            if $(JLN_NORMALIZED_C_COMP) = "clang"
            {
              if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 300009 ]
              {
                if $(x_lto) != "default"
                {
                  if $(x_lto) != "off"
                  {
                    flags +=
                      <cflags>"-fwhole-program-vtables"
                      <linkflags>"-fwhole-program-vtables"
                    ;
                  }
                }
                if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 700000 ]
                {
                  flags +=
                    <cflags>"-fforce-emit-vtables"
                    <linkflags>"-fforce-emit-vtables"
                  ;
                }
              }
            }
          }
        }
      }
      if $(x_stack_protector) != "default"
      {
        if $(x_stack_protector) = "off"
        {
          flags +=
            <cflags>"-Wno-stack-protector"
            <cflags>"-U_FORTIFY_SOURCE"
            <linkflags>"-Wno-stack-protector"
          ;
        }
        else
        {
          flags +=
            <cflags>"-Wstack-protector"
          ;
          if ( ( $(JLN_NORMALIZED_C_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 1200000 ] ) || ( $(JLN_NORMALIZED_C_COMP) = "clang" && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 1400000 ] ) )
          {
            flags +=
              <cflags>"-D_FORTIFY_SOURCE=3"
            ;
          }
          else
          {
            flags +=
              <cflags>"-D_FORTIFY_SOURCE=2"
            ;
          }
          if $(x_stack_protector) = "strong"
          {
            if $(JLN_NORMALIZED_C_COMP) = "gcc"
            {
              if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 400009 ]
              {
                flags +=
                  <cflags>"-fstack-protector-strong"
                  <linkflags>"-fstack-protector-strong"
                ;
                if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 800000 ]
                {
                  flags +=
                    <cflags>"-fstack-clash-protection"
                    <linkflags>"-fstack-clash-protection"
                  ;
                }
              }
            }
            else
            {
              flags +=
                <cflags>"-fstack-protector-strong"
                <cflags>"-fsanitize=safe-stack"
                <linkflags>"-fstack-protector-strong"
                <linkflags>"-fsanitize=safe-stack"
              ;
              if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 1100000 ]
              {
                flags +=
                  <cflags>"-fstack-clash-protection"
                  <linkflags>"-fstack-clash-protection"
                ;
              }
            }
          }
          else
          {
            if $(x_stack_protector) = "all"
            {
              flags +=
                <cflags>"-fstack-protector-all"
                <linkflags>"-fstack-protector-all"
              ;
              if ( $(JLN_NORMALIZED_C_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 800000 ] )
              {
                flags +=
                  <cflags>"-fstack-clash-protection"
                  <linkflags>"-fstack-clash-protection"
                ;
              }
              else
              {
                flags +=
                  <cflags>"-fsanitize=safe-stack"
                  <linkflags>"-fsanitize=safe-stack"
                ;
                if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 1100000 ]
                {
                  flags +=
                    <cflags>"-fstack-clash-protection"
                    <linkflags>"-fstack-clash-protection"
                  ;
                }
              }
            }
            else
            {
              flags +=
                <cflags>"-fstack-protector"
                <linkflags>"-fstack-protector"
              ;
            }
          }
          if $(JLN_NORMALIZED_C_COMP) = "clang"
          {
            flags +=
              <cflags>"-fsanitize=shadow-call-stack"
              <linkflags>"-fsanitize=shadow-call-stack"
            ;
          }
        }
      }
      if $(x_relro) != "default"
      {
        if $(x_relro) = "off"
        {
          flags +=
            <linkflags>"-Wl,-z,norelro"
          ;
        }
        else
        {
          if $(x_relro) = "on"
          {
            flags +=
              <linkflags>"-Wl,-z,relro"
            ;
          }
          else
          {
            flags +=
              <linkflags>"-Wl,-z,relro,-z,now,-z,noexecstack"
            ;
            if $(x_linker) != "default"
            {
              if ! ( ( $(x_linker) = "gold" || ( $(JLN_NORMALIZED_C_COMP) = "gcc" && [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 900000 ] ) || ( $(x_linker) = "native" && $(JLN_NORMALIZED_C_COMP) = "gcc" ) ) )
              {
                flags +=
                  <linkflags>"-Wl,-z,separate-code"
                ;
              }
            }
          }
        }
      }
      if $(x_pie) != "default"
      {
        if $(x_pie) = "off"
        {
          flags +=
            <linkflags>"-no-pic"
          ;
        }
        else
        {
          if $(x_pie) = "on"
          {
            flags +=
              <linkflags>"-pie"
            ;
          }
          else
          {
            if $(x_pie) = "fpie"
            {
              flags +=
                <cflags>"-fpie"
              ;
            }
            else
            {
              if $(x_pie) = "fpic"
              {
                flags +=
                  <cflags>"-fpic"
                ;
              }
              else
              {
                if $(x_pie) = "fPIE"
                {
                  flags +=
                    <cflags>"-fPIE"
                  ;
                }
                else
                {
                  if $(x_pie) = "fPIC"
                  {
                    flags +=
                      <cflags>"-fPIC"
                    ;
                  }
                  else
                  {
                    flags +=
                      <linkflags>"-static-pie"
                    ;
                  }
                }
              }
            }
          }
        }
      }
      if $(x_other_sanitizers) != "default"
      {
        if $(x_other_sanitizers) = "thread"
        {
          flags +=
            <cflags>"-fsanitize=thread"
          ;
        }
        else
        {
          if $(x_other_sanitizers) = "memory"
          {
            if ( $(JLN_NORMALIZED_C_COMP) = "clang" && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 500000 ] )
            {
              flags +=
                <cflags>"-fsanitize=memory"
                <cflags>"-fno-omit-frame-pointer"
              ;
            }
          }
          else
          {
            if $(x_other_sanitizers) = "pointer"
            {
              if ( $(JLN_NORMALIZED_C_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 800000 ] )
              {
                flags +=
                  <cflags>"-fsanitize=pointer-compare"
                  <cflags>"-fsanitize=pointer-subtract"
                ;
              }
            }
          }
        }
      }
      if $(x_analyzer) != "default"
      {
        if ( $(JLN_NORMALIZED_C_COMP) = "gcc" && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 1000000 ] )
        {
          if $(x_analyzer) = "off"
          {
            flags +=
              <cflags>"-fno-analyzer"
            ;
          }
          else
          {
            flags +=
              <cflags>"-fanalyzer"
            ;
            if $(x_analyzer_too_complex_warning) != "default"
            {
              if $(x_analyzer_too_complex_warning) = "on"
              {
                flags +=
                  <cflags>"-Wanalyzer-too-complex"
                ;
              }
              else
              {
                flags +=
                  <cflags>"-Wno-analyzer-too-complex"
                ;
              }
            }
            if $(x_analyzer_verbosity) != "default"
            {
              if $(x_analyzer_verbosity) = "0"
              {
                flags +=
                  <cflags>"-fanalyzer-verbosity=0"
                ;
              }
              else
              {
                if $(x_analyzer_verbosity) = "1"
                {
                  flags +=
                    <cflags>"-fanalyzer-verbosity=1"
                  ;
                }
                else
                {
                  if $(x_analyzer_verbosity) = "2"
                  {
                    flags +=
                      <cflags>"-fanalyzer-verbosity=2"
                    ;
                  }
                  else
                  {
                    flags +=
                      <cflags>"-fanalyzer-verbosity=3"
                    ;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if $(linker) = 'lld-link'
  {
    if $(x_lto) != "default"
    {
      if $(x_lto) = "off"
      {
        flags +=
          <cflags>"-fno-lto"
        ;
      }
      else
      {
        if ( $(x_lto) = "thin" || $(x_lto) = "on" )
        {
          flags +=
            <cflags>"-flto=thin"
          ;
        }
        else
        {
          flags +=
            <cflags>"-flto"
            <linkflags>"-flto"
          ;
        }
      }
    }
    if $(x_whole_program) != "default"
    {
      if $(x_whole_program) = "off"
      {
        flags +=
          <cflags>"-fno-whole-program"
        ;
      }
      else
      {
        if $(x_lto) != "default"
        {
          if $(x_lto) != "off"
          {
            flags +=
              <cflags>"-fwhole-program-vtables"
              <linkflags>"-fwhole-program-vtables"
            ;
          }
        }
      }
    }
  }
  if ( $(JLN_NORMALIZED_C_COMP) = "msvc" || $(JLN_NORMALIZED_C_COMP) = "clang-cl" || $(JLN_NORMALIZED_C_COMP) = "intel' && $(original_version) = 'windows" )
  {
    if $(x_exceptions) != "default"
    {
      if $(x_exceptions) = "on"
      {
        flags +=
          <cflags>"/EHsc"
          <cflags>"/D_HAS_EXCEPTIONS=1"
        ;
      }
      else
      {
        flags +=
          <cflags>"/EHs-"
          <cflags>"/D_HAS_EXCEPTIONS=0"
        ;
      }
    }
    if $(x_rtti) != "default"
    {
      if $(x_rtti) = "on"
      {
        flags +=
          <cflags>"/GR"
        ;
      }
      else
      {
        flags +=
          <cflags>"/GR-"
        ;
      }
    }
    if $(x_stl_hardening) != "default"
    {
      if $(x_stl_hardening) = "off"
      {
        flags +=
          <cflags>"/D_SECURE_SCL=0"
        ;
      }
      else
      {
        if ( ! ( ( $(x_stl_hardening) = "fast" || $(x_stl_hardening) = "extensive" ) ) && $(x_stl_hardening) != "debug" )
        {
          flags +=
            <cflags>"/D_DEBUG"
          ;
        }
      }
    }
    if $(x_stl_fix) != "default"
    {
      if $(x_stl_fix) = "on"
      {
        flags +=
          <cflags>"/DNOMINMAX"
        ;
      }
    }
    if $(JLN_NORMALIZED_C_COMP) != "intel' && $(original_version) = 'windows"
    {
      if $(x_debug_level) != "default"
      {
        if $(x_debug_level) = "line-tables-only"
        {
          if $(JLN_NORMALIZED_C_COMP) = "clang-cl"
          {
            flags +=
              <cflags>"-gline-tables-only"
            ;
          }
          flags +=
            <cflags>"/DEBUG:FASTLINK"
          ;
        }
        if $(x_debug_level) = "line-directives-only"
        {
          if $(JLN_NORMALIZED_C_COMP) = "clang-cl"
          {
            flags +=
              <cflags>"-gline-directives-only"
            ;
          }
        }
      }
      if $(x_debug) != "default"
      {
        if $(x_debug) = "off"
        {
          flags +=
            <linkflags>"/DEBUG:NONE"
          ;
        }
        else
        {
          flags +=
            <cflags>"/RTC1"
            <cflags>"/Od"
          ;
          if $(x_debug) = "on"
          {
            flags +=
              <cflags>"/DEBUG"
            ;
          }
          if $(x_optimization) != "default"
          {
            if $(x_optimization) = "g"
            {
              flags +=
                <cflags>"/Zi"
              ;
            }
            else
            {
              if $(x_whole_program) != "default"
              {
                if $(x_whole_program) = "off"
                {
                  flags +=
                    <cflags>"/ZI"
                  ;
                }
                else
                {
                  flags +=
                    <cflags>"/Zi"
                  ;
                }
              }
              else
              {
                flags +=
                  <cflags>"/ZI"
                ;
              }
            }
          }
          else
          {
            if $(x_whole_program) != "default"
            {
              if $(x_whole_program) = "off"
              {
                flags +=
                  <cflags>"/ZI"
                ;
              }
              else
              {
                flags +=
                  <cflags>"/Zi"
                ;
              }
            }
            else
            {
              flags +=
                <cflags>"/ZI"
              ;
            }
          }
        }
      }
      if $(x_optimization) != "default"
      {
        if $(x_optimization) = "0"
        {
          flags +=
            <cflags>"/Ob0"
            <cflags>"/Od"
            <cflags>"/Oi-"
            <cflags>"/Oy-"
          ;
        }
        else
        {
          if $(x_optimization) = "g"
          {
            flags +=
              <cflags>"/Ob1"
            ;
          }
          else
          {
            if $(x_optimization) = "1"
            {
              flags +=
                <cflags>"/O1"
              ;
            }
            else
            {
              if $(x_optimization) = "2"
              {
                flags +=
                  <cflags>"/O2"
                ;
              }
              else
              {
                if $(x_optimization) = "3"
                {
                  flags +=
                    <cflags>"/O2"
                  ;
                }
                else
                {
                  if ( $(x_optimization) = "size" || $(x_optimization) = "z" )
                  {
                    flags +=
                      <cflags>"/O1"
                      <cflags>"/GL"
                      <cflags>"/Gw"
                    ;
                  }
                  else
                  {
                    flags +=
                      <cflags>"/O2"
                      <cflags>"/fp:fast"
                    ;
                  }
                }
              }
            }
          }
        }
      }
      if $(x_linker) != "default"
      {
        if $(JLN_NORMALIZED_C_COMP) = "clang-cl"
        {
          if ( $(x_linker) = "lld" || $(x_linker) = "native" )
          {
            flags +=
              <linkflags>"-fuse-ld=lld"
            ;
          }
          else
          {
            if $(x_linker) = "mold"
            {
              flags +=
                <linkflags>"-fuse-ld=mold"
              ;
            }
          }
        }
      }
      if $(x_control_flow) != "default"
      {
        if $(x_control_flow) = "off"
        {
          flags +=
            <cflags>"/guard:cf-"
          ;
        }
        else
        {
          flags +=
            <cflags>"/guard:cf"
          ;
        }
      }
      if $(x_whole_program) != "default"
      {
        if $(x_whole_program) = "off"
        {
          flags +=
            <cflags>"/GL-"
          ;
        }
        else
        {
          flags +=
            <cflags>"/GL"
            <cflags>"/Gw"
            <linkflags>"/LTCG"
          ;
          if $(x_whole_program) = "strip-all"
          {
            flags +=
              <linkflags>"/OPT:REF"
            ;
          }
        }
      }
      if $(x_pedantic) != "default"
      {
        if $(x_pedantic) != "off"
        {
          flags +=
            <cflags>"/permissive-"
          ;
        }
      }
      if $(x_stack_protector) != "default"
      {
        if $(x_stack_protector) = "off"
        {
          flags +=
            <cflags>"/GS-"
          ;
        }
        else
        {
          flags +=
            <cflags>"/GS"
            <cflags>"/sdl"
          ;
          if $(x_stack_protector) = "strong"
          {
            flags +=
              <cflags>"/RTC1"
            ;
            if ( $(JLN_NORMALIZED_C_COMP) = "msvc" && ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 1600007 ] )
            {
              flags +=
                <cflags>"/guard:ehcont"
                <linkflags>"/CETCOMPAT"
              ;
            }
          }
          else
          {
            if $(x_stack_protector) = "all"
            {
              flags +=
                <cflags>"/RTC1"
                <cflags>"/RTCc"
              ;
            }
          }
          if $(x_control_flow) != "default" && ! ( $(x_control_flow) = "off" )
          {
            flags +=
              <cflags>"/guard:cf"
            ;
          }
        }
      }
    }
  }
  if $(JLN_NORMALIZED_C_COMP) = "msvc"
  {
    if $(x_analyzer) != "default"
    {
      if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 1500000 ]
      {
        if $(x_analyzer) = "off"
        {
          flags +=
            <cflags>"/analyze-"
          ;
        }
        else
        {
          flags +=
            <cflags>"/analyze"
          ;
        }
      }
    }
    if $(x_windows_bigobj) != "default"
    {
      flags +=
        <cflags>"/bigobj"
      ;
    }
    if $(x_msvc_conformance) != "default"
    {
      if ( $(x_msvc_conformance) = "all" || $(x_msvc_conformance) = "all-without-throwing-new" )
      {
        flags +=
          <cflags>"/Zc:inline"
          <cflags>"/Zc:referenceBinding"
        ;
        if $(x_msvc_conformance) = "all"
        {
          flags +=
            <cflags>"/Zc:throwingNew"
          ;
        }
        if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 1500006 ]
        {
          if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 1600005 ]
          {
            flags +=
              <cflags>"/Zc:preprocessor"
            ;
          }
        }
      }
    }
    if $(x_msvc_crt_secure_no_warnings) != "default"
    {
      if $(x_msvc_crt_secure_no_warnings) = "on"
      {
        flags +=
          <cflags>"/D_CRT_SECURE_NO_WARNINGS=1"
        ;
      }
      else
      {
        if $(x_msvc_crt_secure_no_warnings) = "off"
        {
          flags +=
            <cflags>"/U_CRT_SECURE_NO_WARNINGS"
          ;
        }
      }
    }
    if $(x_msvc_diagnostics_format) != "default"
    {
      if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 1700000 ]
      {
        if $(x_msvc_diagnostics_format) = "classic"
        {
          flags +=
            <cflags>"/diagnostics:classic"
          ;
        }
        else
        {
          if $(x_msvc_diagnostics_format) = "column"
          {
            flags +=
              <cflags>"/diagnostics:column"
            ;
          }
          else
          {
            flags +=
              <cflags>"/diagnostics:caret"
            ;
          }
        }
      }
    }
    if [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 1500016 ]
    {
      x_msvc_isystem = "default" ;
    }
    if $(x_msvc_isystem) != "default"
    {
      if $(x_msvc_isystem) = "external-as-include-system-flag"
      {
        if [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 1600010 ]
        {
          # unimplementable
        }
        else
        {
          # unimplementable
        }
      }
      else
      {
        if [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 1600010 ]
        {
          flags +=
            <cflags>"/experimental:external"
          ;
        }
        flags +=
          <cflags>"/external:W0"
        ;
        if $(x_msvc_isystem) = "anglebrackets"
        {
          flags +=
            <cflags>"/external:anglebrackets"
          ;
        }
        else
        {
          flags +=
            <cflags>"/external:env:INCLUDE"
            <cflags>"/external:env:CAExcludePath"
          ;
        }
      }
      if $(x_msvc_isystem_with_template_from_non_external) != "default"
      {
        if $(x_msvc_isystem_with_template_from_non_external) = "off"
        {
          flags +=
            <cflags>"/external:template"
          ;
        }
        else
        {
          flags +=
            <cflags>"/external:template-"
          ;
        }
      }
      if $(x_warnings) != "default"
      {
        if $(x_warnings) = "off"
        {
          flags +=
            <cflags>"/W0"
          ;
        }
        else
        {
          flags +=
            <cflags>"/wd4710"
            <cflags>"/wd4711"
          ;
          if [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 1900021 ]
          {
            flags +=
              <cflags>"/wd4774"
            ;
          }
          if $(x_warnings) = "on"
          {
            flags +=
              <cflags>"/W4"
              <cflags>"/wd4514"
            ;
          }
          else
          {
            flags +=
              <cflags>"/Wall"
              <cflags>"/wd4514"
              <cflags>"/wd4571"
              <cflags>"/wd4355"
              <cflags>"/wd4548"
              <cflags>"/wd4577"
              <cflags>"/wd4820"
              <cflags>"/wd5039"
              <cflags>"/wd4464"
              <cflags>"/wd4868"
              <cflags>"/wd5045"
            ;
            if $(x_warnings) = "strict"
            {
              flags +=
                <cflags>"/wd4583"
                <cflags>"/wd4619"
              ;
            }
          }
        }
      }
      if $(x_switch_warnings) != "default"
      {
        if ( $(x_switch_warnings) = "on" || $(x_switch_warnings) = "mandatory-default" )
        {
          flags +=
            <cflags>"/w14062"
          ;
        }
        else
        {
          if ( $(x_switch_warnings) = "exhaustive-enum" || $(x_switch_warnings) = "exhaustive-enum-and-mandatory-default" )
          {
            flags +=
              <cflags>"/w14061"
              <cflags>"/w14062"
            ;
          }
          else
          {
            flags +=
              <cflags>"/wd4061"
              <cflags>"/wd4062"
            ;
          }
        }
      }
    }
    else
    {
      if $(x_warnings) != "default"
      {
        if $(x_warnings) = "off"
        {
          flags +=
            <cflags>"/W0"
          ;
        }
        else
        {
          if $(x_warnings) = "on"
          {
            flags +=
              <cflags>"/W4"
              <cflags>"/wd4514"
              <cflags>"/wd4711"
            ;
          }
          else
          {
            flags +=
              <cflags>"/Wall"
              <cflags>"/wd4355"
              <cflags>"/wd4514"
              <cflags>"/wd4548"
              <cflags>"/wd4571"
              <cflags>"/wd4577"
              <cflags>"/wd4625"
              <cflags>"/wd4626"
              <cflags>"/wd4668"
              <cflags>"/wd4710"
              <cflags>"/wd4711"
            ;
            if [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 1900021 ]
            {
              flags +=
                <cflags>"/wd4774"
              ;
            }
            flags +=
              <cflags>"/wd4820"
              <cflags>"/wd5026"
              <cflags>"/wd5027"
              <cflags>"/wd5039"
              <cflags>"/wd4464"
              <cflags>"/wd4868"
              <cflags>"/wd5045"
            ;
            if $(x_warnings) = "strict"
            {
              flags +=
                <cflags>"/wd4061"
                <cflags>"/wd4266"
                <cflags>"/wd4583"
                <cflags>"/wd4619"
                <cflags>"/wd4623"
                <cflags>"/wd5204"
              ;
            }
          }
        }
      }
    }
    if $(x_conversion_warnings) != "default"
    {
      if $(x_conversion_warnings) = "on"
      {
        flags +=
          <cflags>"/w14244"
          <cflags>"/w14245"
          <cflags>"/w14388"
          <cflags>"/w14365"
        ;
      }
      else
      {
        if $(x_conversion_warnings) = "conversion"
        {
          flags +=
            <cflags>"/w14244"
            <cflags>"/w14365"
          ;
        }
        else
        {
          if $(x_conversion_warnings) = "sign"
          {
            flags +=
              <cflags>"/w14388"
              <cflags>"/w14245"
            ;
          }
          else
          {
            flags +=
              <cflags>"/wd4244"
              <cflags>"/wd4365"
              <cflags>"/wd4388"
              <cflags>"/wd4245"
            ;
          }
        }
      }
    }
    if $(x_shadow_warnings) != "default"
    {
      if $(x_shadow_warnings) = "off"
      {
        flags +=
          <cflags>"/wd4456"
          <cflags>"/wd4459"
        ;
      }
      else
      {
        if ( $(x_shadow_warnings) = "on" || $(x_shadow_warnings) = "all" )
        {
          flags +=
            <cflags>"/w4456"
            <cflags>"/w4459"
          ;
        }
        else
        {
          if $(x_shadow_warnings) = "local"
          {
            flags +=
              <cflags>"/w4456"
              <cflags>"/wd4459"
            ;
          }
        }
      }
    }
    if $(x_warnings_as_error) != "default"
    {
      if $(x_warnings_as_error) = "on"
      {
        flags +=
          <cflags>"/WX"
        ;
      }
      else
      {
        if $(x_warnings_as_error) = "off"
        {
          flags +=
            <cflags>"/WX-"
          ;
        }
        else
        {
          flags +=
            <cflags>"/we4716"
            <cflags>"/we2124"
          ;
        }
      }
    }
    if $(x_lto) != "default"
    {
      if $(x_lto) = "off"
      {
        flags +=
          <cflags>"/LTCG:OFF"
        ;
      }
      else
      {
        flags +=
          <cflags>"/GL"
          <linkflags>"/LTCG"
        ;
      }
    }
    if $(x_sanitizers) != "default"
    {
      if ! [ numbers.less $(JLN_NORMALIZED_C_COMP_VERSION) 1600009 ]
      {
        flags +=
          <cflags>"/fsanitize=address"
          <cflags>"/fsanitize-address-use-after-return"
        ;
      }
      else
      {
        if $(x_sanitizers) = "on"
        {
          flags +=
            <cflags>"/sdl"
          ;
        }
        else
        {
          if $(x_stack_protector) != "default"
          {
            if $(x_stack_protector) != "off"
            {
              flags +=
                <cflags>"/sdl-"
              ;
            }
          }
        }
      }
    }
  }
  else
  {
    if $(JLN_NORMALIZED_C_COMP) = "intel' && $(original_version) = 'windows"
    {
      if $(x_warnings) != "default"
      {
        if $(x_warnings) = "off"
        {
          flags +=
            <cflags>"/w"
          ;
        }
        else
        {
          flags +=
            <cflags>"/W2"
            <cflags>"/Qdiag-disable:1418,2259"
          ;
        }
      }
      if $(x_warnings_as_error) != "default"
      {
        if $(x_warnings_as_error) = "on"
        {
          flags +=
            <cflags>"/WX"
          ;
        }
        else
        {
          if $(x_warnings_as_error) = "basic"
          {
            flags +=
              <cflags>"/Qdiag-error:1079,39,109"
            ;
          }
        }
      }
      if $(x_windows_bigobj) != "default"
      {
        flags +=
          <cflags>"/bigobj"
        ;
      }
      if $(x_msvc_conformance) != "default"
      {
        if ( $(x_msvc_conformance) = "all" || $(x_msvc_conformance) = "all-without-throwing-new" )
        {
          flags +=
            <cflags>"/Zc:inline"
            <cflags>"/Zc:strictStrings"
          ;
          if $(x_msvc_conformance) = "all"
          {
            flags +=
              <cflags>"/Zc:throwingNew"
            ;
          }
        }
      }
      if $(x_debug_level) != "default"
      {
        if ( $(x_debug_level) = "line-tables-only" || $(x_debug_level) = "line-directives-only" )
        {
          flags +=
            <cflags>"/debug:minimal"
          ;
        }
      }
      if $(x_debug) != "default"
      {
        if $(x_debug) = "off"
        {
          flags +=
            <linkflags>"/DEBUG:NONE"
          ;
        }
        else
        {
          flags +=
            <cflags>"/RTC1"
            <cflags>"/Od"
          ;
          if $(x_debug) = "on"
          {
            flags +=
              <cflags>"/debug:full"
            ;
          }
          if ( $(x_optimization) = "g" )
          {
            flags +=
              <cflags>"/Zi"
            ;
          }
          else
          {
            if $(x_whole_program) != "default"
            {
              if $(x_whole_program) = "off"
              {
                flags +=
                  <cflags>"/ZI"
                ;
              }
              else
              {
                flags +=
                  <cflags>"/Zi"
                ;
              }
            }
            else
            {
              flags +=
                <cflags>"/ZI"
              ;
            }
          }
        }
      }
      if $(x_optimization) != "default"
      {
        if $(x_optimization) = "0"
        {
          flags +=
            <cflags>"/Ob0"
            <cflags>"/Od"
            <cflags>"/Oi-"
            <cflags>"/Oy-"
          ;
        }
        else
        {
          if $(x_optimization) = "g"
          {
            flags +=
              <cflags>"/Ob1"
            ;
          }
          else
          {
            flags +=
              <cflags>"/GF"
            ;
            if $(x_optimization) = "1"
            {
              flags +=
                <cflags>"/O1"
              ;
            }
            else
            {
              if $(x_optimization) = "2"
              {
                flags +=
                  <cflags>"/O2"
                ;
              }
              else
              {
                if $(x_optimization) = "3"
                {
                  flags +=
                    <cflags>"/O2"
                  ;
                }
                else
                {
                  if $(x_optimization) = "z"
                  {
                    flags +=
                      <cflags>"/O3"
                    ;
                  }
                  else
                  {
                    if $(x_optimization) = "size"
                    {
                      flags +=
                        <cflags>"/Os"
                      ;
                    }
                    else
                    {
                      flags +=
                        <cflags>"/fast"
                      ;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if $(x_stack_protector) != "default"
      {
        if $(x_stack_protector) = "off"
        {
          flags +=
            <cflags>"/GS-"
          ;
        }
        else
        {
          flags +=
            <cflags>"/GS"
          ;
          if $(x_stack_protector) = "strong"
          {
            flags +=
              <cflags>"/RTC1"
            ;
          }
          else
          {
            if $(x_stack_protector) = "all"
            {
              flags +=
                <cflags>"/RTC1"
                <cflags>"/RTCc"
              ;
            }
          }
        }
      }
      if $(x_sanitizers) != "default"
      {
        if $(x_sanitizers) = "on"
        {
          flags +=
            <cflags>"/Qtrapuv"
          ;
        }
      }
      if $(x_float_sanitizers) != "default"
      {
        if $(x_float_sanitizers) = "on"
        {
          flags +=
            <cflags>"/Qfp-stack-check"
            <cflags>"/Qfp-trap:common"
          ;
        }
      }
      if $(x_control_flow) != "default"
      {
        if $(x_control_flow) = "off"
        {
          flags +=
            <cflags>"/guard:cf-"
            <cflags>"/mconditional-branch=keep"
          ;
        }
        else
        {
          flags +=
            <cflags>"/guard:cf"
          ;
          if $(x_control_flow) = "branch"
          {
            flags +=
              <cflags>"/mconditional-branch:all-fix"
              <cflags>"/Qcf-protection:branch"
            ;
          }
          else
          {
            if $(x_control_flow) = "on"
            {
              flags +=
                <cflags>"/mconditional-branch:all-fix"
                <cflags>"/Qcf-protection:full"
              ;
            }
          }
        }
      }
      if $(x_cpu) != "default"
      {
        if $(x_cpu) = "generic"
        {
          flags +=
            <cflags>"/Qtune:generic"
            <linkflags>"/Qtune:generic"
          ;
        }
        else
        {
          flags +=
            <cflags>"/QxHost"
            <linkflags>"/QxHost"
          ;
        }
      }
    }
    else
    {
      if $(JLN_NORMALIZED_C_COMP) = "intel' && $(original_version) = 'linux"
      {
        if $(x_warnings) != "default"
        {
          if $(x_warnings) = "off"
          {
            flags +=
              <cflags>"-w"
            ;
          }
          else
          {
            flags +=
              <cflags>"-Wall"
              <cflags>"-Warray-bounds"
              <cflags>"-Wcast-qual"
              <cflags>"-Wchar-subscripts"
              <cflags>"-Wdisabled-optimization"
              <cflags>"-Wenum-compare"
              <cflags>"-Wextra"
              <cflags>"-Wfloat-equal"
              <cflags>"-Wformat-security"
              <cflags>"-Wformat=2"
              <cflags>"-Winit-self"
              <cflags>"-Winvalid-pch"
              <cflags>"-Wmaybe-uninitialized"
              <cflags>"-Wmissing-include-dirs"
              <cflags>"-Wnarrowing"
              <cflags>"-Wnonnull"
              <cflags>"-Wparentheses"
              <cflags>"-Wpointer-sign"
              <cflags>"-Wreorder"
              <cflags>"-Wsequence-point"
              <cflags>"-Wtrigraphs"
              <cflags>"-Wundef"
              <cflags>"-Wunused-function"
              <cflags>"-Wunused-but-set-variable"
              <cflags>"-Wunused-variable"
              <cflags>"-Wpointer-arith"
              <cflags>"-Wold-style-definition"
              <cflags>"-Wstrict-prototypes"
              <cflags>"-Wwrite-strings"
            ;
          }
        }
        if $(x_switch_warnings) != "default"
        {
          if ( $(x_switch_warnings) = "on" || $(x_switch_warnings) = "exhaustive-enum" )
          {
            flags +=
              <cflags>"-Wswitch-enum"
            ;
          }
          else
          {
            if $(x_switch_warnings) = "mandatory-default"
            {
              flags +=
                <cflags>"-Wswitch-default"
              ;
            }
            else
            {
              if $(x_switch_warnings) = "exhaustive-enum-and-mandatory-default"
              {
                flags +=
                  <cflags>"-Wswitch"
                ;
              }
              else
              {
                flags +=
                  <cflags>"-Wno-switch"
                ;
              }
            }
          }
        }
        if $(x_warnings_as_error) != "default"
        {
          if $(x_warnings_as_error) = "on"
          {
            flags +=
              <cflags>"-Werror"
            ;
          }
          else
          {
            if $(x_warnings_as_error) = "basic"
            {
              flags +=
                <cflags>"-diag-error=1079,39,109"
              ;
            }
          }
        }
        if $(x_pedantic) != "default"
        {
          if $(x_pedantic) = "off"
          {
            flags +=
              <cflags>"-fgnu-keywords"
            ;
          }
          else
          {
            flags +=
              <cflags>"-fno-gnu-keywords"
            ;
          }
        }
        if $(x_shadow_warnings) != "default"
        {
          if $(x_shadow_warnings) = "off"
          {
            flags +=
              <cflags>"-Wno-shadow"
            ;
          }
          else
          {
            if ( $(x_shadow_warnings) = "on" || $(x_shadow_warnings) = "all" )
            {
              flags +=
                <cflags>"-Wshadow"
              ;
            }
          }
        }
        if $(x_debug) != "default"
        {
          if $(x_debug) = "off"
          {
            flags +=
              <cflags>"-g0"
            ;
          }
          else
          {
            flags +=
              <cflags>"-g"
            ;
          }
        }
        if $(x_optimization) != "default"
        {
          if $(x_optimization) = "0"
          {
            flags +=
              <cflags>"-O0"
            ;
          }
          else
          {
            if $(x_optimization) = "g"
            {
              flags +=
                <cflags>"-O1"
              ;
            }
            else
            {
              if $(x_optimization) = "1"
              {
                flags +=
                  <cflags>"-O1"
                ;
              }
              else
              {
                if $(x_optimization) = "2"
                {
                  flags +=
                    <cflags>"-O2"
                  ;
                }
                else
                {
                  if $(x_optimization) = "3"
                  {
                    flags +=
                      <cflags>"-O3"
                    ;
                  }
                  else
                  {
                    if $(x_optimization) = "z"
                    {
                      flags +=
                        <cflags>"-fast"
                      ;
                    }
                    else
                    {
                      if $(x_optimization) = "size"
                      {
                        flags +=
                          <cflags>"-Os"
                        ;
                      }
                      else
                      {
                        flags +=
                          <cflags>"-Ofast"
                        ;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if $(x_stack_protector) != "default"
        {
          if $(x_stack_protector) = "off"
          {
            flags +=
              <cflags>"-fno-protector-strong"
              <cflags>"-U_FORTIFY_SOURCE"
              <linkflags>"-fno-protector-strong"
            ;
          }
          else
          {
            flags +=
              <cflags>"-D_FORTIFY_SOURCE=2"
            ;
            if $(x_stack_protector) = "strong"
            {
              flags +=
                <cflags>"-fstack-protector-strong"
                <linkflags>"-fstack-protector-strong"
              ;
            }
            else
            {
              if $(x_stack_protector) = "all"
              {
                flags +=
                  <cflags>"-fstack-protector-all"
                  <linkflags>"-fstack-protector-all"
                ;
              }
              else
              {
                flags +=
                  <cflags>"-fstack-protector"
                  <linkflags>"-fstack-protector"
                ;
              }
            }
          }
        }
        if $(x_relro) != "default"
        {
          if $(x_relro) = "off"
          {
            flags +=
              <linkflags>"-Xlinker-znorelro"
            ;
          }
          else
          {
            if $(x_relro) = "on"
            {
              flags +=
                <linkflags>"-Xlinker-zrelro"
              ;
            }
            else
            {
              flags +=
                <linkflags>"-Xlinker-zrelro"
                <linkflags>"-Xlinker-znow"
                <linkflags>"-Xlinker-znoexecstack"
              ;
            }
          }
        }
        if $(x_pie) != "default"
        {
          if $(x_pie) = "off"
          {
            flags +=
              <linkflags>"-no-pic"
            ;
          }
          else
          {
            if $(x_pie) = "on"
            {
              flags +=
                <linkflags>"-pie"
              ;
            }
            else
            {
              if $(x_pie) = "fpie"
              {
                flags +=
                  <cflags>"-fpie"
                ;
              }
              else
              {
                if $(x_pie) = "fpic"
                {
                  flags +=
                    <cflags>"-fpic"
                  ;
                }
                else
                {
                  if $(x_pie) = "fPIE"
                  {
                    flags +=
                      <cflags>"-fPIE"
                    ;
                  }
                  else
                  {
                    if $(x_pie) = "fPIC"
                    {
                      flags +=
                        <cflags>"-fPIC"
                      ;
                    }
                  }
                }
              }
            }
          }
        }
        if $(x_sanitizers) != "default"
        {
          if $(x_sanitizers) = "on"
          {
            flags +=
              <cflags>"-ftrapuv"
            ;
          }
        }
        if $(x_integer_sanitizers) != "default"
        {
          if $(x_integer_sanitizers) = "on"
          {
            flags +=
              <cflags>"-funsigned-bitfields"
            ;
          }
          else
          {
            flags +=
              <cflags>"-fno-unsigned-bitfields"
            ;
          }
        }
        if $(x_float_sanitizers) != "default"
        {
          if $(x_float_sanitizers) = "on"
          {
            flags +=
              <cflags>"-fp-stack-check"
              <cflags>"-fp-trap=common"
            ;
          }
        }
        if $(x_linker) != "default"
        {
          if $(x_linker) = "bfd"
          {
            flags +=
              <linkflags>"-fuse-ld=bfd"
            ;
          }
          else
          {
            if $(x_linker) = "gold"
            {
              flags +=
                <linkflags>"-fuse-ld=gold"
              ;
            }
            else
            {
              if $(x_linker) = "mold"
              {
                flags +=
                  <linkflags>"-fuse-ld=mold"
                ;
              }
              else
              {
                flags +=
                  <linkflags>"-fuse-ld=lld"
                ;
              }
            }
          }
        }
        if $(x_lto) != "default"
        {
          if $(x_lto) = "off"
          {
            flags +=
              <cflags>"-no-ipo"
              <linkflags>"-no-ipo"
            ;
          }
          else
          {
            flags +=
              <cflags>"-ipo"
              <linkflags>"-ipo"
            ;
            if $(x_lto) = "fat"
            {
              if [ os.name ] = LINUX
              {
                flags +=
                  <cflags>"-ffat-lto-objects"
                  <linkflags>"-ffat-lto-objects"
                ;
              }
            }
          }
        }
        if $(x_control_flow) != "default"
        {
          if $(x_control_flow) = "off"
          {
            flags +=
              <cflags>"-mconditional-branch=keep"
              <cflags>"-fcf-protection=none"
            ;
          }
          else
          {
            if $(x_control_flow) = "branch"
            {
              flags +=
                <cflags>"-mconditional-branch=all-fix"
                <cflags>"-fcf-protection=branch"
              ;
            }
            else
            {
              if $(x_control_flow) = "on"
              {
                flags +=
                  <cflags>"-mconditional-branch=all-fix"
                  <cflags>"-fcf-protection=full"
                ;
              }
            }
          }
        }
        if $(x_exceptions) != "default"
        {
          if $(x_exceptions) = "on"
          {
            flags +=
              <cflags>"-fexceptions"
            ;
          }
          else
          {
            flags +=
              <cflags>"-fno-exceptions"
            ;
          }
        }
        if $(x_cpu) != "default"
        {
          if $(x_cpu) = "generic"
          {
            flags +=
              <cflags>"-mtune=generic"
              <linkflags>"-mtune=generic"
            ;
          }
          else
          {
            flags +=
              <cflags>"-xHost"
              <linkflags>"-xHost"
            ;
          }
        }
      }
      else
      {
        if [ os.name ] = MINGW
        {
          if $(x_windows_bigobj) != "default"
          {
            flags +=
              <cflags>"-Wa,-mbig-obj"
            ;
          }
        }
      }
    }
  }
  return $(flags) ;
}
